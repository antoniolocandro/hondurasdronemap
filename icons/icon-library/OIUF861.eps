%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1402.i016.034.P.m004.c22.energy icons flat.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: A
%%CreationDate: 2/18/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Шаблон</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-02-18T12:37:51+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-02-18T12:37:51+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-02-18T12:37:50+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FVkk8MbIskio0rcYwxALNStFr1O2KCV+KXYq7FUHq+q2mlafLfXZIhipUKKsSTQADbqTiqT6D&#xA;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&#xA;2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:FC2B14DB7898E311917F9CF61D666FFE</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:FC2B14DB7898E311917F9CF61D666FFE</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F92B14DB7898E311917F9CF61D666FFE</stRef:instanceID>
            <stRef:documentID>xmp.did:F92B14DB7898E311917F9CF61D666FFE</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AEE48BBD3858E311B08BEB1874A16191</stEvt:instanceID>
                  <stEvt:when>2013-11-28T16:31:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F92B14DB7898E311917F9CF61D666FFE</stEvt:instanceID>
                  <stEvt:when>2014-02-18T10:55:46+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC2B14DB7898E311917F9CF61D666FFE</stEvt:instanceID>
                  <stEvt:when>2014-02-18T12:37:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
39.6485 78.8892 mo
39.3994 78.8892 39.1836 78.7026 39.1524 78.4487 cv
39.1201 78.1748 39.3154 77.9258 39.5898 77.8925 cv
39.8799 77.858 68.7715 74.2735 79.2646 63.1265 cv
79.4541 62.9258 79.7696 62.9156 79.9717 63.1049 cv
80.1729 63.2944 80.1816 63.6109 79.9932 63.8121 cv
69.2509 75.2237 40.9102 78.7413 39.709 78.8857 cv
39.6485 78.8892 li
.878431 .584314 .188235 rgb
f
100.97 62.5015 mo
100.97 58.2066 li
107.156 62.5015 li
100.97 62.5015 li
97.9697 64.5982 mo
97.8183 64.5015 li
97.9697 64.5015 li
97.9697 64.5982 li
95.8076 78.168 mo
100.758 75.1357 li
104.269 83.352 li
95.8076 78.168 li
84.4756 83.352 mo
87.9874 75.1357 li
92.9365 78.168 li
84.4756 83.352 li
90.9258 64.5015 mo
90.7754 64.5977 li
90.7754 64.5015 li
90.9258 64.5015 li
81.5879 62.5015 mo
87.7753 58.2066 li
87.7753 62.5015 li
81.5879 62.5015 li
95.3867 47.5825 mo
94.3721 48.5498 li
93.3574 47.583 li
94.3721 45.559 li
95.3867 47.5825 li
97.9697 61.7637 mo
97.9697 62.5015 li
96.8204 62.5015 li
97.9697 61.7637 li
90.7754 61.7646 mo
91.9238 62.5015 li
90.7754 62.5015 li
90.7754 61.7646 li
91.501 51.2871 mo
92.6543 48.9854 li
93.2852 49.5864 li
91.501 51.2871 li
95.4589 49.5859 mo
96.0898 48.9848 li
97.2452 51.289 li
95.4589 49.5859 li
97.8321 53.9199 mo
96.2783 54.9478 li
92.4659 54.9478 li
90.9122 53.9199 li
94.3721 50.6221 li
97.8321 53.9199 li
95.7314 57.1089 mo
95.9745 56.9478 li
97.9697 56.9478 li
97.9697 58.5904 li
95.7314 57.1089 li
94.3721 58.0083 mo
97.6572 60.1822 li
94.3721 62.29 li
91.0869 60.1822 li
94.3721 58.0083 li
92.7696 56.9478 mo
93.0127 57.1089 li
90.7754 58.5898 li
90.7754 56.9478 li
92.7696 56.9478 li
98.0898 68.8936 mo
99.0537 71.1479 li
95.7822 69.0942 li
97.9697 67.7212 li
97.9697 68.3042 li
97.9697 68.5069 98.0107 68.7075 98.0898 68.8936 cv
88.6572 73.5673 mo
94.3721 69.9795 li
100.088 73.5679 li
100.162 73.7412 li
94.3721 77.2886 li
88.5829 73.7417 li
88.6572 73.5673 li
90.6553 68.8936 mo
90.7344 68.7075 90.7754 68.5069 90.7754 68.3042 cv
90.7754 67.7217 li
92.9619 69.0942 li
89.6915 71.147 li
90.6553 68.8936 li
97.6309 66.1631 mo
94.3721 68.209 li
91.1132 66.1631 li
93.7031 64.5015 li
95.041 64.5015 li
97.6309 66.1631 li
110.921 62.6801 mo
100.97 55.7719 li
100.97 52.3789 li
100.97 52.1455 100.915 51.915 100.811 51.7065 cv
95.7129 41.54 li
95.4589 41.0328 94.9395 40.7124 94.3721 40.7124 cv
93.8046 40.7124 93.2861 41.0328 93.0313 41.54 cv
87.9345 51.7065 li
87.8301 51.9155 87.7753 52.1455 87.7753 52.3789 cv
87.7753 55.7719 li
77.8233 62.6801 li
77.4639 62.9292 77.3085 63.3829 77.4394 63.8002 cv
77.5693 64.2173 77.9561 64.5015 78.3935 64.5015 cv
87.7753 64.5015 li
87.7753 67.9971 li
79.7705 86.7261 li
79.4453 87.4877 79.7989 88.3691 80.5605 88.6948 cv
81.3193 89.0195 82.2031 88.6674 82.5293 87.9048 cv
83.457 85.7353 li
94.3721 79.0479 li
105.287 85.7353 li
106.214 87.9048 li
106.458 88.4746 107.012 88.8159 107.594 88.8159 cv
107.791 88.8159 107.99 88.7768 108.183 88.6948 cv
108.944 88.3691 109.299 87.4877 108.973 86.7261 cv
100.97 67.9971 li
100.97 64.5015 li
110.351 64.5015 li
110.788 64.5015 111.175 64.2173 111.305 63.8002 cv
111.436 63.3829 111.28 62.9292 110.921 62.6801 cv
.552941 .682353 .701961 rgb
f
81.148 88.8156 mo
80.9516 88.8156 80.752 88.7768 80.5605 88.6948 cv
79.9922 88.4518 79.6512 87.8995 79.6496 87.3184 cv
79.6491 87.1206 79.6879 86.9195 79.7705 86.7261 cv
87.7753 67.9971 li
87.7753 64.5015 li
79.3133 64.5015 li
78.3935 64.5015 li
78.2369 64.5015 78.0868 64.4651 77.9527 64.3992 cv
77.7121 64.281 77.5228 64.068 77.4394 63.8002 cv
77.4088 63.7024 77.3938 63.6026 77.3935 63.5039 cv
77.3926 63.1814 77.5481 62.8708 77.8233 62.6801 cv
87.7753 55.7719 li
87.7753 52.3789 li
87.7753 52.1455 87.8301 51.9155 87.9345 51.7065 cv
93.0313 41.54 li
93.2861 41.0328 93.8046 40.7124 94.3721 40.7124 cv
94.3721 45.559 li
93.3574 47.583 li
94.3721 48.5498 li
94.3721 50.6221 li
90.9122 53.9199 li
92.4659 54.9478 li
94.3721 54.9478 li
94.3721 58.0083 li
91.0869 60.1822 li
94.3721 62.29 li
94.3721 64.5015 li
93.7031 64.5015 li
91.1132 66.1631 li
94.3721 68.209 li
94.3721 69.9795 li
88.6572 73.5673 li
88.5829 73.7417 li
94.3721 77.2886 li
94.3721 79.0479 li
83.457 85.7353 li
82.5293 87.9048 li
82.2854 88.475 81.73 88.8156 81.148 88.8156 cv
84.4756 83.352 mo
84.4756 83.352 li
92.9365 78.168 li
87.9874 75.1357 li
84.4756 83.352 li
89.6915 71.147 mo
89.6915 71.147 li
92.9619 69.0942 li
90.7754 67.7217 li
90.7754 68.3042 li
90.7754 68.5069 90.7344 68.7075 90.6553 68.8936 cv
89.6915 71.147 li
90.7754 64.5977 mo
90.7754 64.5977 li
90.9258 64.5015 li
90.7754 64.5015 li
90.7754 64.5977 li
90.7754 62.5015 mo
90.7754 62.5015 li
91.9238 62.5015 li
90.7754 61.7646 li
90.7754 62.5015 li
81.5879 62.5015 mo
81.5879 62.5015 li
87.7753 62.5015 li
87.7753 58.2066 li
81.5879 62.5015 li
90.7754 58.5898 mo
90.7754 58.5898 li
93.0127 57.1089 li
92.7696 56.9478 li
90.7754 56.9478 li
90.7754 58.5898 li
91.501 51.2871 mo
91.501 51.2871 li
93.2852 49.5864 li
92.6543 48.9854 li
91.501 51.2871 li
94.3721 77.2886 mo
94.3721 77.2886 li
94.3721 68.209 mo
94.3721 68.209 li
94.3721 62.29 mo
94.3721 62.29 li
94.3721 48.5498 mo
94.3721 48.5498 li
.498039 .611765 .631373 rgb
f
82.0508 78.8892 mo
81.8164 78.8892 81.6074 78.7236 81.5605 78.4849 cv
81.5078 78.2139 81.6846 77.9512 81.9561 77.8984 cv
82.1348 77.8638 98.9482 74.2842 109.451 63.1265 cv
109.642 62.9258 109.957 62.9155 110.158 63.105 cv
110.359 63.2944 110.368 63.6108 110.18 63.812 cv
99.4521 75.208 82.3291 78.8447 82.1475 78.8799 cv
82.0508 78.8892 li
cp
.980392 .65098 .211765 rgb
f
69.1133 77.3892 mo
69.1133 70.625 li
78.8574 77.3892 li
69.1133 77.3892 li
66.1132 80.4498 mo
64.4609 79.3891 li
66.1132 79.3891 li
66.1132 80.4498 li
62.2862 97.8486 mo
69.6475 93.3384 li
74.8701 105.559 li
62.2862 97.8486 li
46.831 105.559 mo
52.0537 93.3388 li
59.415 97.8486 li
46.831 105.559 li
57.2402 79.3891 mo
55.5878 80.4492 li
55.5878 79.3891 li
57.2402 79.3891 li
42.8438 77.3892 mo
52.5879 70.6255 li
52.5879 77.3892 li
42.8438 77.3892 li
60.8505 53.4888 mo
62.6826 57.143 li
60.8505 58.8897 li
59.0186 57.1436 li
60.8505 53.4888 li
66.1132 75.4781 mo
66.1132 77.3892 li
63.1348 77.3892 li
66.1132 75.4781 li
55.5878 75.4785 mo
58.5654 77.3892 li
55.5878 77.3892 li
55.5878 75.4785 li
55.6543 67.3667 mo
55.5878 67.3667 li
55.5878 67.3232 li
55.6543 67.3667 li
55.666 63.8316 mo
58.3154 58.5459 li
59.7637 59.9258 li
55.666 63.8316 li
61.9375 59.9258 mo
63.3858 58.5454 li
66.0371 63.8335 li
61.9375 59.9258 li
65.832 65.7105 mo
63.33 67.3667 li
58.371 67.3667 li
55.8681 65.7105 li
60.8505 60.9619 li
65.832 65.7105 li
62.209 69.9067 mo
63.0254 69.3667 li
66.1132 69.3667 li
66.1132 72.4912 li
62.209 69.9067 li
60.8505 70.8061 mo
65.6582 73.9883 li
60.8505 77.0728 li
56.043 73.9883 li
60.8505 70.8061 li
59.4922 69.9067 mo
55.5878 72.4907 li
55.5878 69.3667 li
58.6758 69.3667 li
59.4922 69.9067 li
66.1132 67.3667 mo
66.0469 67.3667 li
66.1132 67.3222 li
66.1132 67.3667 li
60.8505 84.9239 mo
56.0693 81.9224 li
60.0176 79.3891 li
61.6826 79.3891 li
65.6308 81.9224 li
60.8505 84.9239 li
66.2343 85.3506 mo
67.9589 89.3872 li
62.2607 85.8095 li
66.1132 83.3907 li
66.1132 84.7612 li
66.1132 84.9639 66.1543 85.1645 66.2343 85.3506 cv
52.708 91.8071 mo
60.8505 86.6948 li
68.9941 91.8076 li
69.0518 91.9443 li
60.8505 96.9693 li
52.6494 91.9448 li
52.708 91.8071 li
55.4678 85.3506 mo
55.5468 85.1645 55.5878 84.9639 55.5878 84.7612 cv
55.5878 83.3911 li
59.4405 85.8095 li
53.7421 89.3867 li
55.4678 85.3506 li
82.622 77.5679 mo
69.1133 68.1904 li
69.1133 63.6308 li
69.1133 63.3975 69.0586 63.1675 68.9541 62.9585 cv
62.1914 49.4697 li
61.9375 48.9624 61.418 48.6421 60.8505 48.6421 cv
60.2832 48.6421 59.7647 48.9624 59.5097 49.4697 cv
52.7471 62.9585 li
52.6425 63.1675 52.5879 63.3975 52.5879 63.6308 cv
52.5879 68.1909 li
39.0791 77.5679 li
38.7198 77.8169 38.5644 78.2705 38.6953 78.688 cv
38.8252 79.105 39.212 79.3891 39.6494 79.3891 cv
52.5879 79.3891 li
52.5879 84.4541 li
41.9277 109.396 li
41.6026 110.158 41.9561 111.039 42.7177 111.365 cv
42.9101 111.447 43.1103 111.486 43.3067 111.486 cv
43.8886 111.486 44.4433 111.145 44.6866 110.575 cv
45.8125 107.942 li
60.8505 98.7285 li
75.8887 107.942 li
77.0136 110.575 li
77.3399 111.337 78.2217 111.69 78.9825 111.365 cv
79.7441 111.039 80.0986 110.158 79.7725 109.396 cv
69.1133 84.4541 li
69.1133 79.3891 li
82.0518 79.3891 li
82.4883 79.3891 82.8749 79.105 83.0058 78.688 cv
83.1367 78.2705 82.9805 77.8169 82.622 77.5679 cv
.54902 .54902 .54902 rgb
f
59.0186 57.1436 mo
59.0186 57.1436 li
60.8505 53.4888 li
60.8505 53.4897 li
59.0186 57.1436 li
.898039 .898039 .898039 rgb
f
43.3067 111.486 mo
43.1103 111.486 42.9101 111.447 42.7177 111.365 cv
42.1495 111.122 41.8084 110.57 41.8069 109.989 cv
41.8063 109.791 41.8451 109.59 41.9277 109.396 cv
52.5879 84.4541 li
52.5879 79.3891 li
39.6494 79.3891 li
39.212 79.3891 38.8252 79.105 38.6953 78.688 cv
38.6647 78.5901 38.6497 78.4903 38.6494 78.3916 cv
38.6485 78.0691 38.804 77.7586 39.0791 77.5679 cv
52.5879 68.1909 li
52.5879 63.6308 li
52.5879 63.3975 52.6425 63.1675 52.7471 62.9585 cv
59.5097 49.4697 li
59.7647 48.9624 60.2832 48.6426 60.8505 48.6421 cv
60.8505 53.4888 li
59.0186 57.1436 li
60.8505 58.8897 li
60.8505 60.9619 li
55.8681 65.7105 li
58.371 67.3667 li
60.8505 67.3667 li
60.8505 70.8061 li
56.043 73.9883 li
60.8505 77.0728 li
60.8505 79.3891 li
60.0176 79.3891 li
56.0693 81.9224 li
60.8505 84.9239 li
60.8505 86.6948 li
52.708 91.8071 li
52.6494 91.9448 li
60.8505 96.9693 li
60.8505 98.7285 li
45.8125 107.942 li
44.6866 110.575 li
44.4433 111.145 43.8886 111.486 43.3067 111.486 cv
46.831 105.559 mo
46.831 105.559 li
59.415 97.8486 li
52.0537 93.3388 li
46.831 105.559 li
53.7421 89.3867 mo
53.7421 89.3867 li
59.4405 85.8095 li
55.5878 83.3911 li
55.5878 84.7612 li
55.5878 84.9639 55.5468 85.1645 55.4678 85.3506 cv
53.7421 89.3867 li
55.5878 80.4492 mo
55.5878 80.4492 li
57.2402 79.3891 li
55.5878 79.3891 li
55.5878 80.4492 li
55.5878 77.3892 mo
55.5878 77.3892 li
58.5654 77.3892 li
55.8952 75.6758 li
55.5878 75.4785 li
55.5878 75.7575 li
55.5878 77.3892 li
42.8438 77.3892 mo
42.8438 77.3892 li
52.5879 77.3892 li
52.5879 70.6255 li
42.8438 77.3892 li
55.5878 72.4907 mo
55.5878 72.4907 li
59.4922 69.9067 li
58.6758 69.3667 li
55.5878 69.3667 li
55.5878 72.4907 li
55.5878 67.3667 mo
55.5878 67.3667 li
55.6543 67.3667 li
55.5878 67.3232 li
55.5878 67.3667 li
55.666 63.8316 mo
55.666 63.8316 li
59.7637 59.9258 li
58.3154 58.5459 li
55.666 63.8316 li
.494118 .494118 .494118 rgb
f
196.182 81.2603 mo
196.182 76.3135 li
154.646 76.3135 li
154.646 81.2603 li
148.771 81.2603 li
148.771 115.966 li
202.055 115.966 li
202.055 81.2603 li
196.182 81.2603 li
.74902 .74902 .74902 rgb
f
170.688 76.3135 mo
161.287 76.3135 li
161.287 52.0869 li
170.688 52.0869 li
170.688 76.3135 li
.85098 .85098 .85098 rgb
f
170.688 65.146 mo
161.287 65.146 li
161.287 60.793 li
170.688 60.793 li
170.688 65.146 li
.901961 .443137 .443137 rgb
f
170.688 73.8516 mo
161.287 73.8516 li
161.287 69.499 li
170.688 69.499 li
170.688 73.8516 li
f
170.688 52.0869 mo
170.688 51.8853 168.584 51.7217 165.988 51.7217 cv
163.393 51.7217 161.287 51.8853 161.287 52.0869 cv
161.288 52.0869 li
161.287 52.0869 li
161.287 56.44 li
170.688 56.44 li
170.688 52.0869 li
170.687 52.0869 li
170.688 52.0869 li
f
189.538 76.3135 mo
180.139 76.3135 li
180.139 52.0869 li
189.538 52.0869 li
189.538 76.3135 li
cp
.85098 .85098 .85098 rgb
f
189.538 65.146 mo
180.139 65.146 li
180.139 60.793 li
189.538 60.793 li
189.538 65.146 li
cp
.901961 .443137 .443137 rgb
f
189.538 73.8516 mo
180.139 73.8516 li
180.139 69.499 li
189.538 69.499 li
189.538 73.8516 li
cp
f
189.538 52.0869 mo
189.538 51.8853 187.435 51.7217 184.838 51.7217 cv
182.242 51.7217 180.139 51.8853 180.139 52.0869 cv
180.139 56.4399 li
189.538 56.4399 li
189.538 52.0869 li
cp
f
179.896 96.8989 mo
170.931 96.8989 li
170.931 104.837 li
179.896 104.837 li
179.896 96.8989 li
.552941 .682353 .701961 rgb
f
189.773 96.8989 mo
180.808 96.8989 li
180.808 104.837 li
189.773 104.837 li
189.773 96.8989 li
cp
f
161.054 92.1358 mo
170.02 92.1358 li
170.02 84.1977 li
161.054 84.1977 li
161.054 92.1358 li
f
179.896 84.1977 mo
170.931 84.1977 li
170.931 92.1358 li
179.896 92.1358 li
179.896 84.1977 li
f
170.02 104.837 mo
170.02 96.8989 li
161.054 96.8989 li
161.054 104.837 li
170.02 104.837 li
f
190.685 92.1357 mo
199.515 92.1357 li
199.515 84.1978 li
190.685 84.1978 li
190.685 92.1357 li
cp
f
180.808 84.1978 mo
180.808 92.1357 li
189.773 92.1357 li
189.773 84.1978 li
180.808 84.1978 li
cp
f
190.685 104.837 mo
199.515 104.837 li
199.515 96.8989 li
190.685 96.8989 li
190.685 104.837 li
cp
f
160.143 84.1977 mo
151.41 84.1977 li
151.41 92.1358 li
160.143 92.1358 li
160.143 84.1977 li
f
160.143 96.8989 mo
151.41 96.8989 li
151.41 104.837 li
160.143 104.837 li
160.143 96.8989 li
f
165.036 49.9653 mo
167.392 49.9653 169.301 48.5259 169.301 46.75 cv
169.301 45.65 168.566 44.6797 167.447 44.0996 cv
167.452 44.0293 li
167.452 41.9433 165.487 40.2031 162.875 39.8027 cv
162.068 37.9731 159.784 36.6514 157.085 36.6514 cv
153.716 36.6514 150.983 38.7104 150.983 41.251 cv
150.983 43.6509 153.423 45.6191 156.534 45.8296 cv
157.386 47.2236 159.191 48.2153 161.323 48.3282 cv
162.055 49.3046 163.442 49.9653 165.036 49.9653 cv
.65098 .65098 .65098 rgb
f
184.79 49.9653 mo
187.146 49.9653 189.055 48.5259 189.055 46.75 cv
189.055 45.6499 188.32 44.6797 187.201 44.0996 cv
187.206 44.0293 li
187.206 41.9434 185.241 40.2031 182.629 39.8027 cv
181.823 37.9731 179.538 36.6514 176.84 36.6514 cv
173.47 36.6514 170.737 38.7104 170.737 41.251 cv
170.737 43.6509 173.177 45.6191 176.288 45.8296 cv
177.14 47.2236 178.945 48.2153 181.077 48.3281 cv
181.809 49.3047 183.196 49.9653 184.79 49.9653 cv
cp
f
175.414 115.966 mo
148.771 115.966 li
148.771 81.2603 li
154.646 81.2603 li
154.646 76.3135 li
161.287 76.3135 li
170.688 76.3135 li
175.414 76.3135 li
175.414 84.1977 li
170.931 84.1977 li
170.931 92.1358 li
175.414 92.1358 li
175.414 96.8989 li
170.931 96.8989 li
170.931 104.837 li
175.414 104.837 li
175.414 115.966 li
161.054 96.8989 mo
161.054 104.837 li
170.02 104.837 li
170.02 96.8989 li
161.054 96.8989 li
151.41 96.8989 mo
151.41 104.837 li
160.143 104.837 li
160.143 96.8989 li
151.41 96.8989 li
161.054 84.1977 mo
161.054 92.1358 li
170.02 92.1358 li
170.02 84.1977 li
161.054 84.1977 li
151.41 84.1977 mo
151.41 92.1358 li
160.143 92.1358 li
160.143 84.1977 li
151.41 84.1977 li
.67451 .67451 .67451 rgb
f
170.688 76.3135 mo
161.287 76.3135 li
161.287 73.8516 li
170.688 73.8516 li
170.688 76.3135 li
170.688 69.499 mo
161.287 69.499 li
161.287 65.146 li
170.688 65.146 li
170.688 69.499 li
170.688 60.793 mo
161.287 60.793 li
161.287 56.44 li
170.688 56.44 li
170.688 60.793 li
.764706 .764706 .764706 rgb
f
170.688 65.146 mo
170.688 65.146 li
161.287 65.146 li
161.287 60.793 li
170.688 60.793 li
170.688 65.146 li
.811765 .396078 .396078 rgb
f
170.688 73.8516 mo
170.688 73.8516 li
161.287 73.8516 li
161.287 69.499 li
170.688 69.499 li
170.688 73.8516 li
f
170.688 56.44 mo
170.688 56.44 li
161.287 56.44 li
161.287 52.0869 li
161.287 52.0869 li
161.288 52.0869 li
161.287 52.0869 li
161.287 51.8853 163.393 51.7217 165.988 51.7217 cv
168.584 51.7217 170.688 51.8853 170.688 52.0869 cv
170.688 56.44 li
f
175.414 104.837 mo
170.931 104.837 li
170.931 96.8989 li
175.414 96.8989 li
175.414 104.837 li
.498039 .611765 .631373 rgb
f
170.02 92.1358 mo
161.054 92.1358 li
161.054 84.1977 li
170.02 84.1977 li
170.02 92.1358 li
f
175.414 92.1358 mo
170.931 92.1358 li
170.931 84.1977 li
175.414 84.1977 li
175.414 92.1358 li
f
170.02 104.837 mo
161.054 104.837 li
161.054 96.8989 li
170.02 96.8989 li
170.02 104.837 li
f
160.143 92.1358 mo
151.41 92.1358 li
151.41 84.1977 li
160.143 84.1977 li
160.143 92.1358 li
f
160.143 104.837 mo
151.41 104.837 li
151.41 96.8989 li
160.143 96.8989 li
160.143 104.837 li
f
165.036 49.9653 mo
163.442 49.9653 162.055 49.3046 161.323 48.3282 cv
159.191 48.2153 157.386 47.2236 156.534 45.8296 cv
153.423 45.6191 150.983 43.6509 150.983 41.251 cv
150.983 38.7104 153.716 36.6514 157.085 36.6514 cv
159.784 36.6514 162.068 37.9731 162.875 39.8027 cv
165.487 40.2031 167.452 41.9433 167.452 44.0293 cv
167.447 44.0996 li
167.447 44.0996 li
168.566 44.6797 169.301 45.65 169.301 46.75 cv
169.301 48.5259 167.392 49.9653 165.036 49.9653 cv
.584314 .584314 .584314 rgb
f
275.34 64.146 mo
279.779 115.966 li
268.353 115.966 li
272.793 64.146 li
275.34 64.146 li
.74902 .74902 .74902 rgb
f
272.377 32.9849 mo
271.123 32.4556 li
270.961 32.3872 270.711 32.4121 270.566 32.5113 cv
269.439 33.2768 li
269.293 33.3755 269.18 33.5986 269.184 33.7739 cv
269.881 63.0733 li
274.002 64.2631 li
277.809 62.2852 li
272.727 33.4218 li
272.695 33.2486 272.539 33.0532 272.377 32.9849 cv
.682353 .823529 .290196 rgb
f
270.387 61.9545 mo
247.932 80.7881 li
247.797 80.9009 247.705 81.1338 247.727 81.3081 cv
247.896 82.6601 li
247.918 82.835 248.064 83.0381 248.221 83.1148 cv
249.449 83.7076 li
249.607 83.7837 249.857 83.772 250.008 83.6797 cv
275.033 68.4278 li
274.002 64.2627 li
270.387 61.9545 li
f
274.002 64.2631 mo
273.811 68.5488 li
301.35 78.5786 li
301.514 78.6392 301.762 78.602 301.902 78.4961 cv
302.988 77.6724 li
303.129 77.5664 303.23 77.3384 303.219 77.1631 cv
303.119 75.8037 li
303.105 75.6289 302.971 75.4185 302.814 75.3344 cv
277.094 61.2876 li
274.002 64.2631 li
f
273.811 115.966 mo
268.353 115.966 li
272.282 70.1043 li
273.262 69.5071 li
273.443 69.5324 273.625 69.5484 273.811 69.5549 cv
273.811 115.966 li
.67451 .67451 .67451 rgb
f
272.282 70.1043 mo
272.352 69.2955 li
272.646 69.3919 272.95 69.4633 273.262 69.5071 cv
272.282 70.1043 li
.611765 .741176 .258824 rgb
f
268.732 64.7866 mo
268.443 61.8769 270.568 59.2836 273.479 58.9941 cv
276.389 58.7051 278.982 60.8296 279.271 63.7393 cv
279.561 66.6495 277.436 69.2427 274.525 69.5318 cv
271.615 69.8209 269.023 67.6968 268.732 64.7866 cv
.54902 .54902 .54902 rgb
f
270.834 64.5777 mo
270.66 62.8286 271.938 61.269 273.688 61.0957 cv
275.436 60.9218 276.996 62.1988 277.17 63.9483 cv
277.344 65.6973 276.066 67.2563 274.316 67.4301 cv
272.568 67.604 271.01 66.3271 270.834 64.5777 cv
.74902 .74902 .74902 rgb
f
268.847 65.4744 mo
268.794 65.2511 268.756 65.0214 268.732 64.7866 cv
268.715 64.6105 268.706 64.4354 268.706 64.262 cv
268.706 64.4354 268.715 64.6105 268.732 64.7866 cv
268.756 65.0213 268.794 65.2509 268.847 65.4744 cv
.611765 .741176 .258824 rgb
f
273.811 69.5308 mo
271.434 69.4457 269.39 67.7888 268.847 65.4744 cv
268.794 65.2509 268.756 65.0213 268.732 64.7866 cv
268.715 64.6105 268.706 64.4354 268.706 64.262 cv
268.704 61.5713 270.745 59.2661 273.479 58.9941 cv
273.51 58.991 273.54 58.99 273.571 58.99 cv
273.604 58.99 273.638 58.9913 273.671 58.9926 cv
273.705 58.9939 273.739 58.9952 273.773 58.9952 cv
273.785 58.9952 273.798 58.995 273.811 58.9946 cv
273.811 61.0858 li
273.77 61.0883 273.729 61.0916 273.688 61.0957 cv
271.938 61.269 270.66 62.8286 270.834 64.5777 cv
270.993 66.1562 272.277 67.3499 273.811 67.4404 cv
273.811 69.5308 li
.494118 .494118 .494118 rgb
f
273.811 67.4404 mo
272.277 67.3499 270.993 66.1562 270.834 64.5777 cv
270.66 62.8286 271.938 61.269 273.688 61.0957 cv
273.729 61.0916 273.77 61.0883 273.811 61.0858 cv
273.811 67.4404 li
.67451 .67451 .67451 rgb
f
412.588 79.7227 mo
367.573 82.1353 li
367.225 82.1539 366.884 82.2466 366.566 82.3984 cv
366.248 82.5498 365.953 82.7607 365.694 83.0151 cv
365.437 83.27 365.215 83.5689 365.046 83.8975 cv
364.876 84.2255 364.759 84.5844 364.709 84.9585 cv
361.12 111.61 li
361.063 112.026 361.083 112.426 361.166 112.794 cv
361.25 113.164 361.397 113.501 361.598 113.789 cv
361.799 114.077 362.053 114.317 362.348 114.489 cv
362.644 114.663 362.98 114.769 363.348 114.79 cv
411.295 117.577 li
411.794 117.606 412.275 117.533 412.717 117.375 cv
413.159 117.218 413.561 116.975 413.903 116.667 cv
414.245 116.357 414.525 115.983 414.725 115.561 cv
414.923 115.139 415.039 114.67 415.052 114.174 cv
415.9 82.6835 li
415.912 82.2461 415.827 81.8349 415.663 81.4663 cv
415.499 81.0986 415.257 80.7734 414.955 80.5063 cv
414.654 80.2402 414.294 80.0313 413.893 79.8955 cv
413.493 79.7608 413.052 79.6978 412.588 79.7227 cv
400.625 90.6562 mo
401.109 82.3354 li
412.518 81.7935 li
412.673 81.7862 412.819 81.8081 412.951 81.8545 cv
413.084 81.9014 413.202 81.9717 413.3 82.0615 cv
413.398 82.1514 413.477 82.2602 413.529 82.3828 cv
413.582 82.5053 413.608 82.6416 413.605 82.7856 cv
413.363 90.374 li
400.625 90.6562 li
388.535 90.9243 mo
389.205 82.9009 li
399.019 82.4346 li
398.501 90.7031 li
388.535 90.9243 li
376.374 91.1938 mo
377.213 83.4706 li
387.264 82.9931 li
386.565 90.9678 li
376.374 91.1938 li
365.519 91.4345 mo
366.377 84.8842 li
366.394 84.7597 366.433 84.6396 366.49 84.5293 cv
366.547 84.419 366.621 84.3184 366.708 84.2334 cv
366.795 84.1475 366.895 84.0772 367.002 84.0264 cv
367.108 83.9756 367.223 83.9453 367.34 83.9394 cv
375.415 83.5557 li
374.552 91.2343 li
365.519 91.4345 li
399.893 103.205 mo
400.503 92.7491 li
413.294 92.5473 li
412.948 103.416 li
399.893 103.205 li
387.528 103.005 mo
388.367 92.9409 li
398.371 92.7828 li
397.72 103.169 li
387.528 103.005 li
375.112 102.804 mo
376.163 93.1333 li
386.391 92.9717 li
385.516 102.972 li
375.112 102.804 li
364.051 102.625 mo
365.272 93.3051 li
374.336 93.1621 li
373.255 102.773 li
364.051 102.625 li
399.23 114.571 mo
399.765 105.409 li
412.875 105.709 li
412.609 114.058 li
412.604 114.222 412.566 114.377 412.501 114.517 cv
412.437 114.657 412.345 114.781 412.233 114.884 cv
412.122 114.986 411.99 115.067 411.846 115.121 cv
411.7 115.174 411.542 115.199 411.376 115.191 cv
399.23 114.571 li
386.617 113.927 mo
387.352 105.124 li
397.582 105.358 li
397.012 114.457 li
386.617 113.927 li
373.974 113.281 mo
374.891 104.838 li
385.331 105.078 li
384.565 113.822 li
373.974 113.281 li
363.611 112.752 mo
363.489 112.746 363.377 112.711 363.278 112.654 cv
363.179 112.597 363.094 112.518 363.025 112.421 cv
362.958 112.326 362.907 112.213 362.879 112.09 cv
362.851 111.966 362.843 111.832 362.861 111.693 cv
363.794 104.583 li
373.027 104.795 li
372.084 113.185 li
363.611 112.752 li
.74902 .74902 .74902 rgb
f
387.264 82.9931 mo
377.213 83.4706 li
376.374 91.1938 li
386.565 90.9678 li
387.264 82.9931 li
.701961 .862745 .890196 rgb
f
374.336 93.1621 mo
365.272 93.3051 li
364.051 102.625 li
373.255 102.773 li
374.336 93.1621 li
f
399.019 82.4346 mo
389.205 82.9009 li
388.535 90.9243 li
398.501 90.7031 li
399.019 82.4346 li
f
386.391 92.9717 mo
376.163 93.1333 li
375.112 102.804 li
385.516 102.972 li
386.391 92.9717 li
f
412.518 81.7935 mo
401.109 82.3354 li
400.625 90.6563 li
413.363 90.374 li
413.604 82.7856 li
413.608 82.6416 413.582 82.5054 413.529 82.3828 cv
413.477 82.2603 413.398 82.1514 413.3 82.0615 cv
413.202 81.9717 413.084 81.9014 412.951 81.8545 cv
412.819 81.8081 412.673 81.7861 412.518 81.7935 cv
cp
f
385.331 105.078 mo
374.891 104.838 li
373.974 113.281 li
384.565 113.822 li
385.331 105.078 li
f
375.415 83.5557 mo
367.34 83.9394 li
367.223 83.9453 367.108 83.9756 367.002 84.0264 cv
366.895 84.0772 366.795 84.1475 366.708 84.2334 cv
366.621 84.3184 366.547 84.419 366.49 84.5293 cv
366.433 84.6396 366.394 84.7597 366.377 84.8842 cv
365.519 91.4345 li
374.552 91.2343 li
375.415 83.5557 li
f
412.875 105.709 mo
399.765 105.409 li
399.23 114.571 li
411.376 115.191 li
411.542 115.199 411.7 115.174 411.846 115.121 cv
411.99 115.067 412.122 114.986 412.233 114.884 cv
412.345 114.781 412.437 114.657 412.501 114.517 cv
412.566 114.377 412.604 114.222 412.609 114.058 cv
412.875 105.709 li
cp
f
373.027 104.795 mo
363.794 104.583 li
362.861 111.693 li
362.843 111.832 362.851 111.966 362.879 112.09 cv
362.907 112.213 362.958 112.326 363.025 112.421 cv
363.094 112.518 363.179 112.597 363.278 112.654 cv
363.377 112.711 363.489 112.746 363.611 112.752 cv
372.084 113.185 li
373.027 104.795 li
f
397.582 105.358 mo
387.352 105.124 li
386.617 113.927 li
397.012 114.457 li
397.582 105.358 li
f
413.294 92.5474 mo
400.503 92.749 li
399.893 103.205 li
412.948 103.416 li
413.294 92.5474 li
cp
f
398.371 92.7828 mo
388.367 92.9409 li
387.528 103.005 li
397.72 103.169 li
398.371 92.7828 li
f
378.383 81.5559 mo
378.383 81.5558 li
388.535 81.0117 li
378.383 81.5559 li
.898039 .898039 .898039 rgb
f
388.535 116.254 mo
363.348 114.79 li
362.98 114.769 362.644 114.663 362.348 114.489 cv
362.053 114.317 361.799 114.077 361.598 113.789 cv
361.397 113.501 361.25 113.164 361.166 112.794 cv
361.115 112.57 361.088 112.334 361.088 112.089 cv
361.087 111.932 361.098 111.772 361.12 111.61 cv
362.631 100.389 li
364.133 103.094 li
364.224 102.627 li
371.285 102.742 li
372.736 104.473 li
372.308 102.758 li
373.255 102.773 li
374.074 95.4896 li
375.819 96.3018 li
375.112 102.804 li
385.516 102.972 li
386.391 92.9717 li
376.163 93.1333 li
375.946 95.1306 li
374.136 91.2436 li
374.552 91.2343 li
374.655 90.3149 li
376.422 90.7561 li
376.374 91.1938 li
378.027 91.1571 li
384.449 92.7612 li
382.42 91.0597 li
386.565 90.9678 li
387.264 82.9931 li
381.469 83.2684 li
378.383 81.5559 li
388.535 81.0118 li
388.535 90.9243 li
388.535 92.9383 li
388.367 92.9409 li
387.528 103.005 li
388.535 103.021 li
388.535 105.151 li
387.352 105.124 li
386.617 113.927 li
388.535 114.025 li
388.535 116.254 li
373.974 113.281 mo
373.974 113.281 li
384.565 113.822 li
385.331 105.078 li
374.891 104.838 li
373.974 113.281 li
362.851 111.841 mo
362.851 111.927 362.861 112.011 362.879 112.09 cv
362.907 112.213 362.958 112.326 363.025 112.421 cv
363.094 112.518 363.179 112.597 363.278 112.654 cv
363.377 112.711 363.489 112.746 363.611 112.752 cv
372.084 113.185 li
373.027 104.795 li
363.794 104.583 li
362.861 111.693 li
362.855 111.743 362.851 111.792 362.851 111.841 cv
.67451 .67451 .67451 rgb
f
376.892 86.425 mo
375.863 85.5625 li
377.01 85.3389 li
376.892 86.425 li
f
376.374 91.1938 mo
376.374 91.1938 li
376.422 90.7561 li
378.027 91.1571 li
376.374 91.1938 li
382.42 91.0597 mo
376.892 86.425 li
377.01 85.3389 li
383.07 84.1573 li
381.469 83.2684 li
387.264 82.9931 li
386.565 90.9678 li
382.42 91.0597 li
.631373 .776471 .8 rgb
f
373.255 102.773 mo
372.308 102.758 li
370.022 93.603 li
374.074 95.4896 li
373.255 102.773 li
371.285 102.742 mo
364.224 102.627 li
365.537 95.8872 li
371.285 102.742 li
f
385.516 102.972 mo
375.112 102.804 li
375.819 96.3018 li
376.678 96.7016 li
375.946 95.1306 li
376.163 93.1333 li
386.391 92.9717 li
385.516 102.972 li
f
384.565 113.822 mo
373.974 113.281 li
374.891 104.838 li
385.331 105.078 li
384.565 113.822 li
f
374.136 91.2436 mo
373.578 90.0459 li
374.655 90.3149 li
374.552 91.2343 li
374.136 91.2436 li
f
372.084 113.185 mo
363.611 112.752 li
363.489 112.746 363.377 112.711 363.278 112.654 cv
363.179 112.597 363.094 112.518 363.025 112.421 cv
362.958 112.326 362.907 112.213 362.879 112.09 cv
362.861 112.011 362.851 111.927 362.851 111.841 cv
362.851 111.792 362.855 111.743 362.861 111.693 cv
363.794 104.583 li
373.027 104.795 li
372.084 113.185 li
f
388.535 114.025 mo
386.617 113.927 li
387.352 105.124 li
388.535 105.151 li
388.535 114.025 li
f
388.535 103.021 mo
387.528 103.005 li
388.367 92.9409 li
388.535 92.9383 li
388.535 103.021 li
f
360.568 64.5126 mo
364.762 54.123 li
365.537 65.2998 li
370.91 60.2954 li
370.022 67.5835 li
379.52 61.642 li
373.578 71.1416 li
380.867 70.2514 li
375.863 75.624 li
387.041 76.4009 li
376.648 80.5933 li
383.07 84.1573 li
375.863 85.5625 li
384.449 92.7612 li
373.578 90.0459 li
376.678 96.7016 li
370.022 93.603 li
372.736 104.473 li
365.537 95.8872 li
364.133 103.094 li
360.568 96.6738 li
356.377 107.065 li
355.6 95.8872 li
350.227 100.891 li
351.117 93.603 li
341.617 99.5444 li
347.559 90.0459 li
340.271 90.936 li
345.277 85.5625 li
334.098 84.7857 li
344.488 80.5933 li
338.068 77.0297 li
345.277 75.624 li
336.689 68.4263 li
347.559 71.1416 li
344.461 64.4848 li
351.117 67.5835 li
348.402 56.7138 li
355.6 65.2998 li
357.004 58.0937 li
360.568 64.5126 li
.980392 .65098 .211765 rgb
f
375.195 80.5933 mo
375.195 88.6718 368.646 95.2202 360.568 95.2202 cv
352.49 95.2202 345.943 88.6718 345.943 80.5933 cv
345.943 72.5161 352.49 65.9673 360.568 65.9673 cv
368.646 65.9673 375.195 72.5161 375.195 80.5933 cv
.980392 .85098 .211765 rgb
f
356.377 107.065 mo
355.6 95.8872 li
350.227 100.891 li
355.6 95.8872 li
356.377 107.065 li
360.568 96.6738 li
360.569 96.6754 li
360.569 96.6758 li
360.568 96.6738 li
356.377 107.065 li
360.568 64.5126 mo
360.569 64.5103 li
360.568 64.5126 li
.898039 .898039 .898039 rgb
f
356.377 107.065 mo
355.6 95.8872 li
350.227 100.891 li
351.117 93.603 li
341.617 99.5444 li
347.559 90.0459 li
340.271 90.936 li
345.277 85.5625 li
334.098 84.7857 li
344.488 80.5933 li
338.068 77.0297 li
345.277 75.624 li
336.689 68.4263 li
347.559 71.1416 li
344.461 64.4848 li
351.117 67.5835 li
348.402 56.7138 li
355.6 65.2998 li
357.004 58.0937 li
360.568 64.5126 li
360.569 64.5104 li
360.569 65.9673 li
360.569 65.9673 360.569 65.9673 360.568 65.9673 cv
352.49 65.9673 345.943 72.5161 345.943 80.5933 cv
345.943 88.6718 352.49 95.2202 360.568 95.2202 cv
360.569 95.2202 360.569 95.2202 360.569 95.2202 cv
360.569 96.6758 li
360.568 96.6738 li
356.377 107.065 li
.882353 .584314 .188235 rgb
f
360.568 95.2202 mo
352.49 95.2202 345.943 88.6718 345.943 80.5933 cv
345.943 72.5161 352.49 65.9673 360.568 65.9673 cv
360.569 65.9673 360.569 65.9673 360.569 65.9673 cv
360.569 95.2202 li
360.569 95.2202 360.569 95.2202 360.568 95.2202 cv
.882353 .764706 .188235 rgb
f
45.9698 176.574 mo
45.9698 160.413 59.0713 147.312 75.2325 147.312 cv
91.3935 147.312 104.495 160.413 104.495 176.574 cv
104.495 192.735 91.3935 205.837 75.2325 205.837 cv
59.0713 205.837 45.9698 192.735 45.9698 176.574 cv
.980392 .85098 .211765 rgb
f
83.4023 176.574 mo
100.085 176.574 li
100.085 167.374 95.085 159.341 87.6563 155.049 cv
79.3125 169.504 li
81.7549 170.916 83.4023 173.55 83.4023 176.574 cv
cp
.54902 .54902 .54902 rgb
f
75.2325 184.744 mo
73.7432 184.744 72.3516 184.34 71.1494 183.644 cv
62.7979 198.104 li
66.4581 200.217 70.7061 201.432 75.2325 201.432 cv
79.7587 201.432 84.0069 200.217 87.6621 198.104 cv
79.3134 183.644 li
78.1123 184.34 76.7207 184.744 75.2325 184.744 cv
f
71.1504 169.504 mo
62.8027 155.049 li
55.374 159.341 50.3741 167.374 50.3741 176.574 cv
67.0625 176.574 li
67.0625 173.551 68.709 170.917 71.1504 169.504 cv
f
75.2325 182.021 mo
78.2402 182.021 80.6797 179.582 80.6797 176.574 cv
80.6797 173.565 78.2402 171.127 75.2325 171.127 cv
72.2246 171.127 69.7862 173.565 69.7862 176.574 cv
69.7862 179.582 72.2246 182.021 75.2325 182.021 cv
f
75.2325 205.837 mo
59.0713 205.837 45.9698 192.735 45.9698 176.574 cv
45.9698 160.413 59.0713 147.312 75.2325 147.312 cv
75.2325 171.127 li
75.2325 171.127 li
72.2246 171.127 69.7862 173.565 69.7862 176.574 cv
69.7862 179.582 72.2246 182.021 75.2325 182.021 cv
75.2325 182.021 li
75.2325 184.744 li
75.2325 184.744 li
73.7432 184.744 72.3516 184.34 71.1494 183.644 cv
62.7979 198.104 li
66.4581 200.217 70.7061 201.432 75.2325 201.432 cv
75.2325 201.432 li
75.2325 205.837 li
75.2325 205.837 li
62.8027 155.049 mo
55.374 159.341 50.3741 167.374 50.3741 176.574 cv
67.0625 176.574 li
67.0625 173.551 68.709 170.917 71.1504 169.504 cv
62.8027 155.049 li
.882353 .764706 .188235 rgb
f
75.2325 201.432 mo
70.7061 201.432 66.4581 200.217 62.7979 198.104 cv
71.1494 183.644 li
72.3516 184.34 73.7432 184.744 75.2325 184.744 cv
75.2325 184.744 li
75.2325 201.432 li
75.2325 201.432 li
.494118 .494118 .494118 rgb
f
67.0625 176.574 mo
50.3741 176.574 li
50.3741 167.374 55.374 159.341 62.8027 155.049 cv
71.1504 169.504 li
68.709 170.917 67.0625 173.551 67.0625 176.574 cv
f
75.2325 182.021 mo
72.2246 182.021 69.7862 179.582 69.7862 176.574 cv
69.7862 173.565 72.2246 171.127 75.2325 171.127 cv
75.2325 171.127 li
75.2325 182.021 li
75.2325 182.021 li
f
197.32 171.779 mo
197.32 167.563 li
197.32 166.606 196.544 165.831 195.588 165.831 cv
155.238 165.831 li
154.281 165.831 153.506 166.606 153.506 167.563 cv
153.506 171.779 li
197.32 171.779 li
.45098 .45098 .45098 rgb
f
165.359 165.831 mo
165.359 159.921 li
165.822 160 166.285 160.069 166.748 160.138 cv
167.711 160.26 168.673 160.377 169.636 160.447 cv
170.599 160.543 171.562 160.576 172.525 160.628 cv
173.487 160.677 174.45 160.689 175.413 160.696 cv
176.376 160.701 177.339 160.684 178.301 160.653 cv
179.264 160.592 180.227 160.571 181.19 160.476 cv
182.153 160.401 183.115 160.289 184.078 160.162 cv
184.541 160.089 185.004 160.018 185.467 159.937 cv
185.467 165.831 li
188.467 165.831 li
188.467 158.122 li
188.467 157.481 188.035 156.896 187.386 156.729 cv
186.967 156.622 li
186.004 156.376 185.041 156.234 184.078 156.083 cv
183.115 155.956 182.153 155.843 181.19 155.77 cv
180.227 155.674 179.264 155.652 178.301 155.592 cv
177.339 155.561 176.376 155.543 175.413 155.549 cv
174.45 155.556 173.487 155.567 172.525 155.617 cv
171.562 155.669 170.599 155.702 169.636 155.798 cv
168.673 155.868 167.711 155.985 166.748 156.107 cv
165.785 156.25 164.822 156.393 163.859 156.622 cv
163.469 156.716 li
162.833 156.867 162.359 157.439 162.359 158.122 cv
162.359 165.831 li
165.359 165.831 li
.901961 .443137 .443137 rgb
f
204.973 204.137 mo
204.973 205.075 204.211 205.837 203.272 205.837 cv
147.554 205.837 li
146.614 205.837 145.853 205.075 145.853 204.137 cv
145.853 201.494 li
145.853 200.555 146.614 199.794 147.554 199.794 cv
203.272 199.794 li
204.211 199.794 204.973 200.555 204.973 201.494 cv
204.973 204.137 li
.54902 .54902 .54902 rgb
f
201.384 199.794 mo
201.384 173.833 li
201.384 172.699 200.464 171.779 199.33 171.779 cv
151.496 171.779 li
150.362 171.779 149.442 172.699 149.442 173.833 cv
149.442 199.794 li
201.384 199.794 li
.490196 .490196 .490196 rgb
f
191.547 167.218 mo
190.162 167.218 li
189.224 167.218 188.463 167.979 188.463 168.917 cv
188.463 171.779 li
193.247 171.779 li
193.247 168.917 li
193.247 167.979 192.486 167.218 191.547 167.218 cv
cp
.811765 .811765 .811765 rgb
f
160.664 167.218 mo
159.279 167.218 li
158.34 167.218 157.579 167.979 157.579 168.917 cv
157.579 171.779 li
162.363 171.779 li
162.363 168.917 li
162.363 167.979 161.603 167.218 160.664 167.218 cv
f
193.009 176.775 mo
191.768 176.775 li
191.768 175.535 li
191.768 175.03 191.359 174.621 190.854 174.621 cv
190.351 174.621 189.941 175.03 189.941 175.535 cv
189.941 176.775 li
188.701 176.775 li
188.196 176.775 187.788 177.184 187.788 177.688 cv
187.788 178.192 188.196 178.602 188.701 178.602 cv
189.941 178.602 li
189.941 179.842 li
189.941 180.347 190.351 180.755 190.854 180.755 cv
191.359 180.755 191.768 180.347 191.768 179.842 cv
191.768 178.602 li
193.009 178.602 li
193.513 178.602 193.922 178.192 193.922 177.688 cv
193.922 177.184 193.513 176.775 193.009 176.775 cv
cp
f
163.038 177.688 mo
163.038 178.192 162.63 178.602 162.125 178.602 cv
157.817 178.602 li
157.313 178.602 156.904 178.192 156.904 177.688 cv
156.904 177.184 157.313 176.775 157.817 176.775 cv
162.125 176.775 li
162.63 176.775 163.038 177.184 163.038 177.688 cv
f
175.414 171.779 mo
162.363 171.779 li
162.363 168.917 li
162.363 167.979 161.603 167.218 160.664 167.218 cv
159.279 167.218 li
158.34 167.218 157.579 167.979 157.579 168.917 cv
157.579 171.779 li
153.506 171.779 li
153.506 167.563 li
153.506 166.606 154.281 165.831 155.238 165.831 cv
162.359 165.831 li
165.359 165.831 li
175.414 165.831 li
175.414 171.779 li
.403922 .403922 .403922 rgb
f
165.359 165.831 mo
162.359 165.831 li
162.359 158.122 li
162.359 157.439 162.833 156.867 163.469 156.716 cv
163.859 156.622 li
164.822 156.393 165.785 156.25 166.748 156.107 cv
167.711 155.985 168.673 155.868 169.636 155.798 cv
170.599 155.702 171.562 155.669 172.525 155.617 cv
173.487 155.567 174.45 155.556 175.413 155.549 cv
175.414 155.549 li
175.414 160.696 li
175.413 160.696 li
175.413 160.696 li
174.45 160.689 173.487 160.677 172.525 160.628 cv
171.562 160.576 170.599 160.543 169.636 160.447 cv
168.673 160.377 167.711 160.26 166.748 160.138 cv
166.285 160.069 165.822 160 165.359 159.921 cv
165.359 165.831 li
.811765 .396078 .396078 rgb
f
175.414 205.837 mo
147.554 205.837 li
146.614 205.837 145.853 205.075 145.853 204.137 cv
145.853 201.494 li
145.853 200.555 146.614 199.794 147.554 199.794 cv
149.442 199.794 li
175.414 199.794 li
175.414 205.837 li
.494118 .494118 .494118 rgb
f
175.414 199.794 mo
149.442 199.794 li
149.442 173.833 li
149.442 172.699 150.362 171.779 151.496 171.779 cv
153.506 171.779 li
157.579 171.779 li
162.363 171.779 li
175.414 171.779 li
175.414 199.794 li
157.817 176.775 mo
157.313 176.775 156.904 177.184 156.904 177.688 cv
156.904 178.192 157.313 178.602 157.817 178.602 cv
162.125 178.602 li
162.63 178.602 163.038 178.192 163.038 177.688 cv
163.038 177.184 162.63 176.775 162.125 176.775 cv
157.817 176.775 li
.439216 .439216 .439216 rgb
f
162.363 171.779 mo
157.579 171.779 li
157.579 168.917 li
157.579 167.979 158.34 167.218 159.279 167.218 cv
160.664 167.218 li
161.603 167.218 162.363 167.979 162.363 168.917 cv
162.363 171.779 li
.729412 .729412 .729412 rgb
f
162.125 178.602 mo
157.817 178.602 li
157.313 178.602 156.904 178.192 156.904 177.688 cv
156.904 177.184 157.313 176.775 157.817 176.775 cv
162.125 176.775 li
162.63 176.775 163.038 177.184 163.038 177.688 cv
163.038 178.192 162.63 178.602 162.125 178.602 cv
f
275.471 144.163 mo
264.816 144.163 256.18 152.801 256.182 163.454 cv
256.182 166.925 257.098 170.18 258.703 172.992 cv
261.029 177.069 264.853 181.79 265.443 184.946 cv
266.508 190.662 li
284.436 190.661 li
284.436 190.661 284.914 188.102 285.502 184.945 cv
286.09 181.789 289.914 177.068 292.24 172.991 cv
293.844 170.179 294.762 166.924 294.762 163.453 cv
294.762 152.8 286.125 144.162 275.471 144.163 cv
.980392 .85098 .211765 rgb
f
279.394 204.137 mo
279.394 205.075 278.635 205.837 277.695 205.837 cv
273.248 205.837 li
272.309 205.837 271.547 205.075 271.547 204.137 cv
271.547 203.246 li
271.547 202.307 272.309 201.546 273.248 201.546 cv
277.695 201.546 li
278.635 201.546 279.394 202.307 279.394 203.246 cv
279.394 204.137 li
.45098 .45098 .45098 rgb
f
266.508 201.893 mo
266.508 202.769 267.246 203.479 268.156 203.479 cv
282.787 203.479 li
283.697 203.479 284.436 202.769 284.436 201.893 cv
284.436 190.661 li
266.508 190.661 li
266.508 201.893 li
.54902 .54902 .54902 rgb
f
284.436 194.028 mo
266.508 194.028 li
266.508 192.228 li
284.436 192.228 li
284.436 194.028 li
.811765 .811765 .811765 rgb
f
284.436 197.971 mo
266.508 197.971 li
266.508 196.169 li
284.436 196.169 li
284.436 197.971 li
f
284.436 201.913 mo
266.508 201.913 li
266.508 200.111 li
284.436 200.111 li
284.436 201.913 li
f
278.844 190.283 mo
278.828 190.282 li
278.551 190.273 278.334 190.043 278.344 189.767 cv
278.375 188.788 279.162 165.742 283.518 161.066 cv
283.707 160.865 284.021 160.854 284.225 161.042 cv
284.426 161.229 284.438 161.546 284.25 161.748 cv
280.146 166.151 279.35 189.563 279.344 189.799 cv
279.334 190.069 279.111 190.283 278.844 190.283 cv
cp
.54902 .54902 .54902 rgb
f
272.1 190.283 mo
271.83 190.283 271.607 190.069 271.6 189.799 cv
271.592 189.563 270.795 166.151 266.693 161.748 cv
266.506 161.546 266.516 161.229 266.719 161.042 cv
266.92 160.853 267.236 160.864 267.426 161.066 cv
271.781 165.742 272.568 188.788 272.6 189.767 cv
272.607 190.043 272.391 190.273 272.115 190.282 cv
272.1 190.283 li
f
283.883 162.749 mo
282.949 162.749 282.477 162.183 282.098 161.727 cv
281.748 161.305 281.527 161.066 281.084 161.066 cv
280.639 161.066 280.418 161.305 280.066 161.728 cv
279.688 162.183 279.217 162.749 278.281 162.749 cv
277.348 162.749 276.875 162.183 276.496 161.728 cv
276.145 161.305 275.924 161.066 275.479 161.066 cv
275.033 161.066 274.812 161.306 274.461 161.728 cv
274.082 162.183 273.609 162.749 272.676 162.749 cv
271.738 162.749 271.268 162.183 270.887 161.728 cv
270.535 161.306 270.313 161.066 269.867 161.066 cv
269.42 161.066 269.199 161.305 268.848 161.728 cv
268.469 162.183 267.996 162.749 267.059 162.749 cv
266.783 162.749 266.559 162.525 266.559 162.249 cv
266.559 161.973 266.783 161.749 267.059 161.749 cv
267.506 161.749 267.727 161.51 268.08 161.087 cv
268.459 160.632 268.932 160.066 269.867 160.066 cv
270.803 160.066 271.275 160.632 271.654 161.087 cv
272.008 161.51 272.229 161.749 272.676 161.749 cv
273.119 161.749 273.34 161.51 273.693 161.088 cv
274.072 160.633 274.543 160.066 275.479 160.066 cv
276.414 160.066 276.885 160.633 277.264 161.088 cv
277.617 161.51 277.838 161.749 278.281 161.749 cv
278.727 161.749 278.947 161.51 279.297 161.088 cv
279.676 160.633 280.148 160.066 281.084 160.066 cv
282.018 160.066 282.488 160.633 282.867 161.088 cv
283.219 161.51 283.439 161.749 283.883 161.749 cv
284.16 161.749 284.383 161.973 284.383 162.249 cv
284.383 162.525 284.16 162.749 283.883 162.749 cv
f
271.547 203.479 mo
268.156 203.479 li
268.153 203.479 268.149 203.479 268.146 203.479 cv
268.149 203.479 268.153 203.479 268.156 203.479 cv
271.547 203.479 li
268.144 203.479 mo
267.875 203.477 267.621 203.413 267.397 203.301 cv
267.621 203.413 267.875 203.477 268.144 203.479 cv
267.397 203.3 mo
267.394 203.299 267.392 203.298 267.39 203.297 cv
267.392 203.298 267.394 203.299 267.397 203.3 cv
267.387 203.295 mo
267.385 203.295 267.384 203.294 267.383 203.293 cv
267.384 203.294 267.385 203.295 267.387 203.295 cv
267.377 203.29 mo
267.376 203.29 267.376 203.29 267.375 203.29 cv
267.376 203.29 267.376 203.29 267.377 203.29 cv
.898039 .898039 .898039 rgb
f
266.508 190.662 mo
265.443 184.946 li
264.853 181.79 261.029 177.069 258.703 172.992 cv
257.098 170.18 256.182 166.925 256.182 163.454 cv
256.18 152.801 264.816 144.163 275.471 144.163 cv
275.471 160.066 li
274.54 160.07 274.071 160.634 273.693 161.088 cv
273.34 161.51 273.119 161.749 272.676 161.749 cv
272.229 161.749 272.008 161.51 271.654 161.087 cv
271.275 160.632 270.803 160.066 269.867 160.066 cv
268.932 160.066 268.459 160.632 268.08 161.087 cv
267.959 161.232 267.853 161.355 267.749 161.455 cv
267.643 161.314 267.536 161.185 267.426 161.066 cv
267.327 160.961 267.193 160.907 267.059 160.907 cv
266.937 160.907 266.815 160.952 266.719 161.042 cv
266.516 161.229 266.506 161.546 266.693 161.748 cv
266.72 161.777 266.747 161.807 266.774 161.838 cv
266.644 161.928 266.559 162.078 266.559 162.249 cv
266.559 162.525 266.783 162.749 267.059 162.749 cv
267.176 162.749 267.286 162.74 267.389 162.724 cv
270.887 168.848 271.592 189.577 271.6 189.799 cv
271.607 190.069 271.83 190.283 272.1 190.283 cv
272.115 190.282 li
272.391 190.273 272.607 190.043 272.6 189.767 cv
272.571 188.857 271.888 168.872 268.292 162.31 cv
268.512 162.13 268.688 161.919 268.848 161.728 cv
269.199 161.305 269.42 161.066 269.867 161.066 cv
270.313 161.066 270.535 161.306 270.887 161.728 cv
271.268 162.183 271.738 162.749 272.676 162.749 cv
273.609 162.749 274.082 162.183 274.461 161.728 cv
274.81 161.308 275.031 161.069 275.471 161.066 cv
275.471 190.661 li
266.508 190.661 li
266.508 190.662 li
.882353 .764706 .188235 rgb
f
275.471 205.837 mo
273.248 205.837 li
272.309 205.837 271.547 205.075 271.547 204.137 cv
271.547 203.479 li
275.471 203.479 li
275.471 205.837 li
.403922 .403922 .403922 rgb
f
275.471 203.479 mo
271.547 203.479 li
268.156 203.479 li
268.153 203.479 268.149 203.479 268.146 203.479 cv
268.145 203.479 268.144 203.479 268.144 203.479 cv
267.875 203.477 267.621 203.413 267.397 203.301 cv
267.397 203.301 267.397 203.301 267.397 203.3 cv
267.394 203.299 267.392 203.298 267.39 203.297 cv
267.389 203.297 267.388 203.296 267.387 203.295 cv
267.385 203.295 267.384 203.294 267.383 203.293 cv
267.381 203.292 267.379 203.291 267.377 203.29 cv
267.376 203.29 267.376 203.29 267.375 203.29 cv
266.865 203.025 266.518 202.508 266.51 201.913 cv
266.508 201.913 li
266.508 201.913 li
275.471 201.913 li
275.471 203.479 li
275.471 200.111 mo
266.508 200.111 li
266.508 197.971 li
275.471 197.971 li
275.471 200.111 li
275.471 196.169 mo
266.508 196.169 li
266.508 194.028 li
275.471 194.028 li
275.471 196.169 li
275.471 192.228 mo
266.508 192.228 li
266.508 190.662 li
266.508 190.661 li
275.471 190.661 li
275.471 192.228 li
.494118 .494118 .494118 rgb
f
275.471 194.028 mo
266.508 194.028 li
266.508 192.228 li
275.471 192.228 li
275.471 194.028 li
.729412 .729412 .729412 rgb
f
275.471 197.971 mo
266.508 197.971 li
266.508 196.169 li
275.471 196.169 li
275.471 197.971 li
f
275.471 201.913 mo
266.508 201.913 li
266.508 201.893 li
266.508 200.111 li
275.471 200.111 li
275.471 201.913 li
f
272.1 190.283 mo
271.83 190.283 271.607 190.069 271.6 189.799 cv
271.592 189.577 270.887 168.848 267.389 162.724 cv
267.765 162.664 268.054 162.505 268.292 162.31 cv
271.888 168.872 272.571 188.857 272.6 189.767 cv
272.607 190.043 272.391 190.273 272.115 190.282 cv
272.1 190.283 li
266.774 161.838 mo
266.747 161.807 266.72 161.777 266.693 161.748 cv
266.506 161.546 266.516 161.229 266.719 161.042 cv
266.815 160.952 266.937 160.907 267.059 160.907 cv
267.193 160.907 267.327 160.961 267.426 161.066 cv
267.536 161.185 267.643 161.314 267.749 161.455 cv
267.549 161.646 267.353 161.749 267.059 161.749 cv
266.953 161.749 266.855 161.782 266.774 161.838 cv
.494118 .494118 .494118 rgb
f
272.676 162.749 mo
271.738 162.749 271.268 162.183 270.887 161.728 cv
270.535 161.306 270.313 161.066 269.867 161.066 cv
269.42 161.066 269.199 161.305 268.848 161.728 cv
268.688 161.919 268.512 162.13 268.292 162.31 cv
268.054 162.505 267.765 162.664 267.389 162.724 cv
267.286 162.74 267.176 162.749 267.059 162.749 cv
266.783 162.749 266.559 162.525 266.559 162.249 cv
266.559 162.078 266.644 161.928 266.774 161.838 cv
266.855 161.782 266.953 161.749 267.059 161.749 cv
267.353 161.749 267.549 161.646 267.749 161.455 cv
267.853 161.355 267.959 161.232 268.08 161.087 cv
268.459 160.632 268.932 160.066 269.867 160.066 cv
270.803 160.066 271.275 160.632 271.654 161.087 cv
272.008 161.51 272.229 161.749 272.676 161.749 cv
273.119 161.749 273.34 161.51 273.693 161.088 cv
274.071 160.634 274.54 160.07 275.471 160.066 cv
275.471 161.066 li
275.031 161.069 274.81 161.308 274.461 161.728 cv
274.082 162.183 273.609 162.749 272.676 162.749 cv
f
362.107 170.992 mo
358.172 170.992 li
358.172 170.099 li
358.172 169.368 357.578 168.774 356.848 168.774 cv
351.445 168.774 li
350.715 168.774 350.123 169.368 350.123 170.099 cv
350.123 170.992 li
346.187 170.992 li
345.455 170.992 344.863 171.584 344.863 172.315 cv
344.863 204.513 li
344.863 205.244 345.455 205.837 346.187 205.837 cv
362.107 205.837 li
362.84 205.837 363.432 205.244 363.432 204.513 cv
363.432 172.315 li
363.432 171.584 362.84 170.992 362.107 170.992 cv
.54902 .54902 .54902 rgb
f
346.187 204.286 mo
346.187 200.099 li
362.107 200.099 li
362.107 204.286 li
346.187 204.286 li
.901961 .443137 .443137 rgb
f
354.147 205.837 mo
346.187 205.837 li
345.455 205.837 344.863 205.244 344.863 204.513 cv
344.863 172.315 li
344.863 171.584 345.455 170.992 346.187 170.992 cv
350.123 170.992 li
350.123 170.099 li
350.123 169.368 350.715 168.774 351.445 168.774 cv
354.147 168.774 li
354.147 200.099 li
346.187 200.099 li
346.187 204.286 li
354.147 204.286 li
354.147 205.837 li
.494118 .494118 .494118 rgb
f
354.147 204.286 mo
346.187 204.286 li
346.187 200.099 li
354.147 200.099 li
354.147 204.286 li
.811765 .396078 .396078 rgb
f
382.408 170.992 mo
378.471 170.992 li
378.471 170.099 li
378.471 169.368 377.879 168.774 377.148 168.774 cv
371.746 168.774 li
371.016 168.774 370.422 169.368 370.422 170.099 cv
370.422 170.992 li
366.486 170.992 li
365.754 170.992 365.162 171.584 365.162 172.315 cv
365.162 204.513 li
365.162 205.244 365.754 205.837 366.486 205.837 cv
382.408 205.837 li
383.139 205.837 383.732 205.244 383.732 204.513 cv
383.732 172.315 li
383.732 171.584 383.139 170.992 382.408 170.992 cv
.54902 .54902 .54902 rgb
f
366.486 193.264 mo
366.486 189.076 li
382.408 189.076 li
382.408 193.264 li
366.486 193.264 li
.901961 .788235 .443137 rgb
f
366.486 198.774 mo
366.486 194.588 li
382.408 194.588 li
382.408 198.774 li
366.486 198.774 li
f
366.486 204.286 mo
366.486 200.099 li
382.408 200.099 li
382.408 204.286 li
366.486 204.286 li
f
374.447 205.837 mo
366.486 205.837 li
365.754 205.837 365.162 205.244 365.162 204.513 cv
365.162 172.315 li
365.162 171.584 365.754 170.992 366.486 170.992 cv
370.422 170.992 li
370.422 170.099 li
370.422 169.368 371.016 168.774 371.746 168.774 cv
374.447 168.774 li
374.447 189.076 li
366.486 189.076 li
366.486 193.264 li
374.447 193.264 li
374.447 194.588 li
366.486 194.588 li
366.486 198.774 li
374.447 198.774 li
374.447 200.099 li
366.486 200.099 li
366.486 204.286 li
374.447 204.286 li
374.447 205.837 li
.494118 .494118 .494118 rgb
f
374.447 193.264 mo
366.486 193.264 li
366.486 189.076 li
374.447 189.076 li
374.447 193.264 li
.811765 .709804 .396078 rgb
f
374.447 198.774 mo
366.486 198.774 li
366.486 194.588 li
374.447 194.588 li
374.447 198.774 li
f
374.447 204.286 mo
366.486 204.286 li
366.486 200.099 li
374.447 200.099 li
374.447 204.286 li
f
402.707 170.992 mo
398.771 170.992 li
398.771 170.099 li
398.771 169.368 398.178 168.774 397.447 168.774 cv
392.045 168.774 li
391.314 168.774 390.723 169.368 390.723 170.099 cv
390.723 170.992 li
386.785 170.992 li
386.055 170.992 385.461 171.584 385.461 172.315 cv
385.461 204.513 li
385.461 205.244 386.055 205.837 386.785 205.837 cv
402.707 205.837 li
403.439 205.837 404.031 205.244 404.031 204.513 cv
404.031 172.315 li
404.031 171.584 403.439 170.992 402.707 170.992 cv
.54902 .54902 .54902 rgb
f
386.785 176.729 mo
386.785 172.542 li
402.707 172.542 li
402.707 176.729 li
386.785 176.729 li
.682353 .823529 .290196 rgb
f
386.785 182.241 mo
386.785 178.054 li
402.707 178.054 li
402.707 182.241 li
386.785 182.241 li
f
386.785 187.753 mo
386.785 183.565 li
402.707 183.565 li
402.707 187.753 li
386.785 187.753 li
f
386.785 193.264 mo
386.785 189.076 li
402.707 189.076 li
402.707 193.264 li
386.785 193.264 li
f
386.785 198.774 mo
386.785 194.588 li
402.707 194.588 li
402.707 198.774 li
386.785 198.774 li
f
386.785 204.286 mo
386.785 200.099 li
402.707 200.099 li
402.707 204.286 li
386.785 204.286 li
f
394.746 205.837 mo
386.785 205.837 li
386.055 205.837 385.461 205.244 385.461 204.513 cv
385.461 172.315 li
385.461 171.584 386.055 170.992 386.785 170.992 cv
390.723 170.992 li
390.723 170.099 li
390.723 169.368 391.314 168.774 392.045 168.774 cv
394.746 168.774 li
394.746 172.542 li
386.785 172.542 li
386.785 176.729 li
394.746 176.729 li
394.746 178.054 li
386.785 178.054 li
386.785 182.241 li
394.746 182.241 li
394.746 183.565 li
386.785 183.565 li
386.785 187.753 li
394.746 187.753 li
394.746 189.076 li
386.785 189.076 li
386.785 193.264 li
394.746 193.264 li
394.746 194.588 li
386.785 194.588 li
386.785 198.774 li
394.746 198.774 li
394.746 200.099 li
386.785 200.099 li
386.785 204.286 li
394.746 204.286 li
394.746 205.837 li
.494118 .494118 .494118 rgb
f
394.746 176.729 mo
386.785 176.729 li
386.785 172.542 li
394.746 172.542 li
394.746 176.729 li
.611765 .741176 .258824 rgb
f
394.746 182.241 mo
386.785 182.241 li
386.785 178.054 li
394.746 178.054 li
394.746 182.241 li
f
394.746 187.753 mo
386.785 187.753 li
386.785 183.565 li
394.746 183.565 li
394.746 187.753 li
f
394.746 193.264 mo
386.785 193.264 li
386.785 189.076 li
394.746 189.076 li
394.746 193.264 li
f
394.746 198.774 mo
386.785 198.774 li
386.785 194.588 li
394.746 194.588 li
394.746 198.774 li
f
394.746 204.286 mo
386.785 204.286 li
386.785 200.099 li
394.746 200.099 li
394.746 204.286 li
f
94.6973 254.459 mo
69.2988 254.459 li
57.9033 281.242 li
65.3974 281.242 li
55.7675 308.939 li
85.4395 274.121 li
79.0126 274.121 li
94.6973 254.459 li
.980392 .65098 .211765 rgb
f
55.7675 308.939 mo
55.7675 308.939 li
75.2325 286.098 li
75.2325 286.099 li
55.7675 308.939 li
.898039 .898039 .898039 rgb
f
55.7675 308.939 mo
65.3974 281.242 li
57.9033 281.242 li
69.2988 254.459 li
75.2325 254.459 li
75.2325 286.099 li
55.7675 308.939 li
.882353 .584314 .188235 rgb
f
182.412 304.12 mo
158.918 304.12 li
158.918 275.437 li
182.412 275.437 li
182.412 304.12 li
.788235 .388235 .388235 rgb
f
185.669 308.939 mo
155.661 308.939 li
155.661 304.12 li
185.669 304.12 li
185.669 308.939 li
.901961 .443137 .443137 rgb
f
185.669 274.303 mo
185.669 274.926 185.159 275.437 184.535 275.437 cv
156.795 275.437 li
156.171 275.437 155.661 274.926 155.661 274.303 cv
155.661 255.594 li
155.661 254.971 156.171 254.46 156.795 254.46 cv
184.535 254.46 li
185.159 254.46 185.669 254.971 185.669 255.594 cv
185.669 274.303 li
f
158.495 272.602 mo
158.495 257.295 li
182.835 257.295 li
182.835 272.602 li
158.495 272.602 li
.901961 .94902 .94902 rgb
f
193.512 266.698 mo
191.871 266.698 li
191.741 266.594 li
192.298 261.745 li
192.305 261.631 li
192.438 261.496 li
193.512 261.496 li
193.512 266.698 li
cp
196.665 298.167 mo
196.665 297.164 li
196.665 293.152 li
196.665 261.063 li
196.665 260.99 li
196.665 260.729 196.585 260.465 196.418 260.238 cv
191.638 253.74 li
189.836 254.926 li
192.512 259.496 li
192.438 259.496 li
191.284 259.496 190.341 260.418 190.306 261.564 cv
189.744 266.45 li
189.737 266.564 li
189.737 267.741 190.694 268.698 191.871 268.698 cv
193.665 268.698 li
193.665 293.152 li
193.665 297.164 li
193.665 298.167 li
193.663 298.323 193.669 298.526 193.661 298.644 cv
193.638 298.879 li
193.572 299.184 193.398 299.466 193.149 299.659 cv
192.953 299.787 li
192.853 299.849 li
192.802 299.858 li
192.773 299.869 192.79 299.915 192.564 299.924 cv
192.315 299.949 li
192.258 299.955 li
192.216 299.955 li
191.213 299.955 li
190.963 299.955 li
190.837 299.955 li
190.778 299.944 li
190.543 299.918 li
190.236 299.862 189.961 299.662 189.774 299.412 cv
189.688 299.299 189.593 299.102 189.592 299.079 cv
189.551 299.027 li
189.526 298.777 li
189.503 298.548 li
189.503 298.429 li
189.503 290.406 li
189.503 289.904 li
189.502 289.738 189.51 289.594 189.481 289.306 cv
189.458 288.797 189.318 288.299 189.125 287.827 cv
188.719 286.886 187.958 286.109 187.023 285.674 cv
186.808 285.552 186.467 285.465 186.186 285.387 cv
185.83 285.291 185.766 285.318 185.573 285.289 cv
185.448 285.276 li
185.386 285.271 li
185.17 285.26 li
184.919 285.26 li
184.449 285.26 li
184.449 284.873 li
184.449 284.246 183.941 283.738 183.315 283.738 cv
182.412 283.738 li
182.412 289.779 li
183.315 289.779 li
183.941 289.779 184.449 289.271 184.449 288.645 cv
184.449 288.26 li
184.919 288.26 li
185.131 288.26 li
185.142 288.261 li
185.267 288.273 li
185.402 288.293 185.682 288.301 185.638 288.337 cv
185.743 288.387 li
186.019 288.512 186.264 288.75 186.382 289.043 cv
186.432 289.191 186.487 289.34 186.487 289.503 cv
186.505 289.546 186.504 289.736 186.503 289.904 cv
186.503 290.406 li
186.503 298.429 li
186.503 298.554 li
186.503 298.617 li
186.517 298.83 li
186.542 299.08 li
186.567 299.329 li
186.59 299.453 186.631 299.615 186.669 299.757 cv
186.83 300.383 187.07 300.782 187.37 301.207 cv
187.978 302.023 188.879 302.634 189.888 302.846 cv
190.136 302.902 190.394 302.916 190.647 302.941 cv
190.837 302.955 li
190.963 302.955 li
191.213 302.955 li
192.216 302.955 li
192.279 302.955 li
192.31 302.955 li
192.493 302.946 li
192.617 302.934 li
192.867 302.908 li
192.98 302.911 193.312 302.838 193.602 302.75 cv
193.746 302.707 193.893 302.66 194.029 302.608 cv
194.369 302.432 li
194.597 302.313 194.817 302.185 195.009 302.014 cv
195.812 301.385 196.381 300.463 196.582 299.454 cv
196.616 299.202 196.642 298.947 196.66 298.693 cv
196.67 298.477 196.663 298.345 196.665 298.167 cv
cp
.54902 .54902 .54902 rgb
f
170.665 304.12 mo
158.918 304.12 li
158.918 275.437 li
170.665 275.437 li
170.665 304.12 li
.709804 .34902 .34902 rgb
f
170.665 308.939 mo
155.661 308.939 li
155.661 304.12 li
158.918 304.12 li
170.665 304.12 li
170.665 308.939 li
.811765 .396078 .396078 rgb
f
170.665 275.437 mo
158.918 275.437 li
156.795 275.437 li
156.171 275.437 155.661 274.926 155.661 274.303 cv
155.661 255.594 li
155.661 254.971 156.171 254.46 156.795 254.46 cv
170.665 254.46 li
170.665 257.295 li
158.495 257.295 li
158.495 272.602 li
170.665 272.602 li
170.665 275.437 li
f
170.665 272.602 mo
158.495 272.602 li
158.495 257.295 li
170.665 257.295 li
170.665 272.602 li
.811765 .85098 .85098 rgb
f
288.164 270.935 mo
283.703 270.935 280.758 270.561 279.982 270.246 cv
280.758 269.928 283.703 269.556 288.164 269.556 cv
292.625 269.556 295.572 269.928 296.348 270.246 cv
295.572 270.561 292.625 270.935 288.164 270.935 cv
302.906 307.143 mo
296.797 282.58 li
296.797 270.246 li
296.797 269.695 292.934 269.25 288.164 269.25 cv
283.396 269.25 279.531 269.695 279.531 270.246 cv
279.531 282.58 li
273.422 307.143 li
273.398 307.236 li
273.398 308.178 280.008 308.939 288.164 308.939 cv
296.318 308.939 302.93 308.178 302.93 307.236 cv
302.906 307.143 li
.65098 .65098 .65098 rgb
f
284.684 264.153 mo
288.768 264.153 292.08 261.656 292.08 258.577 cv
292.08 256.668 290.807 254.985 288.865 253.98 cv
288.873 253.857 li
288.873 250.24 285.465 247.221 280.934 246.527 cv
279.537 243.354 275.574 241.061 270.893 241.061 cv
265.049 241.061 260.309 244.633 260.309 249.039 cv
260.309 253.201 264.541 256.615 269.936 256.98 cv
271.414 259.398 274.545 261.117 278.242 261.314 cv
279.512 263.008 281.918 264.153 284.684 264.153 cv
cp
f
288.164 308.939 mo
280.008 308.939 273.398 308.178 273.398 307.236 cv
273.422 307.143 li
279.531 282.58 li
279.531 270.246 li
279.531 269.695 283.396 269.25 288.164 269.25 cv
288.164 269.556 li
288.164 269.556 li
283.703 269.556 280.758 269.928 279.982 270.246 cv
279.982 270.246 li
279.982 270.246 li
280.758 270.561 283.703 270.935 288.164 270.935 cv
288.164 308.939 li
288.164 308.939 li
.584314 .584314 .584314 rgb
f
262.727 272.116 mo
259.563 272.116 257.473 271.852 256.922 271.628 cv
257.473 271.401 259.563 271.138 262.727 271.138 cv
265.893 271.138 267.982 271.401 268.533 271.628 cv
267.982 271.852 265.891 272.116 262.727 272.116 cv
273.186 297.803 mo
268.852 280.377 li
268.852 271.628 li
268.852 271.236 266.109 270.921 262.727 270.921 cv
259.344 270.921 256.603 271.236 256.603 271.628 cv
256.603 280.377 li
252.268 297.803 li
252.252 297.869 li
252.252 298.537 256.941 299.077 262.727 299.077 cv
268.512 299.077 273.203 298.537 273.203 297.869 cv
273.186 297.803 li
.54902 .54902 .54902 rgb
f
260.258 267.306 mo
263.156 267.306 265.504 265.534 265.504 263.35 cv
265.504 261.995 264.602 260.802 263.225 260.089 cv
263.23 260.001 li
263.23 257.436 260.813 255.293 257.598 254.801 cv
256.607 252.55 253.795 250.923 250.475 250.923 cv
246.328 250.923 242.967 253.457 242.967 256.583 cv
242.967 259.535 245.969 261.958 249.797 262.217 cv
250.844 263.932 253.064 265.151 255.688 265.291 cv
256.588 266.492 258.295 267.306 260.258 267.306 cv
cp
f
262.727 299.077 mo
256.941 299.077 252.252 298.537 252.252 297.869 cv
252.268 297.803 li
256.603 280.377 li
256.603 271.628 li
256.603 271.236 259.344 270.921 262.727 270.921 cv
262.727 271.138 li
262.727 271.138 li
259.563 271.138 257.473 271.401 256.922 271.628 cv
256.922 271.628 li
256.922 271.628 li
257.473 271.852 259.563 272.116 262.727 272.116 cv
262.727 299.077 li
262.727 299.077 li
.494118 .494118 .494118 rgb
f
397.81 307.238 mo
397.81 308.178 397.049 308.939 396.109 308.939 cv
352.783 308.939 li
351.846 308.939 351.084 308.178 351.084 307.238 cv
351.084 263.913 li
351.084 262.975 351.846 262.213 352.783 262.213 cv
396.109 262.213 li
397.049 262.213 397.81 262.975 397.81 263.913 cv
397.81 307.238 li
.980392 .65098 .211765 rgb
f
360.076 300.536 mo
360.791 301.225 362.23 301.727 363.225 301.727 cv
385.67 301.727 li
386.662 301.727 388.102 301.225 388.82 300.536 cv
392.748 296.761 395.195 291.454 395.195 285.576 cv
395.195 279.697 392.748 274.391 388.82 270.615 cv
388.102 269.928 386.662 269.426 385.67 269.426 cv
363.225 269.426 li
362.23 269.426 360.791 269.928 360.076 270.615 cv
356.145 274.391 353.697 279.697 353.697 285.576 cv
353.697 291.454 356.145 296.761 360.076 300.536 cv
.901961 .901961 .901961 rgb
f
366.941 283.648 mo
366.941 284.117 366.563 284.498 366.092 284.498 cv
364.543 284.498 li
364.072 284.498 363.691 284.117 363.691 283.648 cv
363.691 275.771 li
363.691 275.302 364.072 274.922 364.543 274.922 cv
366.092 274.922 li
366.563 274.922 366.941 275.302 366.941 275.771 cv
366.941 283.648 li
.54902 .54902 .54902 rgb
f
385.201 283.648 mo
385.201 284.117 384.822 284.498 384.352 284.498 cv
382.803 284.498 li
382.332 284.498 381.953 284.117 381.953 283.648 cv
381.953 275.771 li
381.953 275.302 382.332 274.922 382.803 274.922 cv
384.352 274.922 li
384.822 274.922 385.201 275.302 385.201 275.771 cv
385.201 283.648 li
cp
f
368.674 296.093 mo
368.605 296.557 368.992 296.939 369.463 296.939 cv
379.43 296.939 li
379.9 296.939 380.287 296.557 380.219 296.093 cv
379.809 293.272 377.381 291.106 374.447 291.106 cv
371.514 291.106 369.084 293.272 368.674 296.093 cv
f
374.447 308.939 mo
352.783 308.939 li
351.846 308.939 351.084 308.178 351.084 307.238 cv
351.084 263.913 li
351.084 262.975 351.846 262.213 352.783 262.213 cv
374.447 262.213 li
374.447 269.426 li
363.225 269.426 li
362.23 269.426 360.791 269.928 360.076 270.615 cv
356.145 274.391 353.697 279.697 353.697 285.576 cv
353.697 291.454 356.145 296.761 360.076 300.536 cv
360.791 301.225 362.23 301.727 363.225 301.727 cv
374.447 301.727 li
374.447 308.939 li
.882353 .584314 .188235 rgb
f
374.447 301.727 mo
363.225 301.727 li
362.23 301.727 360.791 301.225 360.076 300.536 cv
356.145 296.761 353.697 291.454 353.697 285.576 cv
353.697 279.697 356.145 274.391 360.076 270.615 cv
360.791 269.928 362.23 269.426 363.225 269.426 cv
374.447 269.426 li
374.447 291.106 li
374.447 291.106 li
371.514 291.106 369.084 293.272 368.674 296.093 cv
368.605 296.557 368.992 296.939 369.463 296.939 cv
374.447 296.939 li
374.447 301.727 li
364.543 274.922 mo
364.072 274.922 363.691 275.302 363.691 275.771 cv
363.691 283.648 li
363.691 284.117 364.072 284.498 364.543 284.498 cv
366.092 284.498 li
366.563 284.498 366.941 284.117 366.941 283.648 cv
366.941 275.771 li
366.941 275.302 366.563 274.922 366.092 274.922 cv
364.543 274.922 li
.811765 .811765 .811765 rgb
f
366.092 284.498 mo
364.543 284.498 li
364.072 284.498 363.691 284.117 363.691 283.648 cv
363.691 275.771 li
363.691 275.302 364.072 274.922 364.543 274.922 cv
366.092 274.922 li
366.563 274.922 366.941 275.302 366.941 275.771 cv
366.941 283.648 li
366.941 284.117 366.563 284.498 366.092 284.498 cv
.494118 .494118 .494118 rgb
f
374.447 296.939 mo
369.463 296.939 li
368.992 296.939 368.605 296.557 368.674 296.093 cv
369.084 293.272 371.514 291.106 374.447 291.106 cv
374.447 291.106 li
374.447 296.939 li
f
345.49 363.859 mo
345.49 361.841 352.119 360.204 360.301 360.204 cv
368.48 360.204 375.111 361.841 375.111 363.859 cv
375.111 365.879 368.48 367.516 360.301 367.516 cv
352.119 367.516 345.49 365.879 345.49 363.859 cv
375.111 383.123 mo
375.111 382.71 374.821 382.314 374.311 381.944 cv
374.311 365.645 li
375.137 365.13 375.611 364.535 375.611 363.859 cv
375.611 361.132 367.909 359.704 360.301 359.704 cv
352.692 359.704 344.99 361.132 344.99 363.859 cv
344.99 364.535 345.465 365.13 346.291 365.645 cv
346.291 381.944 li
345.78 382.314 345.49 382.71 345.49 383.123 cv
345.49 383.535 345.78 383.931 346.291 384.301 cv
346.291 401.207 li
345.78 401.577 345.49 401.973 345.49 402.385 cv
345.49 404.404 352.119 406.041 360.301 406.041 cv
368.48 406.041 375.111 404.404 375.111 402.385 cv
375.111 401.973 374.821 401.577 374.311 401.207 cv
374.311 384.301 li
374.821 383.931 375.111 383.535 375.111 383.123 cv
.901961 .443137 .443137 rgb
f
375.111 363.859 mo
375.111 365.879 368.48 367.516 360.301 367.516 cv
352.119 367.516 345.49 365.879 345.49 363.859 cv
345.49 361.841 352.119 360.204 360.301 360.204 cv
368.48 360.204 375.111 361.841 375.111 363.859 cv
1 1 1 rgb
f
356.932 363.145 mo
356.932 363.534 355.65 363.85 354.072 363.85 cv
352.494 363.85 351.213 363.534 351.213 363.145 cv
351.213 362.754 352.494 362.438 354.072 362.438 cv
355.65 362.438 356.932 362.754 356.932 363.145 cv
.901961 .443137 .443137 rgb
f
373.539 383.123 mo
373.539 383.123 373.453 383.186 373.293 383.303 cv
373.138 383.43 372.901 383.596 372.551 383.744 cv
372.212 383.926 371.786 384.086 371.296 384.264 cv
370.81 384.467 370.239 384.605 369.619 384.775 cv
368.373 385.084 366.902 385.372 365.31 385.565 cv
364.512 385.631 363.688 385.724 362.848 385.772 cv
362.004 385.797 361.147 385.822 360.288 385.848 cv
359.441 385.822 358.596 385.798 357.762 385.773 cv
356.921 385.726 356.091 385.632 355.29 385.566 cv
353.697 385.375 352.227 385.085 350.98 384.776 cv
350.36 384.605 349.79 384.468 349.304 384.265 cv
348.813 384.086 348.388 383.926 348.055 383.746 cv
347.709 383.601 347.463 383.432 347.307 383.303 cv
347.146 383.186 347.061 383.123 347.061 383.123 cv
347.061 383.123 347.156 383.17 347.336 383.258 cv
347.424 383.301 347.532 383.354 347.66 383.416 cv
347.797 383.46 347.953 383.51 348.129 383.566 cv
348.472 383.696 348.908 383.798 349.408 383.907 cv
349.9 384.037 350.482 384.097 351.096 384.226 cv
351.714 384.338 352.397 384.4 353.11 384.498 cv
353.828 384.559 354.587 384.623 355.371 384.689 cv
356.153 384.728 356.962 384.768 357.784 384.809 cv
358.617 384.821 359.465 384.835 360.312 384.848 cv
361.147 384.835 361.982 384.822 362.806 384.809 cv
363.631 384.769 364.443 384.729 365.229 384.69 cv
366.014 384.625 366.771 384.56 367.49 384.5 cv
368.203 384.401 368.886 384.34 369.504 384.227 cv
370.117 384.098 370.699 384.04 371.192 383.908 cv
371.693 383.798 372.128 383.697 372.466 383.569 cv
372.641 383.514 372.798 383.463 372.934 383.42 cv
373.063 383.355 373.175 383.302 373.264 383.258 cv
373.443 383.17 373.539 383.123 373.539 383.123 cv
1 1 1 rgb
f
373.539 402.385 mo
373.539 402.385 373.453 402.447 373.293 402.565 cv
373.139 402.692 372.901 402.857 372.551 403.007 cv
372.213 403.188 371.786 403.349 371.296 403.527 cv
370.81 403.729 370.24 403.868 369.619 404.038 cv
368.373 404.347 366.902 404.635 365.31 404.827 cv
364.512 404.894 363.688 404.985 362.848 405.034 cv
362.004 405.059 361.147 405.084 360.288 405.109 cv
359.441 405.084 358.596 405.06 357.762 405.035 cv
356.921 404.988 356.091 404.895 355.29 404.828 cv
353.697 404.638 352.227 404.348 350.98 404.039 cv
350.359 403.868 349.789 403.73 349.303 403.527 cv
348.811 403.349 348.388 403.188 348.054 403.009 cv
347.709 402.863 347.463 402.693 347.306 402.565 cv
347.145 402.447 347.061 402.385 347.061 402.385 cv
347.061 402.385 347.156 402.432 347.336 402.52 cv
347.424 402.563 347.532 402.615 347.66 402.678 cv
347.797 402.722 347.953 402.772 348.129 402.829 cv
348.471 402.959 348.907 403.061 349.407 403.17 cv
349.9 403.301 350.481 403.359 351.096 403.488 cv
351.714 403.601 352.397 403.663 353.109 403.761 cv
353.828 403.821 354.586 403.886 355.37 403.951 cv
356.153 403.99 356.962 404.029 357.784 404.07 cv
358.617 404.083 359.465 404.097 360.312 404.109 cv
361.147 404.097 361.982 404.084 362.806 404.071 cv
363.631 404.03 364.443 403.991 365.229 403.953 cv
366.014 403.887 366.771 403.823 367.49 403.763 cv
368.203 403.664 368.887 403.603 369.505 403.49 cv
370.118 403.36 370.7 403.303 371.192 403.172 cv
371.694 403.061 372.129 402.96 372.466 402.832 cv
372.642 402.776 372.798 402.726 372.934 402.682 cv
373.064 402.618 373.175 402.563 373.265 402.52 cv
373.443 402.432 373.539 402.385 373.539 402.385 cv
f
360.301 406.041 mo
352.119 406.041 345.49 404.404 345.49 402.385 cv
345.49 401.973 345.78 401.577 346.291 401.207 cv
346.291 384.301 li
346.291 384.301 li
345.78 383.931 345.49 383.535 345.49 383.123 cv
345.49 382.71 345.78 382.314 346.291 381.944 cv
346.291 365.645 li
346.291 365.645 li
345.465 365.13 344.99 364.535 344.99 363.859 cv
344.99 361.132 352.692 359.704 360.301 359.704 cv
360.301 360.204 li
360.301 360.204 li
352.119 360.204 345.49 361.841 345.49 363.859 cv
345.49 363.859 li
345.49 363.859 li
345.49 365.879 352.119 367.516 360.301 367.516 cv
360.301 367.516 li
360.301 384.847 li
359.458 384.835 358.614 384.821 357.784 384.809 cv
356.962 384.768 356.153 384.728 355.371 384.689 cv
354.587 384.623 353.828 384.559 353.11 384.498 cv
352.397 384.4 351.714 384.338 351.096 384.226 cv
350.482 384.097 349.9 384.037 349.408 383.907 cv
348.908 383.798 348.472 383.696 348.129 383.566 cv
347.953 383.51 347.797 383.46 347.66 383.416 cv
347.532 383.354 347.424 383.301 347.336 383.258 cv
347.156 383.17 347.061 383.123 347.061 383.123 cv
347.061 383.123 347.146 383.186 347.307 383.303 cv
347.463 383.432 347.709 383.601 348.055 383.746 cv
348.388 383.926 348.813 384.086 349.304 384.265 cv
349.79 384.468 350.36 384.605 350.98 384.776 cv
352.227 385.085 353.697 385.375 355.29 385.566 cv
356.091 385.632 356.921 385.726 357.762 385.773 cv
358.596 385.798 359.441 385.822 360.288 385.848 cv
360.292 385.848 360.297 385.847 360.301 385.847 cv
360.301 404.109 li
359.458 404.096 358.614 404.083 357.784 404.07 cv
356.962 404.029 356.153 403.99 355.37 403.951 cv
354.586 403.886 353.828 403.821 353.109 403.761 cv
352.397 403.663 351.714 403.601 351.096 403.488 cv
350.481 403.359 349.9 403.301 349.407 403.17 cv
348.907 403.061 348.471 402.959 348.129 402.829 cv
347.953 402.772 347.797 402.722 347.66 402.678 cv
347.532 402.615 347.424 402.563 347.336 402.52 cv
347.156 402.432 347.061 402.385 347.061 402.385 cv
347.061 402.385 347.145 402.447 347.306 402.565 cv
347.463 402.693 347.709 402.863 348.054 403.009 cv
348.388 403.188 348.811 403.349 349.303 403.527 cv
349.789 403.73 350.359 403.868 350.98 404.039 cv
352.227 404.348 353.697 404.638 355.29 404.828 cv
356.091 404.895 356.921 404.988 357.762 405.035 cv
358.596 405.06 359.441 405.084 360.288 405.109 cv
360.292 405.109 360.297 405.109 360.301 405.109 cv
360.301 406.041 li
360.301 406.041 li
.811765 .396078 .396078 rgb
f
360.301 367.516 mo
352.119 367.516 345.49 365.879 345.49 363.859 cv
345.49 363.859 li
345.49 361.841 352.119 360.204 360.301 360.204 cv
360.301 360.204 li
360.301 367.516 li
360.301 367.516 li
354.072 362.438 mo
352.494 362.438 351.213 362.754 351.213 363.145 cv
351.213 363.534 352.494 363.85 354.072 363.85 cv
355.65 363.85 356.932 363.534 356.932 363.145 cv
356.932 362.754 355.65 362.438 354.072 362.438 cv
.898039 .898039 .898039 rgb
f
354.072 363.85 mo
352.494 363.85 351.213 363.534 351.213 363.145 cv
351.213 362.754 352.494 362.438 354.072 362.438 cv
355.65 362.438 356.932 362.754 356.932 363.145 cv
356.932 363.534 355.65 363.85 354.072 363.85 cv
.811765 .396078 .396078 rgb
f
360.288 385.848 mo
359.441 385.822 358.596 385.798 357.762 385.773 cv
356.921 385.726 356.091 385.632 355.29 385.566 cv
353.697 385.375 352.227 385.085 350.98 384.776 cv
350.36 384.605 349.79 384.468 349.304 384.265 cv
348.813 384.086 348.388 383.926 348.055 383.746 cv
347.709 383.601 347.463 383.432 347.307 383.303 cv
347.146 383.186 347.061 383.123 347.061 383.123 cv
347.061 383.123 347.156 383.17 347.336 383.258 cv
347.424 383.301 347.532 383.354 347.66 383.416 cv
347.797 383.46 347.953 383.51 348.129 383.566 cv
348.472 383.696 348.908 383.798 349.408 383.907 cv
349.9 384.037 350.482 384.097 351.096 384.226 cv
351.714 384.338 352.397 384.4 353.11 384.498 cv
353.828 384.559 354.587 384.623 355.371 384.689 cv
356.153 384.728 356.962 384.768 357.784 384.809 cv
358.614 384.821 359.458 384.835 360.301 384.847 cv
360.301 385.847 li
360.297 385.847 360.292 385.848 360.288 385.848 cv
.898039 .898039 .898039 rgb
f
360.288 405.109 mo
359.441 405.084 358.596 405.06 357.762 405.035 cv
356.921 404.988 356.091 404.895 355.29 404.828 cv
353.697 404.638 352.227 404.348 350.98 404.039 cv
350.359 403.868 349.789 403.73 349.303 403.527 cv
348.811 403.349 348.388 403.188 348.054 403.009 cv
347.709 402.863 347.463 402.693 347.306 402.565 cv
347.145 402.447 347.061 402.385 347.061 402.385 cv
347.061 402.385 347.156 402.432 347.336 402.52 cv
347.424 402.563 347.532 402.615 347.66 402.678 cv
347.797 402.722 347.953 402.772 348.129 402.829 cv
348.471 402.959 348.907 403.061 349.407 403.17 cv
349.9 403.301 350.481 403.359 351.096 403.488 cv
351.714 403.601 352.397 403.663 353.109 403.761 cv
353.828 403.821 354.586 403.886 355.37 403.951 cv
356.153 403.99 356.962 404.029 357.784 404.07 cv
358.614 404.083 359.458 404.096 360.301 404.109 cv
360.301 405.109 li
360.297 405.109 360.292 405.109 360.288 405.109 cv
f
391.896 361.687 mo
384.868 361.687 379.17 360.28 379.17 358.545 cv
379.17 356.81 384.868 355.403 391.896 355.403 cv
398.928 355.403 404.623 356.81 404.623 358.545 cv
404.623 360.28 398.928 361.687 391.896 361.687 cv
379.858 376.109 mo
379.858 390.637 li
379.42 390.955 379.17 391.295 379.17 391.649 cv
379.17 393.385 384.868 394.791 391.896 394.791 cv
398.928 394.791 404.623 393.385 404.623 391.649 cv
404.623 391.295 404.374 390.955 403.935 390.637 cv
403.935 376.109 li
404.374 375.791 404.623 375.452 404.623 375.098 cv
404.623 374.742 404.374 374.403 403.935 374.085 cv
403.935 360.078 li
404.645 359.637 405.053 359.125 405.053 358.545 cv
405.053 356.201 398.434 354.975 391.896 354.975 cv
385.359 354.975 378.74 356.201 378.74 358.545 cv
378.74 359.125 379.148 359.637 379.858 360.078 cv
379.858 374.085 li
379.42 374.403 379.17 374.742 379.17 375.098 cv
379.17 375.452 379.42 375.791 379.858 376.109 cv
.552941 .682353 .701961 rgb
f
379.17 358.545 mo
379.17 360.28 384.868 361.687 391.896 361.687 cv
398.928 361.687 404.623 360.28 404.623 358.545 cv
404.623 356.81 398.928 355.403 391.896 355.403 cv
384.868 355.403 379.17 356.81 379.17 358.545 cv
1 1 1 rgb
f
394.791 357.93 mo
394.791 358.266 395.893 358.537 397.249 358.537 cv
398.604 358.537 399.706 358.266 399.706 357.93 cv
399.706 357.595 398.604 357.323 397.249 357.323 cv
395.893 357.323 394.791 357.595 394.791 357.93 cv
cp
.552941 .682353 .701961 rgb
f
380.521 375.098 mo
380.521 375.098 380.595 375.151 380.732 375.252 cv
380.865 375.361 381.069 375.504 381.37 375.631 cv
381.661 375.787 382.027 375.925 382.449 376.077 cv
382.866 376.253 383.356 376.371 383.89 376.518 cv
384.96 376.782 386.224 377.03 387.593 377.196 cv
388.278 377.252 388.986 377.332 389.708 377.374 cv
390.434 377.396 391.17 377.417 391.907 377.439 cv
392.636 377.417 393.361 377.396 394.078 377.375 cv
394.801 377.334 395.515 377.253 396.202 377.197 cv
397.571 377.033 398.834 376.783 399.905 376.519 cv
400.438 376.371 400.929 376.254 401.346 376.078 cv
401.768 375.925 402.133 375.787 402.419 375.633 cv
402.716 375.509 402.928 375.363 403.062 375.252 cv
403.2 375.151 403.273 375.098 403.273 375.098 cv
403.273 375.098 403.191 375.138 403.037 375.214 cv
402.962 375.251 402.869 375.296 402.759 375.35 cv
402.642 375.388 402.507 375.431 402.355 375.479 cv
402.062 375.591 401.686 375.678 401.257 375.772 cv
400.834 375.883 400.334 375.935 399.807 376.046 cv
399.275 376.142 398.689 376.195 398.075 376.279 cv
397.458 376.332 396.807 376.387 396.133 376.443 cv
395.46 376.477 394.766 376.511 394.059 376.546 cv
393.344 376.557 392.615 376.568 391.887 376.579 cv
391.169 376.568 390.451 376.559 389.744 376.546 cv
389.034 376.512 388.337 376.479 387.661 376.445 cv
386.987 376.389 386.336 376.333 385.719 376.28 cv
385.105 376.196 384.519 376.144 383.988 376.046 cv
383.461 375.936 382.962 375.886 382.537 375.772 cv
382.107 375.678 381.733 375.592 381.443 375.481 cv
381.293 375.434 381.158 375.39 381.041 375.352 cv
380.93 375.298 380.834 375.251 380.758 375.214 cv
380.603 375.138 380.521 375.098 380.521 375.098 cv
1 1 1 rgb
f
380.521 391.649 mo
380.521 391.649 380.595 391.703 380.732 391.805 cv
380.865 391.913 381.069 392.055 381.37 392.184 cv
381.661 392.34 382.027 392.479 382.449 392.631 cv
382.866 392.805 383.355 392.925 383.89 393.069 cv
384.96 393.336 386.224 393.582 387.593 393.748 cv
388.278 393.806 388.986 393.885 389.708 393.926 cv
390.434 393.947 391.17 393.969 391.907 393.99 cv
392.636 393.969 393.361 393.947 394.078 393.927 cv
394.801 393.887 395.515 393.807 396.202 393.749 cv
397.571 393.585 398.834 393.336 399.905 393.07 cv
400.439 392.925 400.93 392.806 401.348 392.631 cv
401.77 392.479 402.133 392.34 402.42 392.186 cv
402.716 392.061 402.928 391.914 403.063 391.805 cv
403.201 391.703 403.273 391.649 403.273 391.649 cv
403.273 391.649 403.191 391.689 403.037 391.765 cv
402.962 391.802 402.869 391.847 402.759 391.901 cv
402.642 391.938 402.507 391.982 402.355 392.031 cv
402.062 392.143 401.687 392.23 401.258 392.324 cv
400.834 392.436 400.334 392.486 399.807 392.598 cv
399.275 392.693 398.689 392.748 398.076 392.831 cv
397.458 392.884 396.808 392.939 396.134 392.995 cv
395.46 393.029 394.766 393.063 394.059 393.098 cv
393.344 393.108 392.615 393.12 391.887 393.132 cv
391.169 393.12 390.451 393.109 389.744 393.099 cv
389.034 393.063 388.337 393.03 387.661 392.997 cv
386.987 392.939 386.336 392.885 385.719 392.834 cv
385.105 392.748 384.519 392.696 383.988 392.599 cv
383.46 392.487 382.961 392.438 382.537 392.325 cv
382.106 392.23 381.732 392.143 381.443 392.034 cv
381.293 391.985 381.158 391.942 381.041 391.904 cv
380.929 391.85 380.834 391.803 380.757 391.765 cv
380.603 391.689 380.521 391.649 380.521 391.649 cv
f
391.896 394.791 mo
384.868 394.791 379.17 393.385 379.17 391.649 cv
379.17 391.295 379.42 390.955 379.858 390.637 cv
379.858 376.109 li
379.858 376.109 li
379.42 375.791 379.17 375.452 379.17 375.098 cv
379.17 374.742 379.42 374.403 379.858 374.085 cv
379.858 360.078 li
379.858 360.078 li
379.148 359.637 378.74 359.125 378.74 358.545 cv
378.74 356.201 385.359 354.975 391.896 354.975 cv
391.896 355.403 li
391.896 355.403 li
384.868 355.403 379.17 356.81 379.17 358.545 cv
379.17 358.545 li
379.17 358.545 li
379.17 360.28 384.868 361.687 391.896 361.687 cv
391.896 361.687 li
391.896 376.579 li
391.893 376.579 391.89 376.579 391.887 376.579 cv
391.169 376.568 390.451 376.559 389.744 376.546 cv
389.034 376.512 388.337 376.479 387.661 376.445 cv
386.987 376.389 386.336 376.333 385.719 376.28 cv
385.105 376.196 384.519 376.144 383.988 376.046 cv
383.461 375.936 382.962 375.886 382.537 375.772 cv
382.107 375.678 381.733 375.592 381.443 375.481 cv
381.293 375.434 381.158 375.39 381.041 375.352 cv
380.93 375.298 380.834 375.251 380.758 375.214 cv
380.603 375.138 380.521 375.098 380.521 375.098 cv
380.521 375.098 380.595 375.151 380.732 375.252 cv
380.865 375.361 381.069 375.504 381.37 375.631 cv
381.661 375.787 382.027 375.925 382.449 376.077 cv
382.866 376.253 383.356 376.371 383.89 376.518 cv
384.96 376.782 386.224 377.03 387.593 377.196 cv
388.278 377.252 388.986 377.332 389.708 377.374 cv
390.43 377.395 391.163 377.417 391.896 377.439 cv
391.896 393.132 li
391.893 393.132 391.89 393.132 391.887 393.132 cv
391.169 393.12 390.451 393.109 389.744 393.099 cv
389.034 393.063 388.337 393.03 387.661 392.997 cv
386.987 392.939 386.336 392.885 385.719 392.834 cv
385.105 392.748 384.519 392.696 383.988 392.599 cv
383.46 392.487 382.961 392.438 382.537 392.325 cv
382.106 392.23 381.732 392.143 381.443 392.034 cv
381.293 391.985 381.158 391.942 381.041 391.904 cv
380.929 391.85 380.834 391.803 380.757 391.765 cv
380.603 391.689 380.521 391.649 380.521 391.649 cv
380.521 391.649 380.595 391.703 380.732 391.805 cv
380.865 391.913 381.069 392.055 381.37 392.184 cv
381.661 392.34 382.027 392.479 382.449 392.631 cv
382.866 392.805 383.355 392.925 383.89 393.069 cv
384.96 393.336 386.224 393.582 387.593 393.748 cv
388.278 393.806 388.986 393.885 389.708 393.926 cv
390.43 393.947 391.163 393.968 391.896 393.99 cv
391.896 394.791 li
391.896 394.791 li
.498039 .611765 .631373 rgb
f
391.896 361.687 mo
384.868 361.687 379.17 360.28 379.17 358.545 cv
379.17 358.545 li
379.17 356.81 384.868 355.403 391.896 355.403 cv
391.896 355.403 li
391.896 361.687 li
391.896 361.687 li
.898039 .898039 .898039 rgb
f
391.896 377.439 mo
391.163 377.417 390.43 377.395 389.708 377.374 cv
388.986 377.332 388.278 377.252 387.593 377.196 cv
386.224 377.03 384.96 376.782 383.89 376.518 cv
383.356 376.371 382.866 376.253 382.449 376.077 cv
382.027 375.925 381.661 375.787 381.37 375.631 cv
381.069 375.504 380.865 375.361 380.732 375.252 cv
380.595 375.151 380.521 375.098 380.521 375.098 cv
380.521 375.098 380.603 375.138 380.758 375.214 cv
380.834 375.251 380.93 375.298 381.041 375.352 cv
381.158 375.39 381.293 375.434 381.443 375.481 cv
381.733 375.592 382.107 375.678 382.537 375.772 cv
382.962 375.886 383.461 375.936 383.988 376.046 cv
384.519 376.144 385.105 376.196 385.719 376.28 cv
386.336 376.333 386.987 376.389 387.661 376.445 cv
388.337 376.479 389.034 376.512 389.744 376.546 cv
390.451 376.559 391.169 376.568 391.887 376.579 cv
391.89 376.579 391.893 376.579 391.896 376.579 cv
391.896 377.439 li
f
391.896 393.99 mo
391.163 393.968 390.43 393.947 389.708 393.926 cv
388.986 393.885 388.278 393.806 387.593 393.748 cv
386.224 393.582 384.96 393.336 383.89 393.069 cv
383.355 392.925 382.866 392.805 382.449 392.631 cv
382.027 392.479 381.661 392.34 381.37 392.184 cv
381.069 392.055 380.865 391.913 380.732 391.805 cv
380.595 391.703 380.521 391.649 380.521 391.649 cv
380.521 391.649 380.603 391.689 380.757 391.765 cv
380.834 391.803 380.929 391.85 381.041 391.904 cv
381.158 391.942 381.293 391.985 381.443 392.034 cv
381.732 392.143 382.106 392.23 382.537 392.325 cv
382.961 392.438 383.46 392.487 383.988 392.599 cv
384.519 392.696 385.105 392.748 385.719 392.834 cv
386.336 392.885 386.987 392.939 387.661 392.997 cv
388.337 393.03 389.034 393.063 389.744 393.099 cv
390.451 393.109 391.169 393.12 391.887 393.132 cv
391.89 393.132 391.893 393.132 391.896 393.132 cv
391.896 393.99 li
f
304.717 395.643 mo
304.693 395.642 304.773 395.284 304.527 394.589 cv
304.285 393.897 303.529 392.858 302.117 391.848 cv
300.725 390.826 298.748 389.848 296.373 388.971 cv
293.994 388.089 291.189 387.35 288.078 386.798 cv
281.863 385.646 274.377 385.399 266.518 386.304 cv
262.602 386.804 258.557 387.55 254.693 388.934 cv
252.766 389.617 250.877 390.464 249.217 391.563 cv
247.596 392.635 246.141 394.183 246.225 395.643 cv
246.262 397.093 247.752 398.482 249.394 399.45 cv
251.076 400.434 252.971 401.166 254.898 401.737 cv
258.768 402.871 262.76 403.515 266.639 403.864 cv
270.506 404.242 274.324 404.278 277.879 404.186 cv
281.455 404.071 284.826 403.813 287.908 403.401 cv
290.986 402.974 293.779 402.406 296.168 401.694 cv
298.553 400.985 300.545 400.129 301.955 399.2 cv
303.385 398.287 304.176 397.324 304.459 396.667 cv
304.521 396.503 304.6 396.345 304.609 396.261 cv
304.637 396.161 304.678 396.106 304.682 395.946 cv
304.707 395.689 304.721 395.558 304.721 395.558 cv
304.717 395.643 li
307.029 395.728 mo
307.029 395.728 307.023 395.86 307.012 396.117 cv
307.006 396.344 306.889 397.057 306.664 397.588 cv
306.213 398.789 305.084 400.176 303.43 401.347 cv
301.779 402.542 299.627 403.585 297.103 404.514 cv
294.578 405.445 291.658 406.208 288.441 406.777 cv
285.227 407.366 281.705 407.736 277.979 407.823 cv
274.232 407.93 270.334 407.748 266.275 407.288 cv
262.238 406.773 258.068 406.012 253.973 404.555 cv
251.928 403.829 249.895 402.938 247.979 401.68 cv
247.027 401.042 246.1 400.298 245.313 399.324 cv
244.91 398.854 244.578 398.279 244.307 397.671 cv
244.051 397.043 243.91 396.348 243.91 395.646 cv
243.918 395.51 li
243.922 395.46 li
243.932 395.361 li
243.951 395.163 li
243.955 395.056 244.002 394.841 244.043 394.655 cv
244.119 394.254 244.256 393.966 244.379 393.651 cv
244.672 393.063 245.022 392.515 245.436 392.069 cv
246.248 391.15 247.189 390.465 248.15 389.884 cv
250.088 388.741 252.127 387.964 254.174 387.352 cv
258.273 386.145 262.393 385.487 266.391 385.123 cv
270.389 384.732 274.271 384.693 277.939 384.789 cv
281.613 384.906 285.078 385.171 288.268 385.601 cv
294.627 386.491 299.92 387.974 303.266 390.177 cv
304.938 391.25 306.103 392.56 306.596 393.727 cv
306.844 394.301 306.951 394.798 306.988 395.131 cv
307.018 395.469 307.033 395.643 307.033 395.643 cv
307.029 395.728 li
.552941 .682353 .701961 rgb
f
293.451 393.904 mo
293.432 393.781 li
293.41 393.7 293.459 393.576 293.357 393.399 cv
293.281 393.052 292.857 392.447 292.019 391.829 cv
291.189 391.208 289.992 390.572 288.525 389.998 cv
287.061 389.414 285.312 388.929 283.369 388.562 cv
281.426 388.182 279.281 387.933 277.008 387.883 cv
274.721 387.812 272.32 387.951 269.859 388.243 cv
267.408 388.579 264.883 389.083 262.492 389.977 cv
261.311 390.433 260.139 390.96 259.146 391.645 cv
258.459 392.189 li
258.283 392.394 258.049 392.575 257.918 392.782 cv
257.713 393.084 li
257.621 393.193 257.668 393.232 257.621 393.295 cv
257.598 393.356 257.535 393.356 257.529 393.572 cv
257.504 393.822 li
257.49 393.947 li
257.484 394.01 li
257.48 394.041 li
257.482 394.018 257.48 394.035 257.479 394.052 cv
257.476 394.083 257.474 394.113 257.49 393.904 cv
257.564 394.533 258.291 395.33 259.322 395.89 cv
260.336 396.46 261.514 396.873 262.695 397.216 cv
265.094 397.859 267.566 398.259 269.979 398.444 cv
270.582 398.486 271.182 398.528 271.775 398.57 cv
272.359 398.591 272.939 398.611 273.514 398.631 cv
274.117 398.632 274.713 398.633 275.303 398.634 cv
275.863 398.624 276.42 398.613 276.967 398.603 cv
279.189 398.524 281.281 398.38 283.197 398.157 cv
285.107 397.917 286.846 397.602 288.32 397.189 cv
289.795 396.783 291.008 396.271 291.855 395.742 cv
292.297 395.486 292.592 395.212 292.853 394.983 cv
292.949 394.861 293.043 394.752 293.133 394.651 cv
293.223 394.549 293.197 394.527 293.252 394.479 cv
293.354 394.479 293.387 394.107 293.418 393.979 cv
293.447 393.82 293.463 393.738 293.463 393.738 cv
293.451 393.904 li
295.754 394.07 mo
295.754 394.07 295.746 394.154 295.728 394.315 cv
295.689 394.501 295.75 394.633 295.535 395.189 cv
295.447 395.417 295.332 395.746 295.189 395.951 cv
295.043 396.157 294.885 396.383 294.713 396.627 cv
294.338 397.042 293.881 397.504 293.338 397.884 cv
292.254 398.679 290.871 399.383 289.258 400.009 cv
287.643 400.642 285.781 401.15 283.73 401.534 cv
281.684 401.932 279.439 402.189 277.066 402.241 cv
276.463 402.246 275.896 402.268 275.238 402.258 cv
274.648 402.237 274.053 402.217 273.447 402.196 cv
272.816 402.153 272.178 402.11 271.533 402.066 cv
270.9 402.001 270.26 401.935 269.615 401.869 cv
267.045 401.519 264.389 400.999 261.77 400.033 cv
260.463 399.532 259.154 398.963 257.904 398.119 cv
257.598 397.884 257.289 397.659 256.988 397.41 cv
256.701 397.11 256.398 396.867 256.141 396.512 cv
255.603 395.857 255.188 394.925 255.174 393.905 cv
255.19 393.683 255.189 393.701 255.189 393.719 cv
255.189 393.728 255.189 393.738 255.191 393.708 cv
255.197 393.677 li
255.209 393.615 li
255.232 393.492 li
255.279 393.245 li
255.285 393.12 255.398 392.826 255.504 392.581 cv
255.719 392.025 256 391.732 256.266 391.403 cv
256.535 391.076 256.852 390.858 257.145 390.59 cv
257.453 390.368 257.768 390.172 258.08 389.967 cv
259.35 389.237 260.666 388.782 261.973 388.395 cv
264.598 387.679 267.201 387.263 269.732 387.063 cv
272.26 386.827 274.717 386.83 277.025 386.891 cv
279.346 386.973 281.537 387.127 283.557 387.365 cv
287.588 387.877 290.969 388.744 293.172 390.162 cv
294.27 390.846 295.096 391.705 295.43 392.551 cv
295.645 392.929 295.668 393.309 295.715 393.542 cv
295.748 393.781 295.766 393.904 295.766 393.904 cv
295.754 394.07 li
f
291.373 380.382 mo
291.373 389.163 284.254 396.283 275.471 396.283 cv
266.689 396.283 259.57 389.163 259.57 380.382 cv
259.57 369.672 271.619 358.586 275.471 350.03 cv
279.764 358.588 291.373 369.668 291.373 380.382 cv
.682353 .823529 .290196 rgb
f
271.281 366.727 mo
271.281 366.727 271.293 366.855 271.314 367.096 cv
271.316 367.323 271.367 367.684 271.359 368.084 cv
271.361 368.492 271.391 368.996 271.375 369.526 cv
271.367 370.063 271.338 370.645 271.305 371.26 cv
271.26 371.868 271.207 372.51 271.135 373.158 cv
271.059 373.805 270.979 374.467 270.877 375.118 cv
270.777 375.771 270.682 376.426 270.559 377.052 cv
270.451 377.658 270.34 378.273 270.23 378.89 cv
270.104 379.473 270.012 380.045 269.908 380.575 cv
269.853 380.852 269.83 381.097 269.76 381.362 cv
269.723 381.615 269.689 381.864 269.631 382.116 cv
269.566 382.603 269.467 383.099 269.432 383.584 cv
269.398 383.832 269.379 384.082 269.375 384.326 cv
269.357 384.579 269.348 384.834 269.361 385.08 cv
269.354 385.592 269.416 386.082 269.459 386.572 cv
269.537 387.036 269.592 387.51 269.67 387.897 cv
269.771 388.258 269.816 388.614 269.875 388.834 cv
269.918 389.074 269.943 389.203 269.943 389.203 cv
269.647 389.605 li
269.647 389.605 269.32 389.36 268.75 388.932 cv
268.482 388.697 268.158 388.404 267.801 388.053 cv
267.467 387.68 267.078 387.263 266.754 386.729 cv
266.412 386.213 266.09 385.613 265.834 384.948 cv
265.563 384.288 265.377 383.556 265.236 382.793 cv
265.117 382.026 265.051 381.226 265.076 380.415 cv
265.084 379.604 265.184 378.787 265.314 377.98 cv
265.961 374.76 267.398 371.824 268.603 369.741 cv
269.201 368.692 269.801 367.88 270.209 367.309 cv
270.623 366.741 270.881 366.426 270.881 366.426 cv
271.281 366.727 li
1 1 1 rgb
f
274.722 404.229 mo
272.103 404.229 269.383 404.132 266.639 403.864 cv
269.376 404.132 272.086 404.225 274.699 404.225 cv
274.957 404.225 275.214 404.224 275.471 404.223 cv
275.471 404.226 li
275.222 404.228 274.972 404.229 274.722 404.229 cv
246.221 395.523 mo
246.22 394.098 247.64 392.605 249.217 391.563 cv
250.877 390.464 252.766 389.617 254.693 388.934 cv
256.79 388.183 258.94 387.62 261.094 387.182 cv
261.094 387.183 261.095 387.184 261.095 387.185 cv
258.941 387.623 256.791 388.183 254.693 388.934 cv
252.766 389.617 250.877 390.464 249.217 391.563 cv
247.64 392.605 246.22 394.098 246.221 395.523 cv
.898039 .898039 .898039 rgb
f
275.471 407.846 mo
272.498 407.83 269.437 407.646 266.275 407.288 cv
266.275 407.288 li
262.238 406.773 258.068 406.012 253.973 404.555 cv
251.928 403.829 249.895 402.938 247.979 401.68 cv
247.027 401.042 246.1 400.298 245.313 399.324 cv
244.91 398.854 244.578 398.279 244.307 397.671 cv
244.051 397.043 243.91 396.348 243.91 395.646 cv
243.918 395.51 li
243.922 395.46 li
243.932 395.361 li
243.951 395.163 li
243.955 395.056 244.002 394.841 244.043 394.655 cv
244.119 394.254 244.256 393.966 244.379 393.651 cv
244.672 393.063 245.022 392.515 245.436 392.069 cv
246.248 391.15 247.189 390.465 248.15 389.884 cv
250.088 388.741 252.127 387.964 254.174 387.352 cv
256.3 386.726 258.43 386.253 260.549 385.887 cv
260.712 386.328 260.894 386.76 261.094 387.182 cv
258.94 387.62 256.79 388.183 254.693 388.934 cv
252.766 389.617 250.877 390.464 249.217 391.563 cv
247.64 392.605 246.22 394.098 246.221 395.523 cv
246.221 395.564 246.222 395.604 246.225 395.643 cv
246.262 397.093 247.752 398.482 249.394 399.45 cv
251.076 400.434 252.971 401.166 254.898 401.737 cv
258.768 402.871 262.76 403.515 266.639 403.864 cv
266.639 403.864 li
269.383 404.132 272.103 404.229 274.722 404.229 cv
274.972 404.229 275.222 404.228 275.471 404.226 cv
275.471 407.846 li
.498039 .611765 .631373 rgb
f
258.293 395.167 mo
258.292 395.166 258.291 395.165 258.291 395.165 cv
258.291 395.165 258.292 395.166 258.293 395.167 cv
258.289 395.163 mo
257.837 394.75 257.546 394.307 257.493 393.924 cv
257.504 393.822 li
257.529 393.572 li
257.535 393.356 257.598 393.356 257.621 393.295 cv
257.668 393.232 257.621 393.193 257.713 393.084 cv
257.918 392.782 li
258.049 392.575 258.283 392.394 258.459 392.189 cv
259.146 391.645 li
260.139 390.96 261.311 390.433 262.492 389.977 cv
262.57 389.947 262.648 389.919 262.726 389.891 cv
262.727 389.893 262.729 389.895 262.731 389.897 cv
262.492 389.977 li
261.311 390.433 260.139 390.96 259.146 391.645 cv
258.459 392.189 li
258.283 392.394 258.049 392.575 257.918 392.782 cv
257.713 393.084 li
257.621 393.193 257.668 393.232 257.621 393.295 cv
257.598 393.356 257.535 393.356 257.529 393.572 cv
257.504 393.822 li
257.494 393.92 li
257.546 394.304 257.836 394.749 258.289 395.163 cv
255.174 393.901 mo
255.179 393.829 255.183 393.782 255.185 393.753 cv
255.183 393.782 255.179 393.829 255.174 393.901 cv
255.189 393.728 mo
255.189 393.728 255.189 393.723 255.189 393.719 cv
255.189 393.716 255.189 393.713 255.189 393.711 cv
255.189 393.713 255.189 393.716 255.189 393.719 cv
255.189 393.723 255.189 393.728 255.189 393.728 cv
255.189 393.728 li
255.19 393.72 mo
255.191 393.717 255.191 393.714 255.191 393.709 cv
255.191 393.714 255.191 393.717 255.19 393.72 cv
255.189 393.713 mo
255.189 393.712 255.189 393.711 255.189 393.711 cv
255.189 393.711 255.189 393.712 255.189 393.713 cv
.898039 .898039 .898039 rgb
f
275.238 402.258 mo
275.238 402.258 li
274.648 402.237 274.053 402.217 273.447 402.196 cv
272.816 402.153 272.178 402.11 271.533 402.066 cv
270.9 402.001 270.26 401.935 269.615 401.869 cv
267.045 401.519 264.389 400.999 261.77 400.033 cv
260.463 399.532 259.154 398.963 257.904 398.119 cv
257.598 397.884 257.289 397.659 256.988 397.41 cv
256.701 397.11 256.398 396.867 256.141 396.512 cv
255.603 395.857 255.188 394.925 255.174 393.905 cv
255.174 393.904 255.174 393.903 255.174 393.901 cv
255.179 393.829 255.183 393.782 255.185 393.753 cv
255.187 393.731 255.188 393.719 255.189 393.713 cv
255.189 393.712 255.189 393.711 255.189 393.711 cv
255.189 393.71 255.189 393.709 255.189 393.709 cv
255.189 393.709 255.189 393.71 255.189 393.711 cv
255.189 393.713 255.189 393.716 255.189 393.719 cv
255.189 393.723 255.189 393.728 255.189 393.728 cv
255.189 393.728 li
255.189 393.728 li
255.189 393.728 255.19 393.726 255.19 393.72 cv
255.191 393.717 255.191 393.714 255.191 393.709 cv
255.191 393.709 255.191 393.708 255.191 393.708 cv
255.197 393.677 li
255.209 393.615 li
255.232 393.492 li
255.279 393.245 li
255.285 393.12 255.398 392.826 255.504 392.581 cv
255.719 392.025 256 391.732 256.266 391.403 cv
256.535 391.076 256.852 390.858 257.145 390.59 cv
257.453 390.368 257.768 390.172 258.08 389.967 cv
259.286 389.275 260.53 388.832 261.771 388.457 cv
262.063 388.953 262.382 389.431 262.726 389.891 cv
262.648 389.919 262.57 389.947 262.492 389.977 cv
261.311 390.433 260.139 390.96 259.146 391.645 cv
258.459 392.189 li
258.283 392.394 258.049 392.575 257.918 392.782 cv
257.713 393.084 li
257.621 393.193 257.668 393.232 257.621 393.295 cv
257.598 393.356 257.535 393.356 257.529 393.572 cv
257.504 393.822 li
257.493 393.924 li
257.546 394.307 257.837 394.75 258.289 395.163 cv
258.289 395.164 258.29 395.164 258.291 395.165 cv
258.291 395.165 258.292 395.166 258.293 395.167 cv
258.578 395.427 258.928 395.676 259.322 395.89 cv
260.336 396.46 261.514 396.873 262.695 397.216 cv
265.094 397.859 267.566 398.259 269.979 398.444 cv
270.582 398.486 271.182 398.528 271.775 398.57 cv
272.359 398.591 272.939 398.611 273.514 398.631 cv
274.117 398.632 274.713 398.633 275.303 398.634 cv
275.471 398.631 li
275.471 402.257 li
275.238 402.258 li
.498039 .611765 .631373 rgb
f
275.442 396.283 mo
275.439 396.283 275.436 396.283 275.434 396.283 cv
275.436 396.283 275.44 396.283 275.442 396.283 cv
275.413 396.283 mo
275.41 396.283 275.407 396.283 275.404 396.283 cv
275.407 396.283 275.41 396.283 275.413 396.283 cv
275.384 396.283 mo
275.381 396.283 275.378 396.283 275.375 396.283 cv
275.378 396.283 275.381 396.283 275.384 396.283 cv
275.352 396.283 mo
275.351 396.283 275.349 396.283 275.347 396.283 cv
275.349 396.283 275.351 396.283 275.352 396.283 cv
259.57 380.428 mo
259.57 380.427 259.57 380.425 259.57 380.424 cv
259.57 380.425 259.57 380.427 259.57 380.428 cv
259.57 380.405 mo
259.57 380.398 259.57 380.39 259.57 380.382 cv
259.57 380.382 li
259.57 380.39 259.57 380.397 259.57 380.405 cv
259.571 380.282 mo
259.571 380.192 259.573 380.1 259.575 380.009 cv
259.573 380.1 259.571 380.192 259.571 380.282 cv
.898039 .898039 .898039 rgb
f
275.471 396.283 mo
275.471 396.283 li
275.461 396.283 275.452 396.283 275.442 396.283 cv
275.44 396.283 275.436 396.283 275.434 396.283 cv
275.427 396.283 275.42 396.283 275.413 396.283 cv
275.41 396.283 275.407 396.283 275.404 396.283 cv
275.397 396.283 275.391 396.283 275.384 396.283 cv
275.381 396.283 275.378 396.283 275.375 396.283 cv
275.368 396.283 275.36 396.283 275.352 396.283 cv
275.351 396.283 275.349 396.283 275.347 396.283 cv
270.187 396.243 265.625 393.734 262.748 389.892 cv
262.731 389.897 li
262.729 389.895 262.727 389.893 262.726 389.891 cv
262.382 389.431 262.063 388.953 261.771 388.457 cv
261.776 388.455 261.782 388.454 261.787 388.452 cv
261.543 388.04 261.32 387.617 261.113 387.182 cv
261.107 387.183 261.101 387.184 261.095 387.185 cv
261.095 387.184 261.094 387.183 261.094 387.182 cv
260.894 386.76 260.712 386.328 260.549 385.887 cv
260.556 385.886 260.562 385.885 260.568 385.884 cv
259.939 384.181 259.576 382.348 259.57 380.428 cv
259.57 380.427 259.57 380.425 259.57 380.424 cv
259.57 380.418 259.57 380.412 259.57 380.405 cv
259.57 380.397 259.57 380.39 259.57 380.382 cv
259.57 380.349 259.57 380.316 259.571 380.282 cv
259.571 380.192 259.573 380.1 259.575 380.009 cv
259.849 369.416 271.662 358.489 275.471 350.032 cv
275.471 396.283 li
275.471 396.283 li
270.881 366.426 mo
270.881 366.426 270.623 366.741 270.209 367.309 cv
269.801 367.88 269.201 368.692 268.603 369.741 cv
267.398 371.824 265.961 374.76 265.314 377.98 cv
265.184 378.787 265.084 379.604 265.076 380.415 cv
265.051 381.226 265.117 382.026 265.236 382.793 cv
265.377 383.556 265.563 384.288 265.834 384.948 cv
266.09 385.613 266.412 386.213 266.754 386.729 cv
267.078 387.263 267.467 387.68 267.801 388.053 cv
268.158 388.404 268.482 388.697 268.75 388.932 cv
269.32 389.36 269.647 389.605 269.647 389.605 cv
269.943 389.203 li
269.943 389.203 269.918 389.074 269.875 388.834 cv
269.816 388.614 269.771 388.258 269.67 387.897 cv
269.592 387.51 269.537 387.036 269.459 386.572 cv
269.416 386.082 269.354 385.592 269.361 385.08 cv
269.348 384.834 269.357 384.579 269.375 384.326 cv
269.379 384.082 269.398 383.832 269.432 383.584 cv
269.467 383.099 269.566 382.603 269.631 382.116 cv
269.689 381.864 269.723 381.615 269.76 381.362 cv
269.83 381.097 269.853 380.852 269.908 380.575 cv
270.012 380.045 270.104 379.473 270.23 378.89 cv
270.34 378.273 270.451 377.658 270.559 377.052 cv
270.682 376.426 270.777 375.771 270.877 375.118 cv
270.979 374.467 271.059 373.805 271.135 373.158 cv
271.207 372.51 271.26 371.868 271.305 371.26 cv
271.338 370.645 271.367 370.063 271.375 369.526 cv
271.391 368.996 271.361 368.492 271.359 368.084 cv
271.367 367.684 271.316 367.323 271.314 367.096 cv
271.293 366.855 271.281 366.727 271.281 366.727 cv
270.881 366.426 li
.611765 .741176 .258824 rgb
f
269.647 389.605 mo
269.647 389.605 269.32 389.36 268.75 388.932 cv
268.482 388.697 268.158 388.404 267.801 388.053 cv
267.467 387.68 267.078 387.263 266.754 386.729 cv
266.412 386.213 266.09 385.613 265.834 384.948 cv
265.563 384.288 265.377 383.556 265.236 382.793 cv
265.117 382.026 265.051 381.226 265.076 380.415 cv
265.084 379.604 265.184 378.787 265.314 377.98 cv
265.961 374.76 267.398 371.824 268.603 369.741 cv
269.201 368.692 269.801 367.88 270.209 367.309 cv
270.623 366.741 270.881 366.426 270.881 366.426 cv
271.281 366.727 li
271.281 366.727 271.293 366.855 271.314 367.096 cv
271.316 367.323 271.367 367.684 271.359 368.084 cv
271.361 368.492 271.391 368.996 271.375 369.526 cv
271.367 370.063 271.338 370.645 271.305 371.26 cv
271.26 371.868 271.207 372.51 271.135 373.158 cv
271.059 373.805 270.979 374.467 270.877 375.118 cv
270.777 375.771 270.682 376.426 270.559 377.052 cv
270.451 377.658 270.34 378.273 270.23 378.89 cv
270.104 379.473 270.012 380.045 269.908 380.575 cv
269.853 380.852 269.83 381.097 269.76 381.362 cv
269.723 381.615 269.689 381.864 269.631 382.116 cv
269.566 382.603 269.467 383.099 269.432 383.584 cv
269.398 383.832 269.379 384.082 269.375 384.326 cv
269.357 384.579 269.348 384.834 269.361 385.08 cv
269.354 385.592 269.416 386.082 269.459 386.572 cv
269.537 387.036 269.592 387.51 269.67 387.897 cv
269.771 388.258 269.816 388.614 269.875 388.834 cv
269.918 389.074 269.943 389.203 269.943 389.203 cv
269.647 389.605 li
.898039 .898039 .898039 rgb
f
159.76 375.996 mo
150.636 375.996 143.239 377.465 143.239 379.277 cv
143.239 406.041 li
176.279 406.041 li
176.279 379.277 li
176.279 377.465 168.883 375.996 159.76 375.996 cv
.329412 .329412 .329412 rgb
f
184.634 364.297 mo
171.958 364.297 161.682 366.338 161.682 368.856 cv
161.682 406.041 li
207.587 406.041 li
207.587 368.856 li
207.587 366.338 197.311 364.297 184.634 364.297 cv
.45098 .45098 .45098 rgb
f
191.788 402.797 mo
191.512 402.797 191.288 402.573 191.288 402.297 cv
191.288 361.934 li
191.288 361.382 190.839 360.933 190.288 360.933 cv
189.737 360.933 189.289 361.382 189.289 361.934 cv
189.289 362.73 li
189.289 363.007 189.065 363.23 188.789 363.23 cv
188.513 363.23 188.289 363.007 188.289 362.73 cv
188.289 361.934 li
188.289 360.83 189.186 359.933 190.288 359.933 cv
191.391 359.933 192.288 360.83 192.288 361.934 cv
192.288 402.297 li
192.288 402.573 192.064 402.797 191.788 402.797 cv
cp
.552941 .682353 .701961 rgb
f
199.092 403.582 mo
198.815 403.582 198.592 403.358 198.592 403.082 cv
198.592 362.717 li
198.592 362.166 198.143 361.718 197.592 361.718 cv
197.041 361.718 196.592 362.166 196.592 362.717 cv
196.592 363.516 li
196.592 363.792 196.368 364.016 196.092 364.016 cv
195.815 364.016 195.592 363.792 195.592 363.516 cv
195.592 362.717 li
195.592 361.614 196.489 360.718 197.592 360.718 cv
198.695 360.718 199.592 361.614 199.592 362.717 cv
199.592 403.082 li
199.592 403.358 199.368 403.582 199.092 403.582 cv
cp
f
199.092 366.881 mo
199.039 366.878 li
191.735 366.095 li
191.46 366.065 191.262 365.819 191.291 365.544 cv
191.32 365.271 191.563 365.07 191.841 365.101 cv
199.145 365.884 li
199.419 365.913 199.618 366.159 199.589 366.435 cv
199.562 366.69 199.345 366.881 199.092 366.881 cv
cp
f
199.092 370.348 mo
199.039 370.345 li
191.735 369.562 li
191.46 369.532 191.262 369.286 191.291 369.011 cv
191.32 368.737 191.563 368.535 191.841 368.567 cv
199.145 369.351 li
199.419 369.38 199.618 369.626 199.589 369.901 cv
199.562 370.157 199.345 370.348 199.092 370.348 cv
cp
f
199.092 373.814 mo
199.039 373.812 li
191.735 373.027 li
191.46 372.998 191.261 372.752 191.291 372.477 cv
191.32 372.203 191.563 372.001 191.841 372.033 cv
199.145 372.817 li
199.42 372.847 199.619 373.094 199.589 373.368 cv
199.562 373.624 199.345 373.814 199.092 373.814 cv
cp
f
199.092 377.28 mo
199.039 377.277 li
191.735 376.493 li
191.46 376.464 191.261 376.217 191.291 375.942 cv
191.32 375.669 191.563 375.466 191.841 375.499 cv
199.145 376.283 li
199.42 376.313 199.619 376.559 199.589 376.834 cv
199.562 377.09 199.345 377.28 199.092 377.28 cv
cp
f
199.092 380.746 mo
199.039 380.743 li
191.735 379.96 li
191.46 379.931 191.262 379.685 191.291 379.409 cv
191.32 379.135 191.563 378.932 191.841 378.966 cv
199.145 379.749 li
199.419 379.778 199.618 380.024 199.589 380.3 cv
199.562 380.556 199.345 380.746 199.092 380.746 cv
cp
f
199.092 384.213 mo
199.039 384.21 li
191.735 383.427 li
191.46 383.397 191.262 383.151 191.291 382.876 cv
191.32 382.603 191.563 382.396 191.841 382.433 cv
199.145 383.216 li
199.419 383.245 199.618 383.491 199.589 383.767 cv
199.562 384.022 199.345 384.213 199.092 384.213 cv
cp
f
199.092 387.68 mo
199.039 387.677 li
191.735 386.894 li
191.46 386.864 191.262 386.618 191.291 386.343 cv
191.32 386.069 191.563 385.869 191.841 385.899 cv
199.145 386.683 li
199.419 386.712 199.618 386.958 199.589 387.233 cv
199.562 387.489 199.345 387.68 199.092 387.68 cv
cp
f
199.092 391.146 mo
199.039 391.144 li
191.735 390.359 li
191.46 390.33 191.261 390.084 191.291 389.809 cv
191.32 389.535 191.563 389.334 191.841 389.365 cv
199.145 390.149 li
199.42 390.179 199.619 390.426 199.589 390.7 cv
199.562 390.956 199.345 391.146 199.092 391.146 cv
cp
f
199.092 394.612 mo
199.039 394.609 li
191.735 393.825 li
191.46 393.796 191.261 393.549 191.291 393.274 cv
191.32 393.001 191.563 392.8 191.841 392.831 cv
199.145 393.615 li
199.42 393.645 199.619 393.891 199.589 394.166 cv
199.562 394.422 199.345 394.612 199.092 394.612 cv
cp
f
199.092 398.078 mo
199.039 398.075 li
191.735 397.29 li
191.46 397.261 191.261 397.014 191.291 396.739 cv
191.32 396.466 191.563 396.265 191.841 396.296 cv
199.145 397.081 li
199.42 397.11 199.619 397.357 199.589 397.632 cv
199.562 397.888 199.345 398.078 199.092 398.078 cv
cp
f
199.092 401.545 mo
199.039 401.542 li
191.735 400.757 li
191.46 400.728 191.261 400.48 191.291 400.206 cv
191.32 399.932 191.563 399.73 191.841 399.763 cv
199.145 400.548 li
199.42 400.577 199.619 400.824 199.589 401.099 cv
199.562 401.354 199.345 401.545 199.092 401.545 cv
cp
f
184.634 406.041 mo
161.682 406.041 li
161.682 368.856 li
161.682 366.338 171.958 364.297 184.634 364.297 cv
184.634 406.041 li
.403922 .403922 .403922 rgb
f
140.413 407.852 mo
209.587 407.852 li
209.587 406.041 li
140.413 406.041 li
140.413 407.852 li
.329412 .329412 .329412 rgb
f
159.76 406.041 mo
143.239 406.041 li
143.239 379.277 li
143.239 377.465 150.636 375.996 159.76 375.996 cv
159.76 406.041 li
.294118 .294118 .294118 rgb
f
50.3867 364.063 mo
48.5615 370.176 li
48.5615 351.758 li
47.5616 351.758 li
47.5616 371.578 li
46.649 371.803 45.9702 372.623 45.9727 373.605 cv
45.9751 374.583 46.6528 375.397 47.5616 375.622 cv
47.5616 406.041 li
48.5615 406.041 li
48.5615 375.622 li
49.4741 375.397 50.1528 374.576 50.1504 373.596 cv
50.1484 372.831 49.7315 372.17 49.1176 371.807 cv
51.3448 364.348 li
50.3867 364.063 li
.552941 .682353 .701961 rgb
f
80.2607 381.719 mo
72.4805 381.719 li
73.2759 377.771 li
74.2509 377.928 75.2867 378.02 76.371 378.02 cv
77.4551 378.02 78.4903 377.928 79.4653 377.771 cv
80.2607 381.719 li
69.1982 398.01 mo
70.4361 391.865 li
82.3051 391.865 li
83.543 398.01 li
69.1982 398.01 li
81.9018 389.865 mo
70.8393 389.865 li
72.0776 383.719 li
80.6636 383.719 li
81.9018 389.865 li
104.492 382.824 mo
100.282 382.824 li
100.282 376.23 li
100.282 375.838 99.9629 375.518 99.5684 375.518 cv
99.3072 375.518 li
82.0225 365.539 li
81.5381 362.996 li
81.4639 362.607 81.085 362.295 80.6904 362.295 cv
76.4043 362.295 li
58.6963 352.071 li
56.1963 356.401 li
71.3696 365.161 li
70.5415 369.508 li
69.6504 369.823 68.8681 370.206 68.2431 370.647 cv
67.9737 370.836 67.7715 371.281 67.7715 371.611 cv
67.7715 374.992 li
67.7715 375.322 67.9737 375.766 68.2431 375.955 cv
69.044 376.519 70.102 376.988 71.3227 377.341 cv
65.5791 405.844 li
65.4706 406.385 65.8213 406.912 66.3623 407.021 cv
66.9043 407.13 67.4316 406.779 67.5401 406.238 cv
68.7949 400.01 li
83.9463 400.01 li
85.2011 406.238 li
85.2969 406.713 85.7148 407.041 86.1806 407.041 cv
86.3799 407.021 li
86.9209 406.912 87.2714 406.385 87.1621 405.844 cv
81.4195 377.341 li
82.6396 376.988 83.6973 376.519 84.498 375.955 cv
84.7676 375.766 84.9697 375.322 84.9697 374.992 cv
84.9697 373.014 li
96.0371 379.403 li
96.0371 382.824 li
92.2178 382.824 li
92.2178 387.043 li
92.4854 387.043 li
92.4854 406.041 li
93.4854 406.041 li
93.4854 387.043 li
103.225 387.043 li
103.225 406.041 li
104.225 406.041 li
104.225 387.043 li
104.492 387.043 li
104.492 382.824 li
f
75.0283 366.1 mo
75.0283 365.199 75.7588 364.467 76.6601 364.467 cv
77.5616 364.467 78.292 365.199 78.292 366.1 cv
78.292 367 77.5616 367.73 76.6601 367.73 cv
75.7588 367.73 75.0283 367 75.0283 366.1 cv
1 1 1 rgb
f
59.4072 351.311 mo
51.9786 347.022 li
52.9785 345.29 li
60.4072 349.579 li
59.4072 351.311 li
.901961 .443137 .443137 rgb
f
54.9902 358.962 mo
47.5616 354.673 li
48.5615 352.94 li
55.9902 357.229 li
54.9902 358.962 li
f
60.4365 344.147 mo
56.2597 344.147 52.3721 346.387 50.29 349.992 cv
47.8545 354.21 48.2968 359.484 51.3624 363.243 cv
62.3027 344.296 li
61.6875 344.197 61.0615 344.147 60.4365 344.147 cv
51.4082 365.473 mo
50.917 365.473 50.4571 365.257 50.1133 364.863 cv
46.2529 360.443 45.6289 354.065 48.5576 348.992 cv
50.9961 344.77 55.5479 342.146 60.4365 342.146 cv
61.3222 342.146 62.2109 342.233 63.0781 342.403 cv
63.6484 342.518 64.1035 342.867 64.3291 343.364 cv
64.5576 343.871 64.5185 344.458 64.2207 344.975 cv
52.9082 364.566 li
52.5801 365.135 52.0196 365.473 51.4082 365.473 cv
f
97.3799 377.961 mo
97.3799 377.531 97.7295 377.182 98.1592 377.182 cv
98.5898 377.182 98.9395 377.531 98.9395 377.961 cv
98.9395 378.393 98.5898 378.742 98.1592 378.742 cv
97.7295 378.742 97.3799 378.393 97.3799 377.961 cv
cp
1 1 1 rgb
f
65.5791 405.844 mo
71.3223 377.341 li
70.8077 377.192 70.3222 377.023 69.8727 376.834 cv
70.3224 377.023 70.8081 377.192 71.3227 377.341 cv
65.5791 405.844 li
69.1982 398.01 mo
69.1982 398.01 li
70.4361 391.865 li
76.6601 391.865 li
70.4365 391.865 li
69.1982 398.01 li
70.8398 389.865 mo
70.8393 389.865 li
72.0776 383.719 li
76.6601 383.719 li
72.0781 383.719 li
70.8398 389.865 li
72.4815 381.719 mo
72.4805 381.719 li
73.2759 377.771 li
73.276 377.771 73.2762 377.772 73.2764 377.772 cv
72.4815 381.719 li
70.0287 369.702 mo
70.195 369.634 70.3659 369.57 70.541 369.508 cv
71.3691 365.161 li
67.4781 362.914 li
71.3696 365.161 li
70.5415 369.508 li
70.3662 369.57 70.1952 369.634 70.0287 369.702 cv
51.4082 365.473 mo
51.4082 365.473 li
51.4082 365.473 li
52.0196 365.473 52.5801 365.135 52.9082 364.566 cv
57.2661 357.019 li
57.2663 357.019 li
52.9082 364.566 li
52.5801 365.135 52.0196 365.473 51.4082 365.473 cv
76.4043 362.295 mo
59.7663 352.689 li
59.7666 352.688 li
76.4043 362.295 li
.898039 .898039 .898039 rgb
f
66.5601 407.041 mo
66.4949 407.041 66.4287 407.035 66.3623 407.021 cv
65.8868 406.925 65.5584 406.506 65.5594 406.039 cv
65.5596 405.975 65.566 405.909 65.5791 405.844 cv
65.5791 405.844 li
71.3227 377.341 li
70.8081 377.192 70.3224 377.023 69.8727 376.834 cv
69.2559 376.576 68.7069 376.281 68.2431 375.955 cv
68.2431 375.955 li
67.9737 375.766 67.7715 375.322 67.7715 374.992 cv
67.7715 371.611 li
67.7715 371.281 67.9737 370.836 68.2431 370.647 cv
68.7453 370.293 69.3489 369.976 70.0287 369.702 cv
70.1952 369.634 70.3662 369.57 70.5415 369.508 cv
71.3696 365.161 li
67.4781 362.914 li
57.2666 357.019 li
57.2663 357.019 li
57.2661 357.019 li
59.7663 352.689 li
76.4043 362.295 li
76.6601 362.295 li
76.6601 364.467 li
76.6601 364.467 li
75.7588 364.467 75.0283 365.199 75.0283 366.1 cv
75.0283 367 75.7588 367.73 76.6601 367.73 cv
76.6601 367.73 li
76.6601 378.008 li
76.5624 378.009 76.4697 378.02 76.371 378.02 cv
76.371 378.02 li
76.371 378.02 li
75.2871 378.02 74.2509 377.928 73.2764 377.771 cv
73.2764 377.771 li
73.2762 377.772 73.276 377.771 73.2759 377.771 cv
72.4805 381.719 li
72.4815 381.719 li
76.6601 381.719 li
76.6601 383.719 li
72.0776 383.719 li
70.8393 389.865 li
70.8398 389.865 li
76.6601 389.865 li
76.6601 391.865 li
70.4361 391.865 li
69.1982 398.01 li
76.6601 398.01 li
76.6601 400.01 li
68.7949 400.01 li
67.5401 406.238 li
67.4449 406.713 67.0272 407.041 66.5601 407.041 cv
.498039 .611765 .631373 rgb
f
48.5615 406.041 mo
47.5616 406.041 li
48.5615 406.041 li
48.5615 375.622 li
49.2673 375.448 49.8332 374.917 50.0524 374.232 cv
49.8334 374.918 49.2679 375.448 48.5615 375.622 cv
48.5615 406.041 li
47.5616 375.622 mo
46.6523 375.397 45.9746 374.583 45.9727 373.605 cv
45.9698 372.623 46.6484 371.803 47.5616 371.578 cv
46.649 371.803 45.9702 372.623 45.9727 373.605 cv
45.9751 374.583 46.6528 375.397 47.5616 375.622 cv
47.5616 375.622 li
50.1474 373.488 mo
50.1301 373.167 50.0396 372.867 49.8925 372.601 cv
50.0395 372.867 50.1301 373.167 50.1474 373.488 cv
49.1184 371.807 mo
49.1181 371.807 49.1179 371.807 49.1176 371.807 cv
51.0225 365.427 li
51.0225 365.427 51.0227 365.427 51.0227 365.427 cv
49.1184 371.807 li
.898039 .898039 .898039 rgb
f
48.5615 406.041 mo
47.5616 406.041 li
47.5616 375.622 li
47.5616 375.622 li
46.6528 375.397 45.9751 374.583 45.9727 373.605 cv
45.9702 372.623 46.649 371.803 47.5616 371.578 cv
47.5616 371.578 li
47.5616 360.556 li
47.8307 361.291 48.1645 362.007 48.5615 362.694 cv
48.5615 370.176 li
48.5615 370.178 li
50.1394 364.893 li
50.3868 365.165 50.6911 365.347 51.0225 365.427 cv
49.1176 371.807 li
49.1179 371.807 49.1181 371.807 49.1184 371.807 cv
49.1182 371.808 li
49.4416 371.999 49.7104 372.273 49.8925 372.601 cv
50.0396 372.867 50.1301 373.167 50.1474 373.488 cv
50.1493 373.524 50.1503 373.56 50.1504 373.596 cv
50.1504 373.596 li
50.1509 373.818 50.1165 374.032 50.0524 374.232 cv
49.8332 374.917 49.2673 375.448 48.5615 375.622 cv
48.5615 406.041 li
.498039 .611765 .631373 rgb
f
50.1133 364.863 mo
50.1133 364.863 li
50.1075 364.857 50.1017 364.85 50.096 364.843 cv
50.1018 364.85 50.1074 364.857 50.1133 364.863 cv
50.1133 364.863 li
51.3624 363.243 mo
51.3556 363.235 51.3492 363.227 51.3425 363.219 cv
51.3491 363.227 51.3557 363.235 51.3624 363.243 cv
51.3624 363.243 mo
54.123 358.462 li
48.7413 355.354 li
48.6296 358.093 49.4726 360.844 51.2339 363.083 cv
49.4715 360.843 48.6209 358.09 48.7343 355.35 cv
54.1234 358.461 li
51.3624 363.243 li
51.3357 363.21 mo
51.3314 363.205 51.3267 363.199 51.3224 363.194 cv
51.3268 363.199 51.3313 363.205 51.3357 363.21 cv
51.315 363.185 mo
51.3108 363.179 51.3062 363.174 51.3019 363.168 cv
51.3064 363.174 51.3106 363.179 51.315 363.185 cv
51.295 363.16 mo
51.2898 363.153 51.2848 363.147 51.2796 363.141 cv
51.2847 363.147 51.2899 363.153 51.295 363.16 cv
51.2755 363.135 mo
51.2617 363.118 51.2477 363.1 51.234 363.083 cv
51.2478 363.1 51.2617 363.118 51.2755 363.135 cv
49.0264 353.209 mo
49.023 353.207 li
49.2789 352.098 49.7 351.014 50.29 349.992 cv
50.8762 348.977 51.6054 348.07 52.444 347.291 cv
52.4608 347.301 li
51.6201 348.081 50.8779 348.976 50.29 349.992 cv
49.7002 351.015 49.2823 352.1 49.0264 353.209 cv
58.5407 350.811 mo
55.4155 349.007 li
58.5407 350.811 li
58.5407 350.811 li
48.5294 349.041 mo
48.5318 349.037 48.5341 349.033 48.5364 349.029 cv
48.5341 349.033 48.5317 349.037 48.5294 349.041 cv
48.5433 349.017 mo
48.5481 349.009 48.5528 349 48.5576 348.992 cv
48.5528 349.001 48.5481 349.009 48.5433 349.017 cv
54.179 345.983 mo
54.1579 345.971 li
55.9922 344.81 58.1452 344.157 60.3832 344.147 cv
58.1497 344.157 56.0111 344.825 54.179 345.983 cv
62.3027 344.296 mo
61.6875 344.197 61.0615 344.147 60.4365 344.147 cv
60.4279 344.147 60.4192 344.147 60.4105 344.147 cv
60.4192 344.147 60.4279 344.147 60.4365 344.147 cv
61.0615 344.147 61.6875 344.197 62.3027 344.296 cv
62.3027 344.296 li
60.3839 344.147 mo
60.3918 344.147 60.3998 344.147 60.4077 344.147 cv
60.3997 344.147 60.3919 344.147 60.3839 344.147 cv
.898039 .898039 .898039 rgb
f
76.6601 367.73 mo
75.7588 367.73 75.0283 367 75.0283 366.1 cv
75.0283 365.199 75.7588 364.467 76.6601 364.467 cv
76.6601 364.467 li
76.6601 367.73 li
76.6601 367.73 li
f
58.5407 350.811 mo
55.4155 349.007 li
52.4609 347.301 li
52.4609 347.301 52.4609 347.301 52.4608 347.301 cv
52.444 347.291 li
52.9743 346.798 53.5487 346.357 54.1579 345.971 cv
54.179 345.983 li
54.1789 345.983 54.1788 345.983 54.1787 345.983 cv
59.5411 349.079 li
58.5407 350.811 li
.811765 .396078 .396078 rgb
f
54.1234 358.461 mo
48.7343 355.35 li
48.764 354.632 48.8599 353.914 49.023 353.207 cv
49.0264 353.209 li
49.0264 353.209 49.0264 353.209 49.0264 353.209 cv
55.1236 356.729 li
54.1234 358.461 li
f
51.4082 365.473 mo
51.4082 365.473 li
51.2773 365.473 51.1484 365.455 51.0234 365.425 cv
51.0227 365.427 li
51.0227 365.427 51.0225 365.427 51.0225 365.427 cv
50.6911 365.347 50.3868 365.165 50.1394 364.893 cv
50.1406 364.889 li
50.1133 364.863 li
50.1133 364.863 li
50.1074 364.857 50.1018 364.85 50.096 364.843 cv
49.5048 364.164 48.9987 363.433 48.5615 362.673 cv
48.5615 362.694 li
48.5615 362.694 li
48.1645 362.007 47.8307 361.291 47.5616 360.556 cv
47.5616 360.531 li
46.2074 356.816 46.4887 352.611 48.5294 349.041 cv
48.5317 349.037 48.5341 349.033 48.5364 349.029 cv
48.5387 349.025 48.541 349.021 48.5433 349.017 cv
48.5481 349.009 48.5528 349.001 48.5576 348.992 cv
48.5576 348.992 li
50.9961 344.77 55.5479 342.146 60.4365 342.146 cv
61.3222 342.146 62.2109 342.233 63.0781 342.403 cv
63.6484 342.518 64.1035 342.867 64.3291 343.364 cv
64.4273 343.582 64.4761 343.815 64.4761 344.05 cv
64.4762 344.362 64.3905 344.68 64.2207 344.975 cv
64.2207 344.975 li
59.7666 352.688 li
59.7663 352.689 li
57.2661 357.019 li
52.9082 364.566 li
52.5801 365.135 52.0196 365.473 51.4082 365.473 cv
51.3624 363.243 mo
51.3624 363.243 li
54.1234 358.461 li
55.1236 356.729 li
55.1241 356.729 li
58.541 350.812 li
58.5407 350.811 li
58.5407 350.811 li
59.5409 349.079 li
59.5411 349.079 li
62.3027 344.296 li
62.3027 344.296 li
61.6875 344.197 61.0615 344.147 60.4365 344.147 cv
60.4279 344.147 60.4192 344.147 60.4105 344.147 cv
60.4096 344.147 60.4087 344.147 60.4077 344.147 cv
60.3998 344.147 60.3918 344.147 60.3839 344.147 cv
60.3838 344.147 60.3834 344.147 60.3832 344.147 cv
58.1452 344.157 55.9922 344.81 54.1579 345.971 cv
53.5487 346.357 52.9743 346.798 52.444 347.291 cv
51.6054 348.07 50.8762 348.977 50.29 349.992 cv
49.7 351.014 49.2789 352.098 49.023 353.207 cv
48.8599 353.914 48.764 354.632 48.7343 355.35 cv
48.6209 358.09 49.4715 360.843 51.2339 363.083 cv
51.234 363.083 li
51.2477 363.1 51.2617 363.118 51.2755 363.135 cv
51.277 363.137 51.2782 363.139 51.2796 363.141 cv
51.2848 363.147 51.2898 363.153 51.295 363.16 cv
51.2972 363.163 51.2997 363.166 51.3019 363.168 cv
51.3062 363.174 51.3108 363.179 51.315 363.185 cv
51.3175 363.188 51.32 363.191 51.3224 363.194 cv
51.3267 363.199 51.3314 363.205 51.3357 363.21 cv
51.3379 363.213 51.3402 363.216 51.3425 363.219 cv
51.3492 363.227 51.3556 363.235 51.3624 363.243 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.3
%%For: (A) ()
%%Title: (1402.i016.034.P.m004.c22.energy icons flat.eps)
%%CreationDate: 2/18/2014 12:37 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!%*.o'lPP50s0Li[BZkiTprF&e]e0<!:tm%*8Mog!&H7pVZH<Ir":4Vp>u8N&i4XmbA\bkgS?f?!UZ9="c+@p;Yp#X*_/*
%qeNTI\9;<62=(DD]*s2dmsc)g*k1ipiPj%k]uIPqF@Wrq?6^9sbIr(;0O-2oJ(2)aBCur59tg$KBX`><(,jq?`Yj/&g9D0hX`dP.
%%6F/Z_'s+%1_8j2=$u`i3l%?omN1e<!43i,7PGM>)k/MID/ZFA!gN[er3.!-["b>AIFRP)5Ma;UV&b?'h@KI*rWRDP>0u6#7JLGf
%&ffNDm1GC^Lg%WUUUp]ridTiT+!F#Jb(5+cqF;5!nDA=@"NZ(YFo6a=/H$7]C_Y*F`T-=Q<cAJ")`V$;ZJjDipcqUaJ<33g,Z=+S
%kk*X&;*aGYCK_;cMZ6NQ+reE<nA8p0d569TYj<<4d<>r#mhQp61LRclU1T8Ud8C5,>JZr4KuZKm)%=H@Q3O,_f)K.>//ot=$1Qf]
%*=Q7s>9b8]6SP,Kj&rQ'ZiS_@o4km4bH##CrtR*ql@Y:."AIKaO)ZaP$_A\ppO(bqeUI_CH+FjR76fuWoNp!7%F#$1Fo6ht1i<$3
%"N$UJ\H#5P)Qp(''0F"UA]HDUcn9:sMa?[)eQp^RX0CsdNaU<&6)tmnW,!)0rXY]!oTXiRq6-/7i&qt^>rd&`3%R9m\6UUKgW-"s
%]$59!K*sBO^MX+FG@:ldHRIg^d9l*]d)ELJE$<$Uo,`;+l=.g6rQfQaSThTu*lBY?#JG,,VgI4rmsc*Gc/);oGTAV1]`BZuZgcu<
%/,\LH@?G_BiF#K#5TfLiYYDCZlJK:J6bmaS'_o0,/c?F`4N9VWHk4sG,Y$8a6asYaK6FH%F<!X4h.GV?IF-<hq/3h$XUbd2Mm2YR
%lT>$A%O?sYO'oN0"kMo?Om"$)P8N;L#0O,i%94L@JrC/Mc!f6ds"uNV#3P/js$u7Nf5;$Z@>?<Xr&Ns,7_tbpU<D"*N/+<bK3k`%
%&V:sX?U]l8)"BO`1J$.XCB4.koQFQD\(e$K6+qd%C1R"0nb[9u$/an)U'=IXCW-"O_SOZ-9[btaM7/j)&:P;$osnr5s/_8"V]]<+
%#5(84\6puLnfG9OTP=l3j45W7euREeUOcIu5HXYlN%M)&bG\eF&/9et!1&s)<"6FY^YF=P%Hc@M2>p/BF(#g_p@_YV3N-ro\^G5c
%<ius^>k"f%_W"pnFr,V<$q)#@NlIgo,h<Sb/.DgVA=LSQX5+`u?#!d^<d$_FLVLe-N.)o;nB47+dh_?e<q`69mRb(=pNh0;>5d,h
%N_UrYlde/Q$76nL/PS)XVa9Y0FHckHg$l#gab.fE3UlfZ\l&6b",.guLI,_<Ygi*5edqG3;/%n/i.?rk$CMr<V2C1W0i#b7]>u#7
%JR#;L;Ee'W9dYn?K-P?O\rGWWlL7jkOsTJm8eC:]p.$^]Sen.XUitt`k#q%QlRNW'7ErO`Z(q.LW"+Dt@p%;E![lCpWfTSK]GS1F
%0H@RnBJeE3WmEIQ`hbcb]P*8hhfCNFg,Q"7R5Ap^]STuH,_L`-KSD8No>uJ./$n+P%iW8B4"E<*>rRh=lWtU09q7l.7'@[@lJQF<
%5UC/+h3+G]S[?Aq$Y*H;IN_3t8?Q*UmIH`Y6,q'd'3M4:a+^q3.lVUlb[%dD6=Eo"3G\'*rB"8pj$=^P_tN\.CH-P#B#9tZ&S7C-
%EmrsijcH0W?Z,;Tc$d.;.gb@PgqVL.Z`]KFQOB4Ln`?'rCZ*J!6Xooj\]s&Zd,%!h2g^&Rl3"V#oQOF1PEU>&'RpT+F#[o8K't;6
%4jE*LW6MLQYG:f9P,A(I:Z*_)JF32X3,I-WS!1+HDS%n6]/B29p#["3ofP4pOm:1A'^PS'a4*bchXU+i(nIuPApCMo+P^RLQab@g
%`,*-l?%VkCFL'd:dka5BH")E#h,WuMN_G8fG]6o+"T+1)5(mCik9Al_d(nH/(ZS*aAeq.l3G`S$HJGY6b.[4^<:Atc.fIJSiMYd-
%E9j]VY8^^R_<@(#FZAl6<"9O8]/Qg,\^6^aIi+^P>\O$g#9*WSEZ8MtfBSB2q1:q+^Mb%f@]S(5h(Y$^:N"--od]Uf*<ob(A94.p
%Ja$dS=n?nkGKMXW&g2t'G*[omcE<8:Ei?FQ8HFni%b=Sub\(N/*6dYRLIla1E6tdlls?;Oo(o":3pd'F4NPa2I_:?u1A/5`h&=Zu
%ppkGC.H4-mDS8`>pG.?].Mq_[0K9B#Ou$h>jPOY&F$5!</EU)!^WI>Ak?1!4Yds<U+$0]cdiR)a[3SZle1Bu,Q@$==jras/QfF`V
%IW+7-gtTm`$CgaCer)Pk3tLW$ei;!Ub(a!`041'iZ=XJ;r`q<U3QK"\RToTh2s?lCM7ss%C'rdY4B_Z)0fETiA1kNlFK<W>f0?kk
%f:h-Qo!M#E]`peR%l_be#+sj*fP>^dr[<Pm1A12fQdD;s]me4!']e2Y)(e^IB+)sXC3#>>pj%FBX'r>+#qiP0WH6uOb^7CiMD&%9
%#G%&OqbM]r8=lq<1D4pc`sGrF[,10SmJW\Pmpb?<:eQ4W<VVi"*3NQg^[rmTXDKGh@D?)d"Se#"Z[.*J<DKG%h;pV2Rgi0V3n1?k
%hIA%2Iahjl?ApH6R)arF%B!@A:VWpS_1&^+b2N*&c4^i>/`2S/GWShW&ou+%C#9qVDT'h2d?5Ihp:GMH[-b<^SB4=BX`cd5`_QC<
%(%EQgWQ)8rP?]&&[(@eelKph%5B<D!lo1pTE\],R]IK-M!SQ<Gj&BqT>PRVl%]#hr=+sY`f?JqGUG;1qcT1?P+f.$0.^[p3DG\Z!
%$(t.62t/QJ*,%c8Y6l^?a+e?k.J^oaXpU..8loRe3V[Zas2Eb0Dgu>6Q,CN,jmd89;f+c?%sjd/HBjq)WFo)s[Q:t[f@',V_)3Xb
%f!lK`.,I'"AL\\,4PVc/iJVt.au%(M)qQ5H-'uuLp:Yq"1Jt=FbD1B:d**J_k,BO`cUGA_5._<8-ojuE)9G=X(0W)Prh'0pPWW/[
%Ajl,N(M01r1*nF5>32J8Y%95Cr\)>]a^t9A]rIXdU.h,*CKuX"P[&6Gg3:S[bsfal@C*E.J)r-(/EYICOrB\>E*'T9ZX#[H="`HZ
%-"a>a`U#.oDk4jIcJVmV0.cK1<i?eUi@b\8cD(<\'.fW<.QQ+_3;2gDQuf*Uol=&Ek&TiEEm:#q[2^HZbI+lcS'/4-ODA&&JBZ9G
%\[aWC@P'hlSP-B$<4eZ"Ri?-a@r3jKk#1TX82^'.kjTCd=j3UZb<^`P4jBLr"2O^j])4I,kM%Bi$0KuU^5\<1BXdY9d,&WkIiMdM
%gR,EMY]D)]nLEtgb3)^W?56N4[tSi6Bb5B4'?aq1>4InZ[i$0p\s"5mN+GEMKDMO0X&O`"p8UrYf;1JlBl.1Ck1=*c:$^49qcK9K
%@`2lY/rcGm5g2K%RYu!@frn#C(\BRP/*Jnh="D)$C[a.X\H]esr14iB=6G->VW,e+R79^BT!4f0j8OA<<VR+"lVl#Ds5l0;.:/=>
%h_c&pp^<*cB&bjeqX9dF3rRnH>h9eP8K3&3"[Q:#2j7,^7uZmf%tgEY+b/U0n"!06;i9OA?(pMQ",BII9JIO2l!B-:GfF^LB15iq
%]lpIf>,0PA0Zp.^Al)._2Z78\7pa*EKtg;QcJh..-.d<hdr0]aD^s%^Y=!HUq>"q;_tj+H-=u?&^[q'S?Xdp!c[U!V=3]'@Ih,`7
%nm.FSq<tDTs,sX@-btJFQIG>lTD;78H-`i:o^alrq3g\O76G2]bdZ7d4s&m4IUhZ^^lP/EmeqDc,43t'km/1Y2mCqH%]#70>aa-+
%GPgai/GL9%4iLM0*\I,ti;%Kd8;G\2=(_KnOQPT>0t:/-(G4Kk\u#5P/)/k-n)*]Km6!]nO-%U2AFg)[4@1sd&[H3CFDidAIJ1Qh
%m(9?i%"b.a#.@O9#.gjXdTcV*lEu8lg)t(3o`k*W`,k<kr9Pn*mc919#&X->c9RB;p<)HNQNO/^s&tu`B[Y(]Z0`iA??)@0dNUo[
%L=5-TF&ORTE7BPCRn:$n@<A'8/9@/+Wa5=,5A5Sd3;@>L#Hm8Y1C)M<bV'P597J_IgIf\5l`WL^)OEcEqICXlR0R'\JX:Z?AKH)a
%#@?PDQ[.NN6;</B((S!5-k+(%k(/jJp-@Bqq!k\TZ7le3bl^M'SB/E`G\0!gF=A;\l6?qn[,/ao\Ol\Q6Uk-+R:a(`7%OG\o3rB^
%J]"i2S&eM^A(li8>dp%QY&1S'r-?c?Y92N$d;HWT1#>)qN`.LUk/q[)em[9tj)q<=P[@21p#8[?=u2rnk7sAe<s>HoXR!Oqd_,G)
%<O$7PkA^I.hX(2d/Y:ge(FdKI!k9l7flL+$RpTg#)O"RkYI!D:.'bj)lGR]rrjk/Ab(E'Af2eluFDm5>QX7Acj'aXYh(T,'3CWM?
%mJ.QOj1itHpcGO'4e7.<>FFAn$o0o&1AB.-_*c['D;eq6rNk%uQ1$!P?'W.Qbrj(;#5Q]?_M2-GcE_?N5UVUUG_P9f4s]\9KNDgt
%7WFCQ:dTILa8"9*0q<M/@toB"R?(j&f-$*9#D[RE@qn0_=kiQ>36"(@0l8EsO(6Do(c)fF5S%^2c]sSKpWp!pIs*rQ2b*K6o3NqC
%)Dcke+^r7UY6:]AFU0TVIW8!.'pU?&+14Rt8KlEIf8T),>4#QrVdlj4$9>5UUR9;'I2Gog_7+F2D<15-'()TB$XKg59&4LM"j"OK
%\_'\p4JQA8?>(`'j'I#)Tm:dPH$,^(Fe2t=*5hFtcBH;WR/P`$=u"'%8>BK4YG=,=`o?N]f?'e(WEE!6j7`[>/lO[lG6NF*`e1%+
%)gHijK7^YHe7j-rk!`):XH.A?]CiIr]]Odn4AP!\9)-P_bfh>[j[!M$e%P=F0`B+"Obu>mF>JB3@^>S-KcEK!?"B8Gg2Xte%q9>+
%2i<TrG`C_83ARR_G8P\pbP_R=c+UZ;)PO]#2tuIshV?nURsT4kfUL&m1X<\Elep#n_t:0Kma(!n)_lR"VSShHYu#LcDMf<Km`td[
%#gM29\N?/("1#+o4-p>CR;qDUokWL4j[3MR?+Mu.?Lq](c_DrOrnMYckAoEiT(]S+D@^:=n-.rs-)Tgbq97HUkacohI[9'1][5iS
%5fUH%`YB3/\=-fI)pD<2MKnfm?#Q78'c>Hdf,Lj>O4@L_cf+(X4&;)E[(@eobk^8he;NO\Gg+l"WZpKJj=V?K"hsQBMnPuooj#+:
%mGBEa2"`L&r>SF`fmYS-s-ntr0&-@fc#okr/KOq"5#2ro3$gf!.f=>%VR><[k;(_"Xf!!d_4p$tQemqPj4krq\16icAH!"XKB%8&
%aLc-Uk&V(,T+QOe9.*H'2BZ.H*=>+n3NC^7D>7>\!3suGas<gO6^lO)fBS<9S^W<FYLn6&Zq*[<nf>e(rQ^7]0W5;#5Ej[RFglqa
%qK/b1l(oH,SXJ!F*%%[Rr":o&qNEGI08H]pZebJYhs1K56887HQAqWL9f0>9rd?]P^=^=ZD%p:HH1`W<Z.CW#r>Y?mVk;f-_<uen
%BlYW;ZTS/.G(o:J#DYn6qCrtkl,I.0$(MhBk#?[2B9V&fE6tdloNn0.d/'Cm3pd'\*b:We*LZqlDYj$9]/A<E[jJ\JF6,C#!c>([
%VdgaE>rh%MLM9hMq;p+20@#6S2:mi>5r[(u"F:"!i3XCc^IQAkc?fE>=j/-]>f.IDfBZH,CL*(d3Z"0sYg1Ke-3m5\F(rB^LsL<S
%U.u`?b>Hl!-=jVmd)8.O5D>2WZ)&Q60VWAC$fYX\Q.@j@4Zk)<D5KJ.G&Qm:]Y-5Z@cD]:8(Y.,`q@&52Y/d]QENYmM<,_cpXC"G
%pjH#:.m`@;^Yf=\$l>>AKO$D,XENtdli,2dR=R^<4A%l7%XqW9j(iX21';;Jocc]Jo+::_g=,=Rjgae?CV+9B%I38T=HV4l*X@=4
%CN,!tO(hhW;>hohlHVe>dO=/^K+l,*o7e>sXfkiq<6*h7hFrfhlbm=&\"FJ=4.C*5g$G`l9Y^SDD"C8_6cd6_/&;ICH?XV(k9Yg2
%jS?u%2,eFh?+]=@V(]=%7,W^&\lqaQ*r<r]*D1T-[G,a5kO8!-4N6mcUfdVn)-l_EUkR6WXrVD&S)IjJ"LA\^pq557KjL^td'A1?
%"t-OUqO@NakB[)GJ)g.h8qYMTQDtu-UHIr;rp8(jOBWJb^dRLmh`_'9cXHgk9`(qe^E%ue[)*4KO3GATJ)8`gZ3UCYg88<2"o)#?
%%EH:,1s7`F#L@EI+8hJ"DV16cIqkQb\Bq\R[Y19r<1^Q`n8D+\Vlp*tZ_2)fB8$kgZpOB!nB3t"1DmA'';MpGUoR*q*sn^8GVQ=D
%lg8(:$5fbu,Jq=H1`&:N,0X3-\QZRV3?J+V>J?t;@]G>.p7R&sBL%\R+<"_Zp4#WSpb2XDTA9_L],=<j*;"8e<eF.Wl]fDWS,>tr
%!VW<rmf2Jjp"J'Ks&7T/!M)'!Quo1V(jEd8XjfkV+:ErT&qFeOIuOcnKgWJVZ5;$FKuNG&n#5+"$i8oW:kjcB%Q4(Jc#sXT%sn3+
%iD*)GEY"(NW4uAeJ&]Qn74C&'L$:hPbqBuHP0@,i4BH/I*%p+9%M->+#K*qW'c&XG?X2dpL9hc;s#TbIl@Kh=LJ$r?j".^E4;,n,
%2Z8o"qtC[bC3B&lXGbOWTe5cXIP?(Cf]5:sD>l&Rioc/=Y$%uJR#_q5N-OF;)0o9Zar01/6=KP6I^+E?Vh<q?cc12hl?/shr;BY3
%>ohMDZ:"9nq_174rY,0@s5IjfIsO<1CF]pVs-s/iScMDHCpt>77uUYqBIQ`q37g7$1l(:kgY'@nhkRY;$0BjpX2b[ZGdH!`&$r%f
%#W,R63$,aMZq`4`,LL&M+&)pI(_sPo,qhrfk4,>PULi&e(o7VhWbDN!VT=?3dE(9@H:E*>9F0!];_a>.0WI(J[e^/knUGj?2k)#b
%P)IGHeoCM<OeBR2)`TJ6#(o6l&.F3-pRon1*Xql^"Hk<l>F;:XpgR&ANe5+<pRj8+%15VuG+EN[SNBH=h<Gdp4g\5h.L^nBfXc)?
%gC&`7DD8k0.&5Af@!g78*hlckqJ-cgEDB_q(W@;j'mG%$m0E%!ohhR;W:_)%2YsXFC66+2_q%)9@'ERd[8h^+J@6d7SJg#4,^HN3
%[B,J4I\Fme_khcAY.%W1+,*nf4_S1fh;3D+DKUTKE&?dLKd(&)GD]R$/[BJ!g8U+eD&L6<%3u)Q^i-!ILAa2+s7PfY<Ij>`LD^Q-
%-8Gr-;UCb(A/t%3HR$7=f5"uRrG]kg;8;09RZ;4AY;_rmq/ko>ZQuf10PIa4+<tk\2*&Wf^K!rY8u'uZ6u-&].?qiI?=An<5jNnc
%#!)=-gj"OZDQe$a,Uo5lHK5##D-On!:ba?umng58h:aOSl[>GrYgjW#UV,>Pb[H_3@!'o!&"849M1\@*@=o.=/+i-0]L3;%C,M^"
%&.dO"$u]Tn"Tr?qcJA2)&;7ph_T%3^>3=JGBhrWHX)keTXZD4F)b4tr*Rcg^VK0;5leV%&iI40I4gpTe;NMq"o,"j(X\o%qKj.Ys
%`t-LJAo$0NlijWE@r^98mS2skN37f:3poX\!/jUCNs\LP9oj+%`9(2V4:V+L\3h-(jn.c#(ZS@7R.GojoLM0B-WmEn:WE'kTWm2:
%LE+$_K/@n,B$ecS_hFB=]i!e`Rk=HJdXHISa0R;cq^*=h/Qe'?h#;8BrQTsVC\>/0:X%QHQ8^`,gRZgDPO=DXeJh/>GKR%6EHoZP
%om"Zj\[q<Gqr'?sd;&(/SS&moEPnnr):,r!h6Lp5g9C.UEjDLsg0"5W]XP/[e/rQ:T,K46bf3iR`^$tY1>4j9r3Ec9D?]q!eq8a;
%9!NX(,W/W)q$mUN/(K>Rp\jfao(CJ/omV1ceEPM<V4IS4l2?C_c#L.#h0QF'[=.3I$r]1;SfD>8G0BQ>h:F;EHn6;&Mm"LhWjZ.1
%['>'\rNrgj/9^G_Q57Kj`U2eB$q'ZeIQ;d1XrMq;j)2:ag2C&R2bus*;tmsHUWAeVQ%iWB[^#hqc5Z0W-9Wo055EudT5K.Zlnip(
%CbC'ADjC$_Dg$C=DsPY&%-)hC]\h@VfIn&aVq0h\H>14.I=Lkad[0hMjZBZGj^<K)iThjM:Y-MEqAK:^]"`Am46</YD5HY1>.;5I
%[QZoiDRL?&h,tfSs#;X]p2>FJ"R^0/4ZPB.(h`7/Vi=T`EMmmX_6^Na\+B,UbB6m@a(B&4f[9/[Xm0>]NQRIDCS72E-ZIt1>'%)O
%?E(gdld$V'/h[BtD0NJ,34u:DCm9.pDnan.nngL#XR(=RDE`0c^!HH)?T13N)Fl_N;83XR$\6YmkMAp<Q4M7[k@GH$ol0NhY-TYr
%oQ@L;l(;iWX/sh&Dc^l4Im:_W*;mcgl@k\B0\Xnr3u7eVrkn$4phB]Oel-Hn?J>7m]c$9t*T5kbgAQd;\!DuqUQYqWUGi_7f:$'=
%J#:a)B+4aPfX0`oct`/D3/(/U'_K?LHe9gP#\MuHX;hk`/&C_;jh,fO2G+4>YP0Qf.o3osea%EsD)t1j?EQMq*'PnoS2Nj5h-5kO
%V$"V'(+?_chVEjGRd[`BIX*a[WPm""j4;Oh;/]dQ3-Ztjm9Qo9]YDuBP!ZqV]D!E(>^OAhKK[4,>DN(Rf:1@G-e43mi:N;BqWuHO
%=s_L4%3/KdHV=)lHiE1R2<1X9UmIn:`PnufR'lf%`f&A>>Mmr%fW4M6D6:bt4`l^1)f#\R5=u/V7cQ<_'<A*o?EX:^_$u&<TM55`
%CmC0Z)XmJfFn'YTDY_f8HbX^!Xl$/^K>E]dlonMZB>P>ha\geF*Bql-kLQ!7<,p)F/QR&/\of/"GZDHUDk3f&(S<XY<QiEY4AC<O
%e?"t*STc>N1Y,u]ZgBl"'6W`%C(K0>5!HLP+>F0>#3HN1W,/(X">JEMFVHa2G.d[KQ_&-$>m#OZ)K#6K3:d%FCY&([:"FKB^#O-K
%fQ'N)/q;M2mbZ`E*9":@XPWB\T&.);9_RiPK.$,[aAG_sJkRuZ[gTTjgS;YuVmQKc8S+ak@'Rip*8c&.PRa;X:,ZE#m*r(?hTNA^
%bkca)lXNJJrmk!9\P^'-XM0CB+8]9%ZZ!>7#ddI_FV`H85MW5hXF+ub[+Fa';qo!e56au0a)^oLmhJJkhsGVr(e(1B#)=-&md1hP
%g:%/IVF'_,XrNerI#b1Z]k[60mYt.3"9`[&J?<B)-%7@I!#qHI1lq5'4]&36]re,``WI@Eb;ZZEhqksEn:>)tDbKt#)r5P8os0Fq
%h7t?BQ)@D"03?c7m(;mo_WKocQeNTEgK<*E5LG@u?6>o$l?\LppT0A+7k=#qj(E`8dH=RWoCe/J>K5K'T?I(S\[I&R4TnO3+)&L<
%l6C^kZ2?#'4bR8'+)t52iEnN@6C-k/qQ$r01LB'Z+4030#\A[+E`]+1jf3)L=8%Tjp\c[[ZAoP9gEWL,NjX_GSjsgk0K<IQO,\,T
%&&U'OW!Q43Qf^]"5]!*g&l/]dAXmaD8>$'<X\j#a0[rUU8iZ(:;<b9IB\;EqS=oN%)ZH$6Gna,>)rp:POPQ,.QQZt7M59)alRFg?
%$9gRrI<.&2@O5EL`+&4+8?\t56A.lEVoStW/,Cc='b7nt9`g'+0Bg;)`]JBIGgc4_L_l*jrDdf?-@=h3%;]8WnV[)faghJBM=c,0
%\C(kM'R:6uNK%:Ud5A1?@@3.8%hb7aA6FodnL-SlEqCs^2DM4:RqMmRHkT`<LCs,U@jFMmA':s-;qqi$#d^PHVFn4kIe/_,RDcX0
%6W?Pk5[&o55Ko:FKNu#W0?9$Y-A#psi<V9`4ic%?^7_*C#sqm&kB6;3`;*J5-pk\u/aXRN49^B/Bg8:U8dDPlG,lRnIKm]+05M^3
%=mSRIYuo"!(Y5XBUP!n4CYJ39qcg8]5*icsq3GK".$d3JNDeLS6_iPS7La%mqhk!Bqr#g`h/r(89mHEM7!Hg[HXEh>bd1MLa@h>a
%FJ%=n(rkl)dG1kcV.6Rso[,Tj*G4ms..)0O?^:=T4.WMN[?\`+DqieOJ"\NDNkN&eHc@;sHoUn%H;WPS--Jb[?(DgL^eI8`/<6c?
%J[fKT=*l7fj-.1!PJOpc=WNana.INI:Z&fQ)d:JQe\^#5n3o#B2IXk`"BGH+(qLL%o3I:Gr<b;?UhbOp\aHLo_:-QsbMiFmC\Ipu
%e6ChQClFk'+!8f&Q6s180T>9K7?!,FYp97VoV,ObqW>$;qWb/`*Hr8o_">=<"'H[oES\<?%qi?kR8(Q8h/@e#\jD,e]j3;3_mpQf
%%N\YGQL@#s&RLn:^OQ@Zi_K=Ark%_nlf!IrZ!MEJ`E\Zai;R1Cns3.MWU$ecR$I_A2/crgTuO_uGZ:*Q,bO,j6Y?(++7)1/UZ2rs
%#BAWdRAt`P4=pY-c26$ELCa@+p,i!c]_3pE1UaDuaaRUR\GJ#>_['#lOop2Z=ZLqRIiG2,[:7p.DXgaQG8=21cU.!iqX(U\qoc*j
%rcIU@FfRV'@P%9p:U7e4d]JcFT%g2,fmL?B!SG'N4;WR!n[jM'bNJc+X-L:kq2:'lHabm,Cj`UjeXdiT,>U?<S1rfliS'Ml5MfMU
%s)@l);"E59+tR6ol/p[*qdB3f*_2]D'r*OV2p[Ef2kjZ4!<[2HfkG6#;k>5Mha_YuF:'fns4'IE"7!G.M>P8YpE.)OJ!2)s\/T3Z
%hu*R.k37kMk:]I)gWcq+2@g#3`iC%BXTL/lK>k)-+QFKk02SN/3ZX5pV>Z`'@UYYMFm.jn\96HUO#GQqh'jg>28a>3Z$&7drE;7,
%<IY5uXL>P%`si]Zo6<9[e]CVm`m`YlhXMl*dDMgdEZ;'mjkRjf/-pP#:=]iOFLuR("oB*R@q@!sNDGY0X*8dBCXn=@hRNUTh5>Va
%/osD_P^[Dj2VtMUSe=V7D&t`6`g,OiF*V9gq:DrLB,rs]<4c]R9`u5:mXOQ1.P#Gh2C(l_"=pCdk:]BSTpXYZjadu@D][Q0q2NYE
%Mhe7^@ckaQC\,NtHk5;p)fFKHk8Z!%/E/j(.-K1+Dr/M!Rr>F:j2XY;)lmnXC0)t$fu<]H0Fj(GI!t7Mo9_R?oXSY8/V6&KC;:b%
%?`O>.(H&KQS=;D%-Gk_adt;:_7,tn_gU..1I#i/^*GXD+Q/dK(#)KaSHI'SWH_^4AX0LEnS$8VT2"P8:%&Bs(LHAadrjm2JgVEdO
%0;k__^:5n"p;a#c]p2BoXj>iYXSSE5\2K5p_trW6$LgdW*geN$?W@Wg:03UR)@sT*@&6Y:Cj^TZ#bk\aHAtSS;?*Gj5CU9k@'Ijg
%V]FRh[Tm,)q0*LeduS6*7asr,EcKORQT*Y>m225Qm(N"0ou4P&[D&iBOV@+qD4mlo^$OREfSZ-!2Od4odS8RO=#BsUSSC0(c:S>,
%]"ZkkDL.bVoW>O+qVl(U(/5N%.:/atN<bHP+(4\>SsB!Z2SQ"*jQ<]%HLPa\Z!(G34-,o@gZ@V[f8i8)d?4:F?#MSa<-B1,]:7@j
%A!C0qcSocm1=9E/(S<giq2[a@8&@M,$X!UUHg7[q]i@+rSD=$Q\Z>[<)2tBB]r3G>#I1buTSL2S@K#VrKgTDAorY!Sp\hU)c?&Re
%DVs0O*o=QC%iF1'\Fo[`W'Ok81eG/H>=Y1W(1ET\BD9X]V1XET2e"?0BIE/U-A#EQ2ejn,j^15Ii0),>X6%bWYT5ZG0KN=</03AO
%R$$RtT9Zhp9!5pQi`fbJ4+QIj2R*SRKf]'.GF,p7#GKfTIbMX(7qWe,&,UTF[+Xk^[kmjd2UCfMSnqU!rcn,2_+3fd/mO,/([GY;
%plU:kgNa:sa];3nJBgUpp#?\oO93;-GnW;rpO:W4Wp\\f?G65RG>rnb:2_VW5'Zq:=_W'WV:^V0b\[rFren+H8/eg*mX7+'Pq<rH
%IB`L[s1J*6EpQ#)=,u^V(AumQ_0WN=mf#L,e-+5C$fHTolLXSha3)l/lRQeh))(`NX'>Gj@Wf)cpP3#(2iF=7%T]))e^D?0B;'6F
%G3\IKPUL;8h?E1lg-`\[X?>>7!s;hcS[?*fhL/J]cpiepnD0l)NI+;ZppmTt,N""lA:B+.prHD12=E-RAI$^JE'MP+YDn7S&Y>Z5
%>'4h_;t<^K5/17&los1-0(^`W1N.l/%<M-S'l?QO*PkO6h*hR"-$TB$\HMprhH4,;hT[)G>M\/U+S/*:[:Q3ogWd'f[CH$ICN4Uk
%$"]!cUmEuEH;BG!4*^SWjC.atS&X:EK?QOO4&;=/=?eD1:1)dT?*!S*/9-1''V;o;_RTOL3^LRS1+Mtqm>p!0gRgT9R^99IGZ:_m
%!Z'Fu7J7$.Fcm4$Ccna4?_"8Lbkoail;d</?#m_AZ517)fP&a%j]^S$?AikekK,4h=#F%KaJc6nr=Sl$BhhT,H,"W0?$s6NX"-mq
%qsrcAr'e6)J(-\pLXL/@38*ZriI+]7W/\jrDrLDKoF29$`a#^ZCG0&]QM/A&N3n2A#F1iTCC#6&ZNF-B44Q"1(Au9T_2Hid%!7c,
%2/>.Wf3B44T&3adC`W0i043)oi:`X9>P0X2Ir';rhc=iBaD$N+o'#mR=RMK<#E\.DfmkMV;8F4o_EpH#pC5@:S`c]0-=QanE9D*2
%p:)2\>2r=rKtnj5>^'r2=nFtL(:W"e?bc#H<-F]`8!PH[McDl8h;OQq;S1d/MeQsKHfp,'q?\4HB%XN!/E9c5\:^8FjM%J=bBo#;
%1E.??(!]Up,AlV]p3L1P88Q(XBcO3<s*QZ+Iedf%OOMGCD#V,j:_/.P72t0FB1a^gB-0B?]NqTYhsTBD7ScMbWe^!$8pm#WkG8ho
%Ol8HIp%/-14Ai\^>T<9Pf*!>7WgBeKGC%"&k35L[gE)A/%fm*PSbh*#iSCtm<1Z;LoW8b-J,UZr2"h3h=J3*`q]JHoXuNIP05ftO
%*5D0_qg/1MH8tc.>hun'*5kYF*83&4fLWbc(UWkTnu2ir/o>OApC9B)*?CC$<)2f7Xb7r-Kp\*3U#K[H-'i,#Q34H8n0kVjqI0>,
%[C!Qn?[XgPpYsRga8)V0H^.(2ITF#2>%tM4k#S_Zrci'+$u&V'IG"Go<Rb%AP.+]o"/@3t,f,j]]C4R.09927Q#VY@2d_.SEbDp\
%m?X>p7Qn8nH+(/q/BjDJQR<pBp;[E_-lI[aUZh@3+.Mu[.d#E#2-2:UMWb``%W2VG$hCt\mIb4$S;6"iSuI`-P'QZEH>RH^e)h,7
%f'#LF?(r-Kj,Yc;g;@k'SlCa,#(*TA*^8G0GM)p^!]/V$'<!!*OGGGO!-,_X^$,r35(3V=d3B4T:VUbpSALAfnT&W&>da"4g24".
%Q@6/??-jD(]7.<"<-`NE=As4t`dQZgrU%*_)PXf>F&s$GLQ.GFWjglXF=YDF:\Q<bPSs63P(1ruW:Idu\CggdHM[WD(U3t;'\qAV
%N;r\>]m+?7pu^"g[Hc`!ld[7=@7LQ,]n@krGP%_ZEa$//BBWZ<dU<B/B=l[j2I+(_OVa9YX`l^68)KFW=FF(sr@B-Ybh7FO[dg]h
%SaD-rj%eesJHtl1<jD5Vr_6T;\imX4eMp`I;HgpVj,j=crj[rgIu&j7H7VPbak^(r]K@eePhe^r9UjsrY:S9u]i%[dB#hTPMl!h@
%[83tah<rR>?MS^6ahYF%IX>Qnp'.7$[g="Y[151:XOOB;mHn(A8p)W?\F%%SS0tEPk@",AHXlB]o&e)/[opK-T=c&WA05;Fm&"*,
%h=tpopW`Y`NGfR!eoI*V^3uc(:C!5[o*75WYE$%Ggq'/Js7\4k<7QuFPMT0q73=>SL4otGZ,b</P:>#Yh7ChhF'W-Igl6HQA3_c5
%R_>JhYZn)a%)q5XhGK?g`H*!Y>psuW(F9=/Brj^(,Z\+)ZhA?;D"P_UZM0eY:u(<,'sP88+eF6:o/-4-hh,S%p8HM[#:5K43m>[?
%:#n>.leO6$>>?S<]b::RgTGblU8DRrL84lk*psMaa/sNhdquJ4R&%FMCUY3HmU#f7V,s"1h=$lh*W+.(r_CN&YZ*-=\q+G2n"-u!
%c1=H;2uu1deBStnbBd4p]ah-]T=r&YAq$Wk<TB_6:0Kdcd:^.1YAjp0#*n&;?+rP(@V]UrSG\bQ)h"%ofUb(o4;k`]\V&qdUTo#(
%ool%jeGC<J5WZ0]ic;lm=sq&#O>!RnX2F.]",dRV(7`F;K!-sJoN\C>lK>;%`S>mejct\$dU$HrL!A7diJ9QiO=76k<\X;QK\o^G
%1S2),8P6r<)f,?3-!#oBXBbYf;IW%,BuddUV8f0P<$0ZU5<sPn/Ku5-qRI/3Cuc;-Gnq06!d."";CcR"fG?:u51$e]]0MN\`%"i(
%b]?;=oKgR:DBN10+>W';q1P[L_bmI-dS.?DE/oBF^52$N#pc0^?4?ud:BXXTY/Zu-A],rfjC34`1[C6W6*'UY4udna?5pW.#1'nA
%ZPCf3fH:RO8&<%+\9$0%\(\akWHR^kXn,C&<Ngj"bB]\$("3"F\Q1!GdE_W,Iscng\(;Yf+YVmnM)ZUpi!LLCY#S8.RgH\``cgbQ
%+d)N9UNnJX=ggdl".`(k)#?sGoXYe8.5gP0.EKX5OLd,,%15h4,$"\Q@eHm4iQouG>8Yr+ir[iEKq3C6I$_RB;J%V4,X\7h`*Z!b
%]=`o"/APT0No@`?r[udlO5@Cn#Q+s;]`cFK0FCR-4$BRP\qO1O^S@LATM#G*3:*:WJ-A(#@7Q<Mcl0_JKmKFukO3lXNOaAM%u\A,
%dW!u$`<l!T6$BV1\l!*&Z5=+\ob_;s4,tZ;)A^?K1TZX=S8=E\WRMclqXIRR/1RA$A\#63X$b613E@-n+0tYqpG?@QfYu)["aTNJ
%"*M-&4jLAeV:\JQ;-@Gd+4\3H*Ahi`<cJHnoP;kFobu=BLFrU!eaHkp1(r-,ot^ffYoP#A:ZlE7Lk-'Ug<du;.4F9sZP^-uCU\pc
%5(+A+XctQKGiP+UID2E-$C$u4n.".6j`%$62:<Da,j@DZ<-$l61^^(MF)NnTD]e"F>LZn(e6J-e=79BlO(C/nbJH6rM](]W[P*:C
%[3'Hg[7SUQ,#_.J$VtWlO^!+U3ajgi#sQr67Ik&=Su\Mg]DIqf(:Lr5>hiseH?%u'#o7G<JR[C_-cnc;8Xeo/:$?IJ.T_/SUCl$]
%c4tWHhHO?68&[Xt5-STncJ)OP%Yq3rgD;[cT!eDbJEYZHncmhX!fY_635r];9i1uA8*BaufM::A^'lpm6qD,G]\ABuIaU;ESY1_g
%/g>D=*:6PDZf.ig'ZNn?/\uKWJB^MEV(TbJD>VRQY8O^Zq.J)>haPDZ>_F_ERC/pjr]mhPB3]6u`g'WjICj/2=UGktW`>TP9/$,T
%>K2OGAL_5,eO';GfT*?/"YE6<Q#Zdc\b/4U_YLP"p.)A!'Q=o1Sn?sF8"h\OI?.BL:4D)[$./;]N?n$@\%7rGgf[FcMg80Da`]*S
%TOq0<i;s>5,W!!&Tt3&SrK4&UF)IW"P$FqJ%I:p,eu07R-;51Qh=J>(7XItu`(G_o2JH!tH\@):cGKaRL2$gdEoT9]g__l+]g3$R
%UA>&-)R_a4Xa8\?r(f*HKP%$U0(:T?i030r*%2`IP+-c@`#P8oqeKVY(H22?!N*b(^O>N9"?1(;LZe4`1`E@@SB4mMK!jqC*97Y?
%cU4@TdQ&f^?*)CoY"6QE6`e4S/d#$.(>[-Q32\?Ir2;Jf?PJTr[NOtbUe8_&m&;%3i;<"3#NpD^e-<%If(j2*[2UNjd4ZIUh5I*i
%NQTfl+W;I-0@hqaeftp5M]/Xr-8Vr$brb.8->&F9FYo:%N<^8Q&!"8s@^CK6o]&F>_/ZZ*Y3<cH_su.D][1YJ#jB9c9k?1BU09/3
%/c)^(%8Q25(j^Y37W_=C;+"/Ch$\OElO=2HX)Y\/,o@DQVfa]!KCc$qXb%,h!4sr"L`Vu_-(8BL'`[G7o7RRHfjKneUmT^),h7!'
%6_PQdPCosEN>h@:mKH<NiLN1_`guF8Dfe=h?GCKO`1[sao9Q"P1roF)lbnPp=<QNd%<H1kC3D`-2U5eJDBsW+iVDGWC0U.MHflJ=
%:pUPCLIOeAU)'BNqt4j#bb_d*bpY[brZ"gUYt7\o#L#6ZprfrjTb4k?kJtB:-Or[)3^:ot^S7%-dHQ?k1#&1#45qHD&9B1=aR*+,
%9Hb;>IQS$LF>DUO0$,aoUo`d'P`<!'qC?7J#(tqYC`08U`poqn6+r,0CSBU%MR8"W97cV72%8E-#5f4d0KUr"+Ulk*H8,=LcY.g+
%nlR@CTfacfGg'\!T0pH?ri8/\6:]B"5`IDQZbc[QIR,p*Jmm\L2`=!<8,rP6,.0&eG71f277.'KXD6.dFt/3r!k1@Hf$"-J+Z+Z`
%7Sn*!L\QH14f.cD:RjhPJ'MOe\R4+-b-b3_[e&DV?t!C<\L)dFs3sFUok2\7pqQhHe"gq07EmS.9?5(p9]%WGSjLhG4j-6lNIP.,
%5*4qFVG6Xb5gci!X0?EoB$p4c\*l$#oR.I3+Pego#.YXo:E\CG).ZmA>A3N8\tS?seQp@nL8JieG=Kt=C^/RamkG(PE9+L"lh^`u
%_n)9PN97u0>;e(JBXjp>0Q!k(3#59.oO'5jVJcKMfbTT`\mc3N\W1S9O:LW.+Q(^TnZ=-%[:,eacToCWE!u_l\er?42=A``9nP_Q
%CeO]UK"9Ne/GKU-M,^`g.*W<VZ?2t7X8.pIG"<tcrZ\$W[rWNB61r1eP\J\:NKF5loTYMV\Y_sAC7>^Is(&Vl*l$apgGY^WMsoSe
%@k1X0I>=6?oO+['9ap7GGT&6L$W+kk&j^Tj5Xn\&L0HK?cVHoN$OMb7=t[^d*t[?RTaB^nYZbW9'"ZYNjLS7meu1=IZ3<dO*Xek*
%(O_J_&?#s'/HV?CTdq62V?8?C=`1;a/>_OnZ0jaL5rZ\IE?Ym3Ue/cUVcRB,B+bk6)Lr'C>aLg;`&.`CU50io<1tE)Zbaj181gL#
%A,;@$EQ%rhC7\fqdka)f=\K!04A@W"BoSkSpkXk8)aegDC?XE*14X0MW=NfTqQt)c-o"-kXi6qKF9L?Ok6T;tdeYtMd5@F*C0<HT
%%U[''(V@rdOF8,deF@\87CL+kRRP7%=[4ce5TJ.p*NKJ4LspI("tYaIkdV$&jqT-9)LRH![lrX]>\=:TCC8(<GQR"-Cr"9Z_+sK)
%4jhj0JQP<\fr]d.[[=Yf!]pDD@;7&9!9EC[QO'mFdo/Mf%7"3+:UK_AOoPt!0*acc$;i(h#m!j62Ps)$&*/QiU80<JEXc)QJ9#Jl
%WJdV>?"IGQT7_N3dSSQe@bfs'/?oq]!g(Mc94^;;>-PRfQNG7t1fNMt[!Z<HV4lt%'e;<lrRTDT\c]"jM6/'pIf,QK)!7ZaVUDik
%S)._R;:0D]&Z1)XYul@ANa9TOZTOb54/KhkcnlM*>n,I!6"4o&cnC4>3!b=NnD:I9>m-P)4BJ24UXK?r7=C*g5O^n=3jf,"/^ZC4
%,ro%7*SX#sZ96c@Y*C7Ll8IOcN1b_O%GQX.>'IKYa1<_)I104FcXA5pl'YsY<rs%6&9Dne(m"="8k0\:[7rTuc^-0CHA7QT"Y<Nh
%cnM")<7!T.ji,"AkaJP)=aEhS5tErA$Zt$PYfSrM:7=rTbV[*l&1T;9:=Ea;,ln`De2$od.i2)#3mfc,CI^')'@T?b_pB't!Lq(7
%q&a^15ImWS<A"Ku4(9^s8Va"Rb@ZqnkD5?9TRaGRRGl$%qiq8X\jSpp&%&/d`WJfu&dK;'N(0+#U,E3EX+=*04i@ph?r%U@mF5MU
%endMeBNs3L,QnVp+@\N;QX(Go/_%Dkq0LiqO<)EmF&7t>`ibD%+OP"gh:/^Z6tg\pL?ug_jRU8OLkLiM,-X5WV!W,:h]OcY$kOlN
%W,4FloFS-\>X82jm(lF:WcS;!ndHtX<KW^5+egauHSYF_+aWLcW+uPVA''-#g;.qag"&hL.pAk`ob6/=n\AD6=d7%mFlF_Vl3ShP
%_PjE/H\`Gf4G?=/FQ,[lW:.;h;Z!^&8G"$;m=QQjPJ;c-0Q]<jhfHnN!eVLa'.O7NWPC-M_k]qL&CKCa>UO8<N-<fr]gTmnBQ;'c
%oTAPabqk0bVb<WOF>&Jp]PTP@H]VOf8]FDJ)TitMq4ub?MB,VYE7ahj`P%sm&'M8>%[9l(oTUCj)C0f.4&/W!EN#4W+[*J;bJ.[%
%.=*0WlCn]/IYIJe6'I-'>#gZ;-?3EjP`e(W:I(a>:XR#6o:10!1!_WV9lZF40/^]f9%t#M9A(!3#"c\S:p&P)>P7/ri88A%Um5n3
%OqPKf)P8l_n2He(^WgX^7?&c5(r>f7+mY/hF-tDM1t+ssmF[kg^GBufFmP&`3c7^;f$kgVLXGX6-PiojOJB>fjAKY,O_1;;!Gcc]
%KM\m1=7f%g+o9b7d7f-dkO+"VUO]bmECZCUDH\fSm?m6rK")sK!2QB&)&1T*Y`j=Ig;DPqLR;Yg)F2"gC`Jc>*b\g5PFm_W28sVb
%4<MSD&`h#V*3[@X?!g'=7(h6mW>IBu9jqm8+GMQ/opu>g7p&os$r(4s?K/!>L8;(a:d`J`@oQ5U:F]ah_&C[O"JG)/EJ:9"-s/!7
%L5'/*6hRMuWBVhD%0M^g?Y21VZC;)'8X`#^M'0-]'dG+>`>#1J$u5XKV/[m:;YB:M"J?i$3_f[!OL@"DXRe=RH#00;MEQQQnkGhp
%MI$O)!!$05E'#'Jk)6[3a$DZk6D=P2&Dh6Ucsi-8p'/B@@kUjkMj"1lmolkT`>V+;T,90\P+,`d*!6de7#qDlA7U;V5TL>S8s0i%
%G*PhhKrhIfPS6<j@gTk(:j!ug[#AB)f_Bjd!N]]`-X"C;3!=&CT-7fgoYG0:!Yh9#K\#-ZT21#OL8])sS=t`$=[F1p-l;@]/_jR[
%OS?2=#+L[O3'^]=KE;?C*Lh86m`MjV%"MMpq<1(SE%qJ$6i_d3c#FF/II#i@NuMj?PI4*S/JrX6!Img;c?=&U["eIETHK7GSJNDX
%-l3&W=FSoREYtXTNR;PL`6!H3'XXN$&nD)ID2+aB=ZX'T&EJ1mPop7a>a?,");&30UlJ&M1?!K?@L:2^*N1TW!`bPP":FOl"P!!)
%[4QtmQ<Ag;5lGAbmDi??J@\<LL6+j_6dS'+b/e9?UB[kqoIbtZ^_ET[HAA3&7:$TlFkjb8$JEitF#skP*M"!KJ`6maR33h[]#7b^
%HL/L91XP*Vkc&'3`2&\Z-_\j`8<>q<q[:&c<p((\J7VI+0eEAVZqj?;D&p/<@KFi-_rHUWoBGJ+)j0K\4j.\*$&q_H9FX*cK5E-(
%Np$MjWY'QoM*Ye(dG+jRd.J+nK4NG/:dO(TPh,t&Cb^\qQCa6F)+XJ]k@hmK*VH/HSe.=qL2[HmXep/e7:B=4D$hKo[5<._Om!rC
%>!t-Fk7"_n333?]NEK%DCT4as@:hbngLJ':^5U2:/_uMhKgpSEkA)6M8Z3@5#Z`=O)_VLloik(Pe:O;LLFkM3#TGlA\Gr.eA2f``
%+RBr&GafA9b&6<cDNPI)@ebM90\Ak(1.dfA79\meCW<rN9;RJ![=q-,RO*_Fft1<e$4$mk-j>;7fVF]o`6gAXFsLg*K1VS#b64,^
%CeQhsc^)t,9DGg674+K;TW4[^KP_r\OBoaj3K@o->S+hA%m<A)p*C)C!'/V#\c\d=hNfXP.kDL7OTNKU7kM'&W,!hp6!h-/3,.-0
%kpb#/NS7u371ZAgahNoV;ZbK54N2#j,XJ_ge2@?LDkZLH@BL9l"<DVX`;^P6+R@dEjO\K,C?m/!b'q<[@,uQuWD9W12[qLkAr"B<
%#*I=s86kZ>75GVq(ggIN+=o$;BiU%fHB<GJ7j]F,"ClVH,A/S<+>M5UH6GLVPbWi8D+d9=diBiWK>Vu?\aVQup5ujtZ%m]\6F<s1
%&NNPZOCfEJ>d1f#dH`(?9&"0\kWsB/-!;n[-daEL0kFgs<KdC2*RoO\^ccNeF=*@_'.fGC4aB&i*;,C&rEJPVL&Ot1rt?>VqPku'
%<'Xr2W&&WbkAKM0\=o8Y%jJb<ANY&eANXL-+*"tIc%O@f1Z:*D7\XZkYu^Fb_O!!^J$TTJ<k4bm.eb\j>BE"i54`^"J:<uUJnc2&
%mhZc.(>cd!]Q!kb"s0n'B0&:df6&OT%K[:]*u2(36EK]Adt)_)n1l4,Zmn&qPf':`FkD*.1fst'%uUr&ZD!utJqaTgfh`bA$&<`<
%jW^8ZYVdB"p5kk!'2%?Q(Nfi/R^AgOK3Y;OC!F[EURZUL$k`LQM.5GtMmR>P)NqpYA?MnhE!4,``Zt+ZXG:Vjd_ddY9oe[p,Y-V3
%1EE'\cY;/Q8o>((Kg-h0#ptAO#B7h%">E#.OOu0-Pq/J>!i+)&j)>RK[[nC25i\VB-jl0*B*4ptO6'Z&$lX<K:^7[$c%:X>FHjFi
%BC$Jf"R3_A>6J^!bYX$2NnR<44kX%c5oUFe0=f<[Mm(K3a0YFa[b9"AUUZN@7mbtFK%iRrg8:bq\/d4mQt/R_g`Ac3M+'R<6[o-G
%8"D*a*mI15p'@TNG4^&,0[B%m>iBj;0SS6rBZ/Oq#FW@YDGS`c'8K3Z`/KL#V1c>q<2O;kIT"i>ZQ<3l7Lc-SPMN':ZnZQk07p3_
%X\_+nH5Z^=ZhsO\DT%(M?M&VC;4&'^H_F[FQ?3jT/Ik2f98oVeZCt,+JtH;7Ci=G]gQi_'l@94@l!!<p)]Be0"HYGt>X$7G(fECg
%"KfY9^dVWeGZ'3O*jVJ3&'$ESAb.lQeP7<e3fU(nCoGe"EGX3h+E7fiP")dL!*)RYmT6Qb/[GU[P.DDaU6Cse"BFuPHH:gf8K'@9
%9%"!F%N$oe2H1\Nh/<WfQ)#!E.[_!L6;jY8ChT?7QtXRg!u40*&(T>H;.^h7<=GWDZCqR5UL0ts0^;i4[/s@t<dMiA`qH*@WiJ@:
%,@Y@(hEmoIUK%[dp^UnNBM*_Ir(jcs5e3?u4YSFoNS-KcDq-3c=@+V3-T+WZ-J/NIaXTh7\s-a"_DLo=I5[rBb-Jh`!To\UrtKu+
%OQQF^@)c"MBd(uK$uX.C-O@TFPlP74>siuiTGSmR-:QE8c9BZncIT<qH.n0X7Q#fB;$bYkZM&C8ke#=S(`d[:!2K_)FQa23=cFsY
%$,KKd6e'4d&).sEN',f='P#SN+G]B5d\d](UBN)SDkLBa5s*oCM<LV;BHe9_0a+1D6_;45#2^NA)9W^-9Lf_-VeO69*&t9NLb65%
%L;eADd#&#'=g?LPYsh"c&b)Xq"Lg>pkEd[UA"ob97<4:f$FrTV8T)@L9YOO=EXVMXBY'>a(4q9g5hn[K-cR`XOQ7/\._,_QH,JW-
%,e)-G^?6lr"d?rnX<G4.Tj889JW1/Kmj7`4lnjXLdDL\SV@#)F8q'W&&\f_ZaY2#1mQ-r^0/0JL.MR?:@=^*dW:11lB5g%Na=i(2
%k.5kj?P$Mgmg]'rZQX]g[1CkNaVKl#\/J^0lu-<s8N50:6/5UASVTtSmm7gFZLBMd?$!SYs/Z`6T'-u&HKQ+>nHst&El.j5OA3+W
%g!I8/Q^6s.\QmH6fDek9T#HjT<&DHq)t7M3^]/;ZXK/TWf^W`dU,K6\8>%be)0rG8kDbKD'ooaX1#+\;h9e]j>BJt$$F,lFSVgN7
%dF(_L03EJGQEV94h]qc'nP;cP2(2]ro>L`(3d]:[^A`pE`"[9mgAsQ9pC9t&Nu@33)5*4=Kco"i!bC8d*!?S>!0F=(<j@W>L[U(5
%*n[U]N['dl;#nrGA%$n!Ocg+q)fl/h`-"KK"?qYq47kX0S-s'a+1KmgO/OjC$qC<ffM>aVEVZn.9b>lp7(3qn99NL!"6)Ep&#TPD
%Quo>6+CJ0DOJWo]_!DC`M\oCa29Smt1Mq#q)NA`LY8=67.8%Z($,o>'bcS,Rf,/`OLr7d&?@JB;Y4%0F(*>CcJM\u>!m:lA@1XZA
%(L/eXj;1.ZK+)ET5WI/dcfp[uV19Y)O:%F9/]C@Tn1fM'K:R'G<jZ-"cf0!eK$mYT2FD&E4[;0_kQm@I"<Li9!iZ80a!p^'99KK8
%\n6!6OpPpB(Glb_C^=F+B!l!X-:uLWD;r[[,q''OcB,;:+L1$dgQT)3na6FVbmCh'^l4Tt&EGm`"JLC)+HRkS@LbkuO:JEDXU3os
%`s"J!4lTHB:E1q5SjSTJb"PgX3?aLPM1[.d#M9UFlFt@1pGA8(lqo"n*h[$Se'K_N1hpRV&-29C9=-HKbN?2f.!3Z@!9SniEC9`:
%<V`WT&nU_Mfpj@,duq6Wq`Gf9PKi,9d/HtQ)\VE>Y8isb\>ob&-?([#EBPk,#J5_E11/G:0TQ<%*hVfI;)i.[dOKjR`J=Jja\p';
%ZFfYJ*q]mj0S9fp&AB9L:&`_,QY.k?:[r;5*bYqfgjgDM5`W(dHqN.(b8:tS_cK?)Y[]?h,s:MsEB223*<`4crM>,?D_$730,oLf
%A^#;91>"-W8agm.l*;^='('/#Q9cMA?qetW6bt.NVr5fW:enMU^@-k')Vp0+Z=u]'63kr(,-__S5$>m!=YPTp>E*b\OOCqFe$og`
%/jYf&#rV*B5!bXTp;%V^SC%Fs$4[AXpc,RoF:hue0!Su:d4Qe1GGO:(ar(gaH6*M*;LBg2]K^+kA8S49Nltm3RhFpJ6$,g#62DM$
%XN<kNGp6.ei""/uG%h.%kr@X(q>\.#5M;A=ZU6[kk]3s6imB+7LHs&S,nQkU!C:N<+U%1!KSU6_*o9(<.Ba)P]'G3-[LZ#h+JCt1
%KP>[+P^*]\Yg=s#Q;Yd@BH"*^#bo_CH2ng28fdI,82Y]GQhM&`MNf=rp7VTCJ3`&"0aRC*#i[P@Ge_3?mi1EkC&pD<ICo_Ym\jXS
%%*9$"0dsnQdZ0#Kd^0$LNu'9?_Fu)E;.75DD]S8_!99=MNiAef(<2Cq^!4C;PVCo\F'7rm[P+t8TEbu9!'/q)^Y)F<%8<SIRBY&V
%i'J':"7jDX44M/HA&d2uMB!$\D(c$L$<\E^]5_u1N*`ia@M5gi9c=P]NM(tEjrSiI5Wpk(6')F$d)/44Y+pM4n6.C25dT-]AuI#e
%2;irf":<Dno8/M7_R[63[*F"8JJR-W"fPomgs38XJZ+J@6kJ]Jd2CSST);XPCI8*p0t5Fo<odFl?q+g3&ct??h^%rY_O;;XCB2G1
%\ncWAd'b2&`>M!9f9$WiQHUI[/JBT^DYipYVMe;Kb@^1[o*.RZ1M_Sp;2prj)9:d[;1bQNj8.O5*@')iqoskQC#D-`G!aU7e@7c'
%@uFe34<V^3aZUth%D6]InjR<K)R`BWNQI&8Gfo9"Z_;CQ!,!5r_-FW*`X]:AAHZ7XUuYaMJEjXQqCZ*GpXh@>D'0HfdCsdOVFJ/S
%ChU0b4:WC+6*IO3F'MO1)MOZ"5g]i)@[:!o"I3lHD'3^:6O+AsqD*BAL.]"0"=6jtEB'#03("K[+#=3WGGHg@>hfA?`SeiS&7h4"
%B[+@921^.#?>#1P%mi_5+(iX[+NG&sbb[,:`+h(6i[f&!crLgP]"TISV(9[onpF(M"&m_(!UZr0;)Q6'T2IfSiKX1`5oi66)2+JP
%0m!PTfF*9bUetaliC#d.g,:$!ingoWHZ=.AXHlGqCoH+m86h8fX8@:Fbe`i]>T4>l::Q`CH,ni*=M1m%Za5?i6YHNPK&H-LB"H_j
%T\KV,`gUG.;]Q%bj=Ob2b6<[Mj;+u:MuYe'cS^D!`JOm=haPZN2B+,i!8g:Kk+W(j:BLH*SV9/^;AVb\*,.`9\-)B3*K#4siegRF
%DF"UsQPTZbN/Q%HiN)_ZZIuk/4XG=T*HW<UZmX1q&;26_2kDZh-Q;b9nl+$3`"[>uHu$84Nc@'ANZ_1s";/K(.cOZ5X&s@0Zh[Ni
%PJ'h9!!ZSXjC#,gaH_L&k]R0Wb7m8c7Dhf,>9nr'"=_69?.\"Z4731)29!LUN%VOVC)E6]0f=7&PO`3W/Vj)5:pYtWW0;a._\2@8
%p'tsHh_kXf\TkU4+c"&Mf/Y^Z_sdpH$J@maPF@'1./'U!anuFm\9&[?4J,!pW-^Xpc!VB!_4n1)KN%t6`b(;ZduD=(J&cYA%:caX
%_8@DtTF9pZTE*53N2.+Xg:rq>-7=2`8bX':Y_6#7V[C:OKYL>6\c>#=gcGe8)C5N+Z-8I-:fOmnUi`Bl!CKs6-=1p^OD28R'(^dH
%`@GC5)h&ok*Q);ig65!WMj;-"W"6Z)Mp?!J(bB9Ij9/Q:</reuIInR$Mp3BI/V4EdQKO?J5Y%4BU8Y9RFPS:!bX^XSHFtOD4tb8\
%+R91$2.C;#3K>>uojtBlJ5WX!"GnN/#%u;N6]fLH#p>]^CC'S.]ESflN64.oL2jjBWT&MR8Ka>[!7G025U6F)XD)]*@YhTITNn%F
%3F8W04i8#/!dt<,3,HP6`,bY8"[XeJa="PHNt>\l@Rlms.@RNd@Mb<EplnHL9AK*4A:1*YY6J=Fa4aE^5,$UX2_$#b`FZ*L*4EkM
%/@ndKpb!Mm#shD5'G#&WQ4)OKJjm]["s-BeX$p08Yh+7dRrDrqVWSfS6fJX(fgIsTQ(d(^lbZ?oQE:KAW6H#Ug-@*FGHu@]D=M4B
%`tL#g'K!*#'7+i-:<lnIR6#VFqG'=$%l%L::U\ZWmI"d0I=aVSJr49<p&/FU+B&GU.a,2*D+eP7!N3>I[PlH.q\dC>[M=p5DBs(^
%Ctg8baN6,i&i;.P;HBrJ.dSiL7$/L5a:;'XLGRB*a@V=0hSM<Ff]]#OOtu/U9`>IP+N&oSF>P`nOpoAW_nF1cK/+FD%(@_SI[):-
%)4;O;VXorP7U%Gc@[S3qaUUD.+r%n78-^n*U)hoqO];6(,K_bj*0UuDab]@q7Y0"(U5Xn+,4nj[,%5*I.LH>+6B!,^RLtQRLG%<_
%RLX=L`'H0]VAYNHAGA#D9UcpGc%u4.LPO>ejG[2^4Ea>5T+u[C&>`)eV.NGV1+*8hZQkmk;9qf7dPt'@Z;^s>@^%4AJs.)=R1L0,
%5p[OL_5tb0YO#XtG2R.&O=UQP7gV;hGfFAoqG-b3PG,]TKWf17a0hNCUXNO*q/27@05/cV(JI2l%K44BQ"$Yb"/+tDI-oY&h:Jh.
%RsaUZ/&8bSCboeS94"SdY<Di#%8EL2Gf5G":[EMYQh`+c:\eESEbW[,;_hSa)SU3EKd/pP$]_1%:Gj#Pg;:K'p+EQNQ5,r6fIl'+
%_jUZoL>`:M(-g04@I(?Y<]ilQ`c6qk^s:8RJ3.43=3/t1kE9Y/X$sNFQpR[,dU0TQ)MqeJ8J/@,ctjFg:/i?;2\NG##=9)X"_]aE
%'pj]keTDO)E6sq*je3iba?gnMY)nMQENpe$W-*j\TUVb);;-m/Z-&NG33;Up9kbX-F#Ashb]kr#V[OlZ>6?:r8RhH=PIN7VS-j-Q
%$iF\H=IXnnGaZSbL*RPUjs$3C&MQY;P=<jqjO,956!*K;[+-jA<8+Y=EDZsi=NXEB1Yn9E^R0:W#el5n<B(!mHTb`3BoueZcW4U2
%4Y3^f7<ZUj&.0"K`\jDJ:=]Ir]=OCUY.>c1pK6Hrg*U#nnMQO-X;8F4$b^&8%J6/R9uklmO@RpqpjVqbqjG*6;9qWAXV6=r/Se2.
%+K\A+_!U+`AJdF*3(\WsJf1``;8S'B`X01JG7dB+gYcWT:s:W@dGKno6feFJWfASqUiO<YL(,@a_X>kIVXGi/JohWsUJ)6*FY7]r
%]oJ<-4Hi"8Gq#6O-Lb\,5A0S:ju1?:;;&Q7H`(KEl>-K_/M"-g8sTb*Q<)\%/R&KmbKFjQ$#1i]En+q=P&Geqk9d33j3F?67!RV0
%FtHR*,_X%Y/D]B]^m^2\O9MF;FXjVVq*17!'S<R'O5l$-6IZQHNfRVdW4N<\a2MsA-n7FiW@?YK)W,:/`g*3OW'SB9$l_ZLK\`Kp
%D'WJnr5nNVT%I^2K$nF:[K<P05R]&Lm9=ruMu\A9ls>aE=eHl]JC*TS`(L+*S>AMY@R2PDPh602OlF)sMck62b$<;B5YF4LHD8,e
%6r_r]=BLp4[:.l0F:LVcMF;Vf&O^Um('m*Pl`h=2k+Zq"O0O$>S1if7/luP>L[H_/hS=1N['X)L6"d_F9;78uPEDLBUWj"VdLc#"
%SQL),14!C\*&](1Be*,`ET&p<)+V3hpsOfWWYhX*dh!hn!,ifPBYnm'PnE888@2tdY4Y.0#1;-C[XcH\%fsi$TO?>!TH%I4#`:-j
%B)qil5e-Z.+_,][V0:NklnC$$b#/L6M+kJNbB,=uasfglA_T[NH?R:DAXp:i]'J=T<"ooA&t"O3bcmLHEPP]@.fu]&.Sqk1W3Zb^
%'WPlT*P_RN;rn-8&>l-8b)fV;TiR1*Pn^+'R&CB]Ckfm",jNfM7ADrBN3/'_4K?OmaJ+,<.)XLH\g78f<h1R)>e@s4V2Im83#$9E
%M!KHr<9GK3/=U0S-8DgGQ)6*6<n[mHFA33Yj-^7]`YSgg:KO67C!NS:gsI5O8BdsTGP*4\be06u:[KM:,AH0!KQ)7.(mIY:C#UHf
%T'MP]K)+B\q'?e]@4Epe+F5T&0);7G,4;f-SLK41(rF=?F:K'3+V;(LM;Wo['^T;>VS!`SerA&*Ghe2ogTm6lpZh6b)G>/_<jj+,
%7]%,G"N?kKi5?gtLi:C)'ULF@s,PE<b8-YF3Xg-#EjirR9B6q]\7BDj\fALD`M`>>Z^`+L=(;OCK+>eEau\ELeidA^7o+ao\,qY-
%)hNC%7Q7G4n\>9icD+Uj(l@cNGB?+(i2c291]o=`kP95_Rr*.<QMEq17B\/hU7,>5?@f+]Mm'jd#6b3:(N3'J:jd`u-Oq9DjGE2M
%k6g[So*%qn\V;b,a'+;sXWG2cKhsdT?40)T&JXoZ<C5m`"sZ/s"Ojl&Ue4[I%gH#0C]*<jK55nVL!nU;<gOJp8;8!dGE#\6_7.c;
%K4oW]7,]>L=]]#iNA"'>UIJLfn\LF3],Eo&VD>^%*Wpg0D?`e<^f=Go$m)GL3Rs[sZ2I%^7QXE\>?1Es`m5q[qcO0I`>'3fnZc!&
%[\31CN-#E3T_!SM]UnEqq&u'3bh'Z_`tSF!-01N)i,"S@J@pKM/d+c9,Mq0Q6%\dJc/=9IWb'>[Ga.0b$u-/t!e,P7J"ihS3\`%R
%fE-I4A2$<G#.<sEK$kuFV.u-2BY"P8'F15<=K5-)n3T!<b_cU]5]Sd4@futYe@1)\MP.a4Gb\F["OApp>XY!>"C[A=bU'X9=:5h\
%cP?#l5noEJ9f\Dt;N6O3L$%@1$3oDt_da-oBN2uDF"%BSksL[tPQ$,7$=#GL+:)W3M*W_nlHY2R5aQE3i:Qh2\5:FZ2dEFJ"I2FK
%)rFMd281UPgJ6;I(>Td<Mc1+[J9Wj!@0hh>3e^9B!=)>,@k&4beX8JgZjrCW#_[QkD5VmA@W@DfSjs)PR:mTn7)TT\LX6qU25.YZ
%&X9-,+[5Yjp5fV:an.5Z/R]oA)19_h8gR8bEX)nY30;;eHe%AVYUPA#N#]md'56Bb-G'3o6PIZ*;F3h%YDK/TIVa*0'VVK+'nfCY
%;.t@j1dY+AL',Q?aNAU&fT]=C1fB8RS0W`VSil?.HFjZ$-4-fnTc0Q1UnF0UR7(F3>^]B?5[L/FRg@MO%cTFuQ%g&T8[`*aW?<+g
%b^:b2l5WO,a&5_dfb-X!f&2>=WB:UBCG?CN1MLg5*!sSj$oVC%GBc\^G7*WF!gK(IJC`^V$d9(991"1Z^paK$4IGDiE>!tc'%Ghs
%&-S%47`uEf(P0N7jnS\OF,]l<%])_!MR^]n0idd4+I.s:<"M1W/mO\V5F*%tN91/s[ZA#f`1_2]Gd_;\^,f3*,K`:YAVEgZJ*nXb
%#V2$na@l<9NiuWTYq[GaQjiYTK%?)]`a0NN@^"!&_HrY?_U8dCiR]Q!`#'qLPr#D,%c.,9K7Tt/bll'AgE?AP\s";2,d\>BC1/QF
%$m20+pCVk4O75pKC]5L;0Q"2;?&6S5cgUs5c9fC%Ls5Ha%j]%g8NAWh(sAst:0NZO3bjh__-_<66q%?Ze;'mtSA:+CjcNK@:d>;o
%Og@'<Cg\Y3M`$m-Q9$b%/T/^$:uE'1F,k'!';^=Kgiq8+9pI&=P?XDhDf@-,9]i#_C6[Hus(ElUCe@/LfTmkeh.-)p[ogGuR.NeS
%A>jgQaJ?:"DhCY30N8RV^.rhrg,Z,0Cco;Y%,%Oq(;<-tN50[K!E6ilL^P/=)#faHLp^8'2[l]2-DL2G4ofK*04f2/V!Z5s)C>lY
%k_VPm5uFO+K&S")GZ]o'@1>foJOO(s$Ps#1-Pp?Es-ZXMar%[QmOm=<aODCP+k#S'-Jj`I85.1X<^RK,<:3bU9(A"MQ<OpDB5e#&
%Fg#9I"XDU$-;%oJ@B&I+.s/8;0d;\lO\h_m?PBHYTe=+)U'uVgK^bWsRZ)oa\a5*=[tGBDLBrWA/&[Q[-m174E[DO]!K!EU)_&B5
%Ak"5NSN,-\S2_H.3fB%@76(i/US7:YWs$gt0lb]C)\N<:/qTgF*f5Jf&-X=k;k>Bn'(R=PPs*'<Ck"YnThY\C-$X$R<"bXe*1jUL
%G#J*H6_b]_A%usl0)q/<)Z`[kNRrVA5LK-,B[fCY5R4*b:d$Or&i;<cLf6tJ:NW-:NI(ARf`X4HLi!K*TEhb`!_Od36R[SG,fChG
%KKt:./8+Nn0gkJO(kUu:Jjl(_-3M2ZGk",MQ9hHbZR-nE*]L<^=_[fH%IOG7cU0#&*PUE?F1F3;a?>:]UG$X%$%tq&VS$2-IVO^K
%6U5%3dKM>*(/HZPjtmZ+'KLWi&-0(sksI"KmF\K@l/EAu)lfAs`VUYodo%pn4\li^M?lP7!FeZf!TN1"Y7*ME-r?lqAUMTN]GmR/
%C(HVX+$LSJjg-V<(s[o0\u/:CF!c:X=4'BVfr&O7A0>J2,<7"bK'5[/6rNY+FO,l/*\@V&Ssk4O@C)mh*E+R9nd6-N$5Y*qE3uo<
%]:M#-/H$:Q%tZ!A-(gkk*g)/rE5fN'LhA=8'RYkM&PDe+'I(/Z!tkhb(+:3H6^IC-5/uU*&09=%53:p!+@>kG*<d5J4\Ptb$P_4/
%OLrPqDO\Ni<=r[Zlr"25+c*:f`&A2T!IDRKBkR%lmRh-#W5-B)]!c-[0)h]kcJgYu"U.j$?inc<7D9TFfh=%G]@*OV'cRh]dB`,k
%j>=;2<=HgX?O9\C4iXEDhY>QZYWJ=)]Q&7,Cg=%EkS`[`YQbnbK>[dnbI,#CWlV7-R>/tjG+'@S<3/Y\jWEMmg*0*pR@Gj-ZQ^)7
%O]*=Y,5AU4mjB%%jYV[5(.oH'26IfXmGS0W;8+X!_S@[1:'+Q=94Y%BN8bsr7X*SH+=$_\!ZaHq;EJqt@li#)L*D7\1G0J9;@1T_
%6qQu,_+aEr(IHW;_')b?G$Ll._c@*?g'W8q0FKCIk_N[K8p?<*f,c$b("GX9q4V*Sfd[UH1F]iV\sH8M:S)DkI<g^Gei_Op);$fW
%bR=%2WKs5hW[K:m7_og`U)rGAE'q:>,D19sRk:h6a+d$p?C0Hho>?0gCgKXX'H%MAC7E?qb%A@67@NEJ9COukE_n9^>rXoFfU`hq
%+V]\]Y-*"<<GCWR'Ommt=5@rVYd.</1-\PK%ZZX,,enp]3kh'*lBj7B2WOb/J>.H*"7lFh3ce501*iuaI]c:O3e#MfP5%Uo@f.M+
%Z+.j];6Bj+r<L;\ch+*[EsV[p-sNoTA\i"`LgG/9aH;GWk+O#fp>b2[aPkGN$REUpj]K/i%4\0+3OPK;_G,n.rmFEGGaV9=Wt<`a
%OU:8Y"OPcNI0EeI6E/='!fHH7H?^%@&@\Ynp?oMX<PVR_Tl;<VbVoYUHK$-%MCS`\h+`hl#8$&3LLW^`0paYF)$7]i)b=6iZ!pP*
%,Gi=O-si>2_UEA7euM,BIY"rO="=F'<Gmda:_2G4Z1NW'L?'%[1($Z'X.Z[2?1);>(OhDB_.l"N,Qc*@Pkcr?JBF;3i_Y271e(#j
%1eX(`.uKZfbu@NZ1`K+?m_keK1PK=7J;PC_RJj!-m_;HD4,,."&M[j0cG1S*8(:BR3)-_NB-P)kW1i1e:5^UOYVJ:5BU+N2BZP0#
%<3@$@DcCHp>#[W$B%oomC?YG3i)A_D/BH&oJad^tcnaUD;ZS=P&VGfo`u?*ECIj.o7FsHJ[Kr&d,f(6'6t(uZWj5%r%G;pD,@l^G
%1+HKr$_aj0B",)/*Ia$2X>!;>#Dk^G>`58T>Z79s_e>!j$u)l#j;Rm)Q:(>2:$+L<ZNE"AM)X&(V`5=K/]&J`],X]:<.S6NE_7oQ
%NsSY16S5Y%ROBa#rk_Y\Oj`%JXStW>R8?uHcr@dE!>PX<5h1i-Fe&tA"F.N8h^Q>q]YR@-._t5:2;G8FJ^hr5-JLa0_pS=A$#;#e
%,%%(%;)&7aGtrq5"iH76DTiC*=sjXKO;-V&BpRj.\,nJ=FA#VH%b>$_i`+;J$:s-5(c7bnUW`Ru"I.f#MR\7U2e]qB'ad@fM?p5&
%70F(1+rV]eMJ+ap=+on415-ZnpYj^X*Yg2)`eZm["HT4U"BV5t_.\dh$7VQC"Sgl!6V5,H(3_c"nO7Gs]N$Q'NYsPHFY0rG>$,iA
%rkdc@%-)tka[+6e`I#l5MXP>K]r$P%jA<cX0q>`W)"0Hm.)2rsp6m$td=M^)d<AI6R6X1GVL)#HVs6OD\YAJcT!NsI##+c[*_t+5
%$<39P@F(?,7K932rLNcq;c;VDXtuDdWhbOYUl)`?g!3s#?W+rM"rGr'Yf/"ihr1'8#1YGk^`)'42+2.a%-u?jmg-m+<@WtBK@2V3
%N:GVnaTWFlMDQPDMfEami4K?.fWA$-Et"M+QUi_(WU%7VAR%jZ69a\QTF/-BM$3&\9JUY*Zk1J@CejcpFo9\hs2"1qs(IE3o+oQg
%%iKS<D=J%lZAh.BXI@\uq\sW@*<L"+O<,A#GcpUc2H8r!n(t9k7,i&O\IRep;CYD"SdJGfH.52><9`@$p'[t!/"[606%(j>7hF:F
%%[!ZIUi_2*Jf:0;cDUO_[*;F<DYQ_o8+R5rM1K=uN>SC3NKS)G.o=.HLq,8H1+qbTMn(O7+g/TNX;TT$Hj+QM_h\;$k7L81U6/$^
%Ft=.tf6")ab84u/\MZKF9_c970\$'bk+HFGC*K0HTKA<>"VgYT<>cT(LuiP%!9Ns_b[-\JmYsY0qk(UlLo&.3<-/6'FiP&JDfU^3
%Kcq#N+PVVg#L]l_@4-R`=#3PP>s-l;X7r39JC3BhKJEuJ6M]BqQA]7![+&2!7!&Z'''rF<#Dj6'M?T4QChm4E/g-gQaWmc]I+ZbC
%gX<2E/=++N_Y`-p_39%/d)L8S`T85o1._l;S@gMP7'FWc'TWM;j9h!."aC\'`sU];QVan/d9rg2.OnSWk;nWa$2P,qa2PYbJBE7&
%LFFa)2&3'm<X;[V2$,N8KJ6>;+MHIO+O"ahO?`t8QmmY1=bqd)QKXB:Kgl>J/0YWTW]5e9LuM@&%]+$oMCog8<7V4=Q=KNq>lOsn
%%S?clXl_\t6`HpiJ`t?A!hibWXMCYU$&&,>AS)L$X."R1jZ/K>4B&]me>=0`Y.3Q1+AIACi]%!bQL']*Tek37X8Q!'e9;a_b)r&k
%:s.d^(%E_UEt$%c+#+YNG!,lFi3S+%NgYP%A*\1)#`;(1%6k<p9K/`K98.2-%[Iu!l(T0DfAZ,UkTNhN<<Ai:2\IWd;[rK-m7DU@
%ibBUhUpQ!rSY8c.VBi@Q/ug!Q19ChU#'5jE[C_f%pbJ<bZITS_i>kXt;/M/F7MkeJVp2Ila:]V"Q`Vr58q(M7K&9k8""*_$=08<)
%@'SH#LK]Gq-D1j7HuP63+9aSpKeeb\K,B21:c;h,BNo_1L_,_A@\+?n;9X."i%0JY2E-1RMWk?8)L/4QHp^8+\^X3/3gd^6=-):k
%^?A>ToJQhd#1$D9:7uUc$]RhL]OG94YQV5oO:WXl_dX/lmR@JqBId%9B."nQTZr&]V^!<@G6EIJn3eKs/gsn1Y(XBH-&j4R5/C(?
%Q;E$,P+]6:/n*]Z#qlD'FYG1.Yo:/\JJaJh\Lf;INYar0pQUsSILt79K$&(c<']IJWFJB+LnYq':be2fWcJt0RAqBobX-0cTNMCp
%TL_2&4Je]QMiXQlk";S'q32:&:I*9);=-%!6B_j6:OZ$AY7l_W4+cO!U<#fF3";5tpioB[Nd/Pf<t%BdW/Z>!MCuWMFj`Ib8490]
%@M8`r1mq[=A]jHm;m$-a>YcKg(%!EM.Lr1i/AAML95J<7HY&<'b73j+!YjDaiO<METk=]H'l&X,=<'rT<>%pCJk<eId]:/u7oH6^
%#+U?-NY'/VDFb)190sn`;/%5q0gh@g)6j<br(tEp_T:<i%X2bb80TKL<G<'+@Lat)NH)KD^)Q@[9A@2(ine8>NFIdk(_Phr654_e
%nI7[s@G.frPciJ07saB%,;ithJpmhH9`[;uEWlHP;E:lbh+XC(B'NGV;\pgS/pZRcW2VT4E@C2!E+Y7J>`ga2:t(A^'??5P2(u<L
%Ho[Kf=7SL,fYqC</3C/M1gL[2%52s))1%#De&h2U0gg9]=/86@mci+1+riR>B\sAcZ7'GrV3:TVV$p?,8__AKCA(bCMf4R';PQmE
%4h>`@`+H/+4lI3E*qPrIFXGad0I1_^U*Fncd2"V_4YT2Fb7KsjV$jRV6HU'&N6b:(0[uFn%^W5S'O&<g'g#!394d'D<eU-<V=HW,
%hD8\.#&1F0MKt5#QaeN0DY)>6'S3LN'S.f0oLLljYRj+",H"C^TYaWlJP&aB6^Q8J$,X0(ium."%JcuVg:"n2Xm&B<E/l+q8q>&=
%Ua<C68W$^HOO>e?h-0Fr2,8s;!1j/IhUhDTEZ=91%JW0CNL/8\DN`94ATDAa"?8ZP#R"fU#\OiI!53Ou3skKHF.SF:fcTs7`k!tO
%(kEHKp#pL]>pQJ.om*cQ#^[UD).@'c0go7t(6=*e,&@G/1MS_eNNqPR<I+N=$YHDcK@[00kh`Pn#]U518mG)7K,*?nn_H"GYEas^
%d*,Ot/tW?sm.&sl=h!H]jFS>F5b&(7HJo:U7AOb)fGRLb5EDVV!R8af6m=)u+!G0L+M3p3;%,G<2XS'[lUQX<g!f_j!@ilK5bmB+
%OFp>aFo.=eqtEAmB#lj!*W]`bWY:U@PII=\\2'1u+eW]6L2RI`-)t(DDa+B((IUsjf+$(\mLeO`$+5iSB3\MUi,'^X;>&Ria-gY,
%7^TCW$,;:U`Fgd@Rfh_-eb]ksRj9lfl`qu`**8R?^'HK6.HBm^'UFCF2NWm&Q%re'+3+6TgYsH\?i+U)$X,cQ"F`fWlWdDIS@YOJ
%k^ha,8hqNqAY8f"9'S7scNt<F"^05D-_U/;%Y[L`(kB_E1kW'^_F)3jnsjB0+K;:IAGD`l85TtS!Ha75G%l:jBZDiAJ,84XZgrn*
%JYDS%hcj:KFH^Hg^7eOcD5K_*QV2sU#[F0Kp`[e+0Z(?D]*%=[Zt/h_A.WuUd2ch*(^/.4LnrhMG\%^98eKS:PZR$!^t?\+W,r8"
%ki@WV9K^BO+556]T5,%Jl+"TS,*(Ipqmn:a^YB(dKk#<qJ,3q%`XDW*UTt87Yb1pWg%H//hQGbF[HX;o19uSA@^GN8NtHHH=BHML
%"&nRX!$YEWWV[DV?(fatpQ;(uRQgtd,YZR!&C51R]FI.oV%l!OicPK^j$&\]@W\!s;OoGl^*Z\27q(;$F!<o.&QI.=,-.,(#EuY9
%q1_Qo1aNcLh\M=F`QT1Q&!7bb`K``m)k^Wl,Kf7ZST^Epiu>-o2[\Yti^cmOQ2@&VRMBoY?7%R=+aLV_r(*BB"3&;&Z:aNZ\lEmA
%`c9U2\d=n_r4`+@BnBqTnN,$U8XG3P%mSPHq7:9'I)b8p#I2L!;.<slXJ7&\k*26fil*h#YTF=rg`X$Vg=Q+m5gbi-*9,5tI<e:S
%nq<Ms1jrjXH&:h!%uiZDARG*t2@q,:c?4^c9=YNbb4k(,9_63iA7>&Xig*>9&=>*!%LhgYMgJm[BBBS!;0-.COXoT1&C80s?"*kb
%s5@3g^)(^=NFbB'9ZoJg*5F+$D.,/<8pQN$?lh>XqG`^nN![7S;Hc/rR[KHYC6DX$;4Gcea/)9IJ1Q&P^K":Fl"reL%!3ulEUJa5
%h%eg6/:ZX:?-o5CMT>7E5*'Ak[G#NFTDli5pD&,5Y2GoYGko<%9o-14AtF22*3+`KU=M?WLf'%NW"Nl_69$)7SQ+cDO#dMDEn#!6
%5JB,9[?&^tV>9"1La224_uW9pi\rY2#"[-IZd0m>7_6$2#Pupdqt&P%SHs(o!V0bB[krIR69;!T@gaKDK,m,-=VWlj@n=Z)&&uJ<
%03;;@OaZ[07t`S_@CHH17kU*qG'+[W[>TRh.l48KD90q7oI!**WJa;s4=YRbKAan\KF+35GpudV[2s!A@C*iih4k>2jVA%@GA'l+
%6p01#2+CB6qV,EJK)?WYKgc;l/<8G](H7*-,>`4WG-U"A"*uERcBJY--`+/;K^J;!k;Ge:O)Zp(W^-2Z02X-sIp.Us)@U9jX1tg"
%oXYQ>&S1i7lAd+bTXtcgeF2FRm^f0n#pofUgj*e*4P?Y]KUIiqjq$f-9KE.?;7)nMO7+/5:ZS2q$Zo8J_=NU4W'eH>1le;e>+8,,
%%t0in*U$F88@Nhi+@1s+J2it;/HqcK\bDi.Kor_E)P:?1N+Japdcl0OlD-#ZEG)(!S$F^-UME8do_3QC+RO[hUckCIlo%8,9qTNu
%g-4b`[/K%=ir]TsN!%R#H_oY#/rJ>b.P#7W2!rJ`I>h@B`@$Na#!`T6-7".qF)Q9Wh!WO&W0q52%.kp@eC')ldGf]le+t2;k&$WJ
%hmgdgK_Th?,]X[f@=!!G)0J2kMGJk2b(2%K]ZKPrfs7iqm7N&`\#lkg9J49Fa$K?YU@h8:hhgfsPWt!'6*B(F%2[j[U4aM,W=GrM
%oio/+FWER[ImLI03?`QdSLrtm0"n6[61jL*51l/$BG:T6W,V6nk3,_#:imY2!."Eh.'GmX7bq]BCA(BQL^VZ;\T$t0cNX^sT"GS2
%h2(#lhs,KX.'AGZ.6@+L?<C(jHMHI3]=E<=h#IoE%VSOT$0-")N;&;DQa-P#gbJm7A[l:_p,sEe\4ge-).Xcg/]LEoG-F[dhM!I)
%KQA5V(F9P)EGWI2*iL/`O2G!7<Z.S\#P<!cBH)cs%?O]RGLgX1m:e#.]Ys_'4!V5,of^m_2*f'P!ueN3gTc/ohg#.Oj),:*poMGH
%%dG'06/.C>KCS5-Vh#DaANl,&\A<O%JNUGrT=:ho,D"PZq[D3E#3^;"N5AtU.$<J2W!,&b3HlE$+<M1kYl1eU7XNtaHb7h->m'oK
%b^Wg6g>c^.rd'e,CG!h=Qr=%a>?/0%12>ejB9[SOQ$o.!lqq3#6ZE:oT+*RG=Sd@Ai@7td]^>c>gm@)-TN)RBj6I[!0og%*(R%&!
%pu1][n[e&\^;g'9Fa'N\@1pWHJh+I[Z9VNO!O6;N&;DicVr,lA7$O,Tg3)kg/r9bu7?B!CZALnJJ.9k:L7*qcK6K-f?X1j(V[]3_
%@2mqD/r6cVHkmJr`!Wj83"1OlQD=iT;@oNqX`H2fkbEZ&aQRk^U(alJB>o',8Tdm"GLHBAY1HIT__#]s]SdunKsqhd'*2)i]OAJi
%qMGTQ'@K6,;DfpK]!Ki/l9_+nW)*"eYfd:q]S4\+O?6%fJ!`W.^TQuU$)E1*)E2reZcm9X+F+%\81k-3K/YC76K;i_<t:,2XN2SS
%9T=`p]#"e)q\FdWep%fbla]sK;UAqnb>gJ&BhC8627kh@Z>mHoJ->tAZ,O(EQK3E\mAJJAk+XK&!8gC&Nof7^!-]ec"X"S(mb?BT
%H6q9g?P[pOgTgP1^S;$ai(CrlrS3:NT^D82r@kQqUkU%VHun#K=T+nf)j#Zl359`UT0_Kq5tuWCB9>);&7Ag&s/%Fd@a/MKL$^)b
%0q_=,i\j)(J-PDN2"92.!g2u/g.ZcJfd.c:6Vq(?Y%,T.ZA)u;[bT:@;AE,/Afqm00?/1(k85AF^Bc$VUAuEp1kPOgD=uXamWE?\
%ffrsG$u]sn`jPK*@#+(77i=V/6c$\\hH;3RcmB",$AAu-1FAY,&69#[N3S"'g0%ZdE2W_R[D/\HMoc$tTMlqTF2Y,VLQ=ljEgE-B
%8+>M!WO/eAG+We2EQiE-@+>7OiX7"P[OQrUBXht/R%7K7>)51;943"YQ]"ldGM2Z#Y-#pfgo/0>H@XXe6;T"USoljIDGh5^:mHn(
%gC?^BV8i&$%IFTZ$-0Z&:E^M12"1h5ob`eE1$_@]HC]XZFED[FK&H)h--hmsem*8XM7iOAdCgW)59!6-BDWkk^N[)OL515+PaR>6
%c2>G?RC,YE1ms333C%kl)It0]CCsQ&aNV5p;08"ijCf9e$CecQbR/hEG#alsD^ZfH#+>9V^"47,6YKE;PpS:i04LE31@ks\Mprk+
%l`NSNK@$^3nj8@''Bl%=;.s!#,Rm'R`<)5a8.S$#.+ps(R[_9?Q^QSRDno4^[bis)ad;D\-o*et=\^0)e(`;!1AMNlFG@lt\!fur
%A<J@JB/H#JdLg4\P9f#J-8aD'VQU/Vk-fVN/*tq%RnGmr/]B&^6/)KICpon?\C-)?e@$C:-FOtQP7:ub)`2,abu0=fgr*eRj,WS;
%1QKIPDFS%.+?/i1q7R`.Eg,N7AX&[Oc-0sMPFI);XXCrA^iLb/%\f/P/se>N:42LC`/eA<.td&09?ugt_,$6T%#>n_-ol&VogR,B
%"^t75abc`B>Bbj*En7+o1s&mk2bD+O`Qk+ai@$al?RWf?3of"Za%LSNrmb?;jWlp=6=^M1':TV>CQP*;ODf-'SNsZ:kcCI+FP2M$
%j)uc=m-HrQ_NSo]U[7'?F#qE<Ss_$eZBH@b0;Impf@ofJALGT/mUb?Kih^3#StrYL__+0a*3Aju>YnX_[M6p2Cr5cq9n$u/,8FZQ
%Fc&J0O9Z)L>uee=YrZ;pgQ.*I3p^*jY:`&-OKiotanm0hr0g.Gab*IA;1.@+D,rf@KM1O-;&hF_aTIrY&VRmT:[V)-[Ng59PM^k"
%bOsEFq!nA9No/4CaHLhQ#X<g,7JPFP5D1PQ2ihA8hY0GI`bo<!E7\Rp93GXR)9P_)mU8>LjIJ^;VQ@Z<4q9!([p6#%NZlu\#KeTt
%Ps%G:Xbm9C6>I(;@7N7RS8/)HUQ=Cm4)3iXl>GGiqTP..dJ[]XGFmbn*>sSO5tqgB7Eslj_#b:rBm_>h)]BV_H0Tg()P4OX4:7Q,
%T+G<5%eIcRRUu+M_%VHa0uJf`FAP`]TJq7f@i@Iegf9lMF>YO1.C6Y<La5Dp@jV:=bJ=JLAhc<CjtQ(oX[5:5UTj%6IY\@$dYurH
%#&"it5Wq>J#F6q.+49gfI-osu'2=kS7Vi4oql<T)6fVo$:p!oN?**Dc<'1A;Hm]Kr%+%+tB;TP/5_lVCIntiF*XL9C=Vm1iFd'R[
%(t[.)I'b!(*S90!O^Z`L`pAG(`A_$dp7GfR^O5.`&T-U='('kX]:%JKs6F%FLiK9D4_\ici,5CZQLqrj1+jT[mP>PN-51eI5U:tL
%8#[(&bctlFWXG:0FN!6elW3-:4345jppLZX<'EC<D\c/6NNZPcY%/C#LuY%8HL\W;_t:7XVu@QDHmp\mhp1nMd9ZH@LTpnY3F4rV
%>l7@3;d'^I[,O].7MP0+[S7\O+C>G4Xk8XR;)073"[X<(g9?/4+nf#GQ.[_cc`Bs`#\$q<UC1h3aSrK6bKtREZ;\\Zahq.`%PS3J
%M;3pb;WE#?;+T/C6-a$T`0T-d,XHj//I;ReJF)$*,]Q8W^4$W&M9hFu$NTpqEuBr.I1*j8nW!>?=55TtO!8.?VR-'R-:7T@4QO+V
%]Ee+nNi_s(1:R")-.b'RSM?L*2"l.iEaM]/5DER0Tp9?e3N,CM\'U:i\@+@@_jP5II2+6KDeXXZ>%'c@2*.'BMe_KUUEOkhI3`#E
%X[DFe./WVEa(AMN^#GV<QS!C:VJ"/@\2UN,Yfp&#_c@0]h2p>s#?4VC%`S2=+\O?LLU=JIL!1k'$ZWHN:6Q!b0S[uN)>>Y7f6ueb
%Dk8\YpAH#G9EEs/`r"$`CReod'mSrqV>*-H<<c:VgI),\O$M-9M]]*Z`-pri-!o2n7CC)1:?nt`,R$NR#qNaCP6#7.3$:,k;%TQc
%k"^Z>`?nuK-6P5-cmG]<gLs`J2XC"bGo2-50c4lq/MQM-pCJtdQ'0hgjEk:HhN!e%Tc,HoMYZ90jQ-%ac>'bT8'oETP\XO7!P'>6
%:9F4rqr)n>_oUfg_%=W_>4f!>`m(eEH@e9%/dC=]JAl>1)H30VKn.Jn(U0bZbGK7/n,hRP`8ER3VB^pV)c'<%A1DFJ<iHD<7!lm\
%+2ucLgX9eMC&=LqfE:&9A_bupp`P'gSUn5C9!ig+3tI<gg6Q3Y,=#Z=T4GdDA6;0MODt>ib8,,1gBC=)US\[!(+0LUSA>Y2L7QSq
%fWk\8RIuaNq<s+9.N3/`n,FVM84T))_?VdR$o4"]'665Bc.+st#,-li>'LqjTt+3('0?Oqe2X*OV$g#I38cFS6BgtMg.t&!A\U4G
%(5rB!l4UU$BVGK0pdd_biq-X5%71`Y&m.0&a\3K2fM3V(2*#&U)e:9<hDh"O>jZJn8kktcold;@#UqfefN`8q4GqD__^7>>l^HVi
%\Ft/h_7><jY"MN="aEM'SG_+>,WJA[1<@^0\1T^+hlq)uDXN:6W,42k2Gd"`ep:M$b0>03)kbC![S8//7Ct%1o20C7j3d)GjX.HL
%Sh2m")>8%`SF\LRpb"PdA/kb#d#H-h9lT)p)#'&BPN0mA-oh=U&_&*S(Z.o]92;/%<3YFgD=eho-b_Omf%VJuBS3Zr8^>it,PrcI
%CCkWna/DR)<Z'dq.O6AQm.<SaU2&P&pHb.9CNr"RjE)`$"D9g'BL.+ZS,g%*=`RORd1^=onunD]3(cr3(YmIf3EN7OKB-QK6I3,6
%:=Ltnl+BYa5Uc4Y85;EahG06?s0,)?eaA/XEcTq`52@LIl?tW_:-bMYGL!_e^*n*FfuVSf-]+2!;07uBq'7t1/LWTf2&;.VZjBL1
%XCnUo$?#o`)N)dRO'Q39D6_4=A7_!7F3WaRUY&glCefmUMbWVKn&-P2\_H*'ls^W)?Lf3sH$12)>FLGp6aj1Nf]5V/Wo[i_VAet\
%?#I*WI2.h#g'W<eN.(WK(rlQI0c*%a`jr<P5(B!no'8`qD3k3F(3tT4:C`2Je._O#:q;VC=tKS^KH)g&.gY5us)=-NEu+?t)er(s
%Qi[_%hcq05*Hd%&f)*7hF,QPZnu<K2#(2/]R*jBh<!P.,Q>Do0S8!)QKlJ65'G]r&'->sB;$0n_Nhu:]V-$R)X@?_%Y7F1r=N(@r
%+`o&Y1X?>+QrP)iO%p9FnG_VS4ct/[;-JP_b5e9ml->m#JEY"#W#_p2XTPEJ_VW#K#ad"1S1X,iNj3HHK<@hkn6F>CqRp)[2SZ+b
%#]%<B0QjXUQM$g<m';A?6C0/-]O\uRaC>NT#cb^c`XqBJd`?'f:n"GrGU%iGSZ]4W]K./G>lBL\<YcC=7@BKjQ=DGU*W+X5?B]99
%J/n:W?E(>)<<G9B`b&)_mWiSdF2aa`Jtl/2Ra=bOA+H2q(\uE*QcUGKGhd&'>bI7g8=PQ=Q:/:#W+O(*.@B+*`k^eO,'46g;*`No
%'VKl"lRo4JTV[mMSJOGXC5Dhr86'/nS2uGtL;j6l:J5A/e?o=^IXkEs>stnjm+t<n!l;u\b'B3IlUoq9+VtJjAu3Jrde2;Lp+t2'
%<iJOu2Z"X_H[*_TXSK"+.tj:G`bh05?L-rMm+`k%/1M/rb%$@1pH!GP`>r3ADX@#(;NUL[Zp6Z%IQU[\@dpD``Spm3f?Y%aXD`f&
%)L%K=<SLKs[!GioFI3f!A"`*7@MMki=CM8CiiPb%r@HOu^l_mR!'s/T>(C+*[Q0]a<ep>j[^h(oDp%l5ceGNFg9h@1)io"Ck6d<8
%-L=0.A&Nra)LHba`0?ZHW0?_Jp@l$Y>o?`9k$mnH:#"DY+$pti8/+K#nA?.UCT.Cc^.KWS`RQZpa<d)+%A>P2Tho`9VmL&A84BLS
%LT9Lt-l3sXd;8ncKf%-dcMAPsI;.3,Jpprh>\Bn4,us)8cCT7V,*O2$5.8?[l?_?dlQ^TVK%HAn*$O<uFg\Mlid?uQd:UJ"&[J]1
%E`,\Cg;u=UlZ+h&@`h9^$(Rm&8S!PAYXF5#`S';Qb:9/N3\fR8r&D,`<H'$TqQ-pFpL:(@3tB$(a]4:.;'L2oM$t%#?70M54L2Kl
%@G#,4OB(r0,/gskC23o8@Wu2qmOTkQG2"=O=4Oi?9<bfB=&`;5=b$O\L*`\<`)&_ITpLS?bDdk`Wti6]G&_qr#^rGhUpT9K$u,9l
%*G_.hZ5p'co$5Ds6'X5O&l/39O[.TDA/&X^klp(/)uunGW>_in<R`DM!d"+#=gM0R\@ACTElkXsOGX*nTX]Y;ag.r<=_jQ@O0IWM
%.V(+HK`#dS3E3+<'VR[m'%M,V$!C$L.Vm2Em;TI9Fe/KtWmjIdd&^)YMA1_j(83=UAS\mehOm"cku'lZ$0Wrh`JUhBVH4,$-7bAr
%h>1Z%RT+>=.%:cfIj<"(d'?dZBDLo_oY]5"rr)65XP`ig<H/Li8gU;1k2+d6Eb['alE!=)NLt7\_VZkoD//$U5UGteVh0O0D89pH
%X!TTpC'Ah\Xi&`j1*GHmcGCU1D3GPm":L2tnY7G'fd.bD@=I\"W_.jM`.nPo;0,iJd#6(%V:b5^5>grp>jAdh23b+;*7V!5-Jt:A
%AN,=?XY/XdgQoc4bPblPY]K^,E&0C`j0S=g\]WoL83Q^<#nV^V$X43[5%G9*N?c4'Fp^''K@hEGUq4h_MnaNLCNDq=_M``%'4hV;
%7-f,>=!^&7+hH:;CA-dR&O0H%[u#h'bd^[kqH:O-Q5qf1?`fFN`LXt=5hJD"<6G%H(rM@h43\h''hZ1bUs^ZV'jlk34l#d:E0dLV
%D#4nX(!MF_$)q61gFmA+j%/9#D)>3H;,i:ReBA/_Ch9H]Q&0$CZYSRJC5)eSm+*dt;sg.7ZVq]"E)/ld4J6tX_ad'GTc/)/g33G]
%XMb:pJm#dKc\=lX[fl\D[XGYT*NVi8==MKkb+:qj<OHOP!jlfX;]2Q"`RBsumh3f3[tCdmO9kqFL>#4VZ=-`*[X!l^FT^=('G=7e
%>Uh=Cr>,@4CaGslg!XV$$V8hCW";gI8rF(C!+O?!YITi9:]qfIMSe<Ig9fCUf4ArcQR&Vlf->#pm8cVsZ4cF/Y>SKdp1J4q>q08W
%gg)NgmBP3W;TOO^dd5cX^VK&P3l35QkQ^'7l!jkPBjphM-6T%]4;l7=I$\6'\;0?8g*I5m-0>BF'GeQ>f+d_XY)/uT2FHuJid8p:
%D2WF`eT)s=<7sg_GHRZ`ZKB`])L!Q05p5L&-KaVYj[eu20Ls&:_P)$m=_rD-?%!8dl]dQIcA"r/d\R.;(/:UXTZI2J^Qk:`U5p>P
%m)OM9_e9PS$@B/ldY0[#qp%FU/Xo7KP,-6?Iq=<S$E@"AJ$\T(<:aZ/2p[0>+_>d3N=<JXf;sl\2_-K`;>>"TiE)LYZ:g$nqcD&[
%4c5-cYP[0ES.cpi1hGgD2?O-4E%V/RHM3]$Y$OJ0>`(JY]NN1l8)WeAoboo5WkS?c$G^,nRL`65fOL[((00A#=9P.M9f>:B7roN%
%Q:UtlCg^8]!TU6V)2RF1g71lfpX`GQ-!A-/MJGB<QV-<nEJ$o731k?\Q4c"p$i<,%rU^Pj,s>pZ7oBnD7h2CsE*o:5R>m;$QkNWK
%_/cT(%)@"RmAcP!LBeO*Ih>a%Ima\3;4=VI=X')^2g8pA-I-H?c^I"89)\?l*,?S/bs8b.I=/nB7!,^7F)^gIdnNJ#8-/'b'$s6H
%_q97M.4Kunl7'Zb8f??_PfWL4OdF%e./h??#pLZ#H5(XFET4p\!meN?ZH*hlio]5`#ptpbIGhiW<\)bId..A&"4Z/4kmo,eiUXCa
%]-5A6Xu[5Lb-D>RZ;q%4Q^7O*),j*=2C6s/gou87Qs&;"8#5:DA]IMXYpAEr9/qTY=Gf46)(k5YCW91"Fe8nrSHZ]*[N#e#)U>Ys
%=Xp'u[IVY;hrEI3VHiZ57q7>^Pmo/F:*WD0ph^Xe$qJ:IJ7+dN.u.<[1s5r/?;PKpj.k:]40akU(^&qWGJPj?D2nU5o#=QQpq3k!
%`#;+ic'?=BZ[OZb?Q;"Y,%d_nMsWUs!?R8(m(\rAH-#6:>eID4;%b6u=WA;d^_cd`]pXM=Wg><VYE-IL8Vrg,Xt6Na.==^R3tP6j
%-a^h'[n!RVo/oea=)5#ZG$4\@<nd59k"sIqn,C24fiSU7TMY0!Rl:Z&!7=dP2IeY)nf;Q_6Y.nV?^;/7YheKP['h'Nph---YNo!n
%qi^ef'XnY=H,raL,?gE_B>_55m&$a^GHXWHjU\E9B)2kINV2P^htm1aN%D#`lG+O#$b"=kUUrh[@Nas?N79I0;;^V^8QW=dY['Ss
%HOkpV:I8MB3W7OrC%OIrS6R?UODN,l6&#ap+PoYpS%c:#2+3SUS<.XE8?/O!)\@@o0S?i:dtkbqdS38gZpp?87#C37.`#h_Qe@E\
%EZf:X']F15>WB?9#)he;A0qu@ba7RQEZCL*nCoo)IKp%2gtP,CMf^U:)c:j<gg+qcnKWpNpUoYRqHm,:6:dPdjB#Bu>!R68U/j<-
%]Ta]p@SijOnC\dT#l\jEIa2gP79BB#qR.Mm,,f8da$=fDD$G,Oom\&%>&[m_!ot&E(NoDW(3ZO3f<ah>fRIo-"<f5.\2_Eub&QT3
%UfZ!CG1*St7NbQUC$B,2(IfAIFZD^E7q-1a/AtCdPAY""dH%k`AE97bR$hGXCMe,oGB+b-5Z:iDVF:OR4kbeHFZQLqm^4nJb0.XC
%E)f-0eHClnB%,A`q%Sr5>jFC,e=,3Z_#Y?Tl'^GpGH99?XK!L0q.#b!F%jG=g$fi2p*I"u'ZD[YQ^u^"eA=)+;WaY&6nhf-BdhJG
%X."roR^C;k&^W/0F1XW\9##k30rnS%6hm='!1L>Zb-Op45Y7iO'!^UZTp+eHZ=j>F\:@a?*jo-97Vl8'!hI#JaFSGA#M9Q[hrZ@m
%U!Q<fgF"7^HpIkhdSrAHf,QlcR8FN)5]\]X+jLHc>&0T^7FVc'Xhq3G`9mkG;jI1n7NUo`0^PL*K.d,h9=nkUDlp=q7_K*J70>*P
%n=$%17;]K&&c>BNctko>rN024<Y#%>0f,SlhPKIa8>GheV0aE?Y(i'F]_(4&Gf`s-G'D_$7BYL2QWusl0?]>*k2N^ma]3HVmG'[O
%/tSf(4@L'QdZ*;Oih>A<=&7D,]BeGmHeANNKpK4:8No#`$,?k50b/V:OtYAW2YV!+]4u*m>`uDKKf!GF3X&t3`MT2*e6>BWO>eUm
%\s5^ZbqE5GDTlq+`je+2h2Q^Ked-N+(5bceCf.i"3I](.H"4e*0m0((U5uM3:[^uZpK#tB!B7e547C]:HuCmVR[5Zsk^.+<X]bP@
%pjHd$^G2YD)Vsk`o/C:Z)e8oe/+A_4p#J9GEA:^H&MLEBMpp\Nfspd,gpfso*%L]SQQ$aceWFqGpq4Otj/uX(UAuQfT$Y%h/l[QH
%8,dA+_UI_=k<N[pYo,")A6!m-Y]hieg_hR/XVj'0NuR-#]bTYKgiBgE>\l>P.6\Omcd`_O[2HZr8^FiAMtuUHV0^g:\8O8hUa/<p
%j1T+V=Nr#`#[Q:m*pUr2\s$h]cl3q^eP^X1;Z*!JZ.ULcG"b,G[!:;,HEiFcg/!cQemJ\PPO)5bk[_6;Z0krB^fE4Jj56P_(RkOB
%D@(!Eh7]f,eEdsA/@2SbDdF<Ad<W`ubnnFL7cT*b67YH`OB*89::?&A!8SSO=OUbY2j>^>[^.&+KskG4;0O`7iuiH(kVL.eJ^Z]Q
%?rd`XS%(>V=m,RgRio46[%,[J93C"-p?iQga%*>LHoE3u?]5H,#pR"g27sAi4@_$\KK!5s+Sk4;@j^Z=.rW<ZNtIj/["W[0j$,2:
%U+^r;9gIr'm.;3gC*iTeaEihh]gTj1d@9XYRipHY1p4CM3GeF:\G$mFr6f.,bM]TV&[,5<Z;GV]nsd'4#maSqP?@Ibk-k1KbmoRR
%jmR,;ha#l0@V2Nr2[sQAD(6^3I(B(5)H`S0\*6Sl_kDYM;HgZ?d6)?L8ut0*,6U_G!G)Au=u^>:5DRs=$c_cc1^7FJW+DL[c+IC\
%?fB80FK$hLJkR`XSWY>2Kk6;#&Ern-:a[KN<QR^KQ&b!Rcm,T@<X1Dg:@P&&>*_=b#7*Cq3nf)o?bS*hWq.!bk>,b"KMXH2SMm&)
%ZsV2ujd0L$YkPOt"<q&%aFX5aP73DU*IIZlH!btp&Ei\)hfb\!>\K\X8!L;Kc/<eY\BqJg."5akKkIa[j5UYk>Qaig7OUSd8$jbC
%l?Pd'65%YP()ONYoeip%M@9^-fq9@Zb39=!]Y#kfa*m1)di=uM["sKF2G2o%kWP%T&#=cAI@^s6X9/q1[X)8CLDua*Qg]2h^!:aK
%Ib&\[C"kb[*AdP>=md]o(>B.I?nT!BR@8?t/E-GRKNp-P!("V-Qe<TEZ\Nop`gOTGc?8.jMB<];_'mU+EqnU@H/!]foqBt0JSlqH
%s#d'!?he_`rKt&.`U@i,2EVH.>c&W:s5A'FgN4M0Th"S81(BjLZS=qp)`;/JGrcV9%"s3)0HYe3YHQ-YPf]i"H_*MVE=U-uI;n$q
%j#.8!,YaFD7]X0e7L:Nl#S:gCK[SGEg=XhXYa`m4aF?-Qb,WJk'^)*Y8k(koQJXV65uA2sjKuCk2t&Ah7lPDt1E7RX!G0:'7k]JI
%3=hLOrGU8Y9s?b'ZSj8g*mgoJM<G(HG#=2!s"`!5Bf8g7#/^S$d`<\W^(Ta&eLS1g1r'd8NK3'P8cp$S>r:Ptgn*5VgbuX#j9AP;
%kjRS]^D[hB:?5._#:$dCY,!;Q&QPX<2?UMKhjN%O\[/"<7WK`5D*:]W.u!jgm@l"^OkM%^N^UQY)e&5N]J*7<kX]R2bE(00']aA1
%p*L6[;>V#4TnprKW>?`.j>*R4b*/>D?0+El.4ons8Eec:B*Uc@8lbIJkhTq=R5^i<XgEtEPhs>):6aTP:biZ0,h%mI(IFmYd&)']
%J^ArXKE_S@F<EC`lb8q:E:gjJmX`^nZ;19fBdgUb\dbHi3f=F0,H2%q').O<\1uoJ3RA\+/2j'K`R]PaWDRI8=0@,(;>4WEFd_JW
%4&R!rC7**J;BH0eV!+)n71oDE;B$WJ%B.JU;?QJr)Ft=,s+u4*6]%LfJ&(OHhHhG+;3lH6cD8_m#T--MJ*0AfUg*e[esRg@NpHij
%nmD[q!H1(eQpt!6Nk94B=r2H/7p:t<3g0,-lb.Ee)ej/2V"Lm(Ulj5YcBLeaYEarqesd""O0mbCJSLi8r+K^I6Dsj(OGkkC+mWM]
%Fd6P*8Ernbd1`YL',bMt.;a%"29]b"=Y_17@.B?b>*"n/P4V*,n6d>P*U#cSLrUQM9utITV`)Gmds5R.L$*KL2HkRh@lq)\$('33
%DBLl)'\<4*).B+h,@VcS+@c]]EasoB3D2hDm:+h;gkbeZ#C[+HI_'K\'p4qsUo*j:<_&ljWU40g-YaS@WP,=[qFL!RjX3gQFqsh8
%@09.<B4fe3TuhR&[G)Oi8=dB4&Z!^r,TeJ+>O_MTl*nfspTnP/#BMt_7[Puu'<,7_qa>05=tmu&;NHJl;Y3THrB9.\QApHUUu(3!
%)+j4S[M,WKJLa7D8.T2ja@8YQDkh,ZCWCggNNg>r#;$'BJ5Bs3f"L@m5jRhS*GN29WbeL(V@86BeiPO;-W9F%2=Z5';NHJl;Y3<@
%l7CR4W<4/39rK+D@oT<eOrB@UrBP$=CR:"RWNs`p-T$E\PH<[EU$5i4#Kb%T`I*c+JG+$368/N^h+((m1O#KKCg6B<&!Vf73R)3a
%87ug'LrKOjNYK0iH>Nge7T(0G8\OCa2j/KH'TeI*/h;"9F\uK>8F*"Somt\M]oi86Uil)T8'j<?;Dcf_[t=JZXV!9bpG8q0.\Dd/
%/d`U;BtZ"YmR1gnFln<i4Ab<6d`8i!P4PkfP3o%"Jh]l.m\nn42`A\%#T$,d<3i27+MMs@buefSGsqOWLDS`trV<-Aq_)*AIjOhT
%+6F>t;81J`p=n-W8a&+.R!@9F<io8'dWk#[;G@B1*D6r.6$2o`MJ*N%G#-9in*_ln's,h=+m@,dFbJrb=a]OH"Qp/R!i=X*UC79S
%pO66O7geqU@8u#:([:i"g'KrjbUj[X'1E1I.r2,8?jkrGQjnH%Jn4=ia2=8-lY9MS66!,/Bf<mJ:k7]=et@r,XkqZ_?r4s>K:]P&
%k+mXnSWJr?0;grc.U\-9;m>EOJ3K%X/.;Ia7Ek#nlmM:AGL;mZUEYhuDL$adCTu><8rjV()]<*'k!JbD+hH+>onb$Hf_%LD=s1C#
%:BSs3cR@S8#d?juEOJ@Zb_Wf#YY)tC*@P6MAi2Zf?^Ie`$q+BJQ0#8QNWCP<o]`?/&Ta5):RQc\&^N[ePJ_EA_SjL39*q\&B&@E%
%#`-$8%e3W2pQStOL$48I(I/IjN[WC%7"t9,B*6tTVt`BI$u&o;\-FHXjr@t87KZ0Y94'I9'Ld-&N_'Yq?X38id:oE$&f%oT<mGEr
%JuZKZ2Q>-K;eUE1B2tB#jA*N>2M68;"Q?5f>S`Eh9q+.0g9sFu>4<gJS#>"ef>eW<[cu3%>Z+47.P8=dTcd`DM2_OQ/a1q.!o63X
%0f18[/RK9WHo$A-JjWbP^"q6Ti1ep;_p9;1^nNi-KpGQkpX9ANXk-[M$uVLkpljos&Cbh?$2s@-Z,+56iq)k-6L2.-V6qUbC[<+$
%a1W$i'8K<"9!_C3='M^mYm2@s2UG0E38)F/.WT0UQCcHS+i,NbfBnL[WYc1tGq8\`i5!qV8GX'?GT=\h>T;l:*$/a+_jA40n]$W.
%_;RJN!='ATH!m7d--*^q6X7]=j?S"=^sf;>8f4/C%=m71F?qSKeYljUDdD1]/3G*t0IN>-g3Bi:9bBJBdI"CphR"<.lWZLl/;3?M
%4<)T66XSh0fKf6F>a1/inrps'h,uaAaTVs)8I4e?<i7&ob<&/+q[RUu02\jLs"Li%:$m)Eh'm%Tp2N1aT(4i*C0t]qJltjlB"o$i
%Jj,3nUQPYgU2G"/(-]bZmfN(C=D@"a7!.L1G[!Nt.\CN"IaL$]7<c(H]RX=WX!cJJfVcK3](s8[^[XODN4sdb([mSllTM19E!Uk_
%9lel#6`Qpn,pkDRSSU2TLk,3j=Yf;gqc7X`V>%)aWe((fe9?*?(S5_YA@kT7-IUE#Yc&r*oCfk!>p%c?^<E#APbq%`\O!>5mbu86
%#XiCCnCceZ:M!MY$qU/#(#f`eRZ/]Y%;/?ZPjMIFk0Sc$Y$uif+dYJj6uXcZ[oD*GUWF<>ammWgZ+lt^.idfF(k3G8Sn/Z@AUj_'
%f_jfCBkU4s1/ZQW>[(A5:kt1Ye_4]j,@thsMR3VQA=&\BB?PaIO"YdRb_I@;(mK;Y&SE5EOt113;gimh9bHg/TP&2NU5TO$2n3&l
%\^!TMNm"^kHJsgF7!l6E6Uc-2CnQ#/S!/=kF#[J/YR"LJ,nCB9gMup>Kg)c;ctflC;-/;BM_uF-7sPBAJ`G/jp'Kd2;iBaLXdBFE
%#XC#hh'R@EMT8f/j58[u8=7Y:oO216fZ+j]W"KT=\k036EtVF5pLSk?%0Y',R;Vq2'R+As)^17-B*1l./igWu.7J\*f?d03NX<-9
%p<REU]6s)5Q61p(7Xr(cgs@eFon0K`'@p1bU1-`Yp?`;r5Y(d+>0D(YC[7$;l6l2M$iLPUon"+\<A3(CRf@*U69Qe!pY#ZW`R90i
%+*M9HbFOVk9Id%23)"_4NdfrMRcVVc"C].BVjQ"k%iN(OWuIpZci#J4nqNRhF57f/I)Enk\c#MZg^&ro8/YK%-#&a96(t-u)\`%O
%"C3]+@c)#*^1rI]Pga6#o$ujJ)ks'hiF%I^beh--+_j.K6pjrECg[qVjb>/iWE$V>Cl!+GDMTp@)a&ho)^d)aJ/4CXpkm^N8Ru/g
%j/j"YM-C<83.6$J&pujs3nS</nY=q&dm)H#;u[;0D=Z4l1EZ&`\K0(I@of'OV=)aKPu@A=PMs+(P;sQd`MTqRUo*KVIkjuH5jg''
%2MoJhUbedUWa_*7k,f4e&baB*9HC[cDe"4la6aT$\oCTf4u>oFa<;ZGEGKg:)P'['F9#b'&DK1m]CjN6@ub/`g"21P;*6tH>h.!K
%KaBk&.g(/gU[_o1KX5e<`u+P4Z4c9pJ6.8SpKD9.OK-r[`Qir4SuL:okZ5[-GDdt0SG.bL_ZKh?-lDH!2sGd6@u(/(Ik3uuFkTjp
%h?&J#V0K&iK"n%uqR1FlG&MK^Mt6e-B_U$8SFs;]3lQG=_Xl[bqH(H-GQ4rGf>%@a5<OGj5<o/Fq=>R#c%#`OG<c(nT7?Y)5Q1BK
%YCH5W5Q:/eIf/iUmsk@m5Q1)L+90CYIsq1LcThF!:Oi08a%q3_a$9K?+F'hJn=/>5rI=YS^])d`"eARiqZ~>
%AI9_PrivateDataEnd
